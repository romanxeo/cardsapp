{"version":3,"sources":["pages/StartPage/StartPage.module.css","pages/RecoveryPassword/RecoveryPassword.module.css","pages/SignUp/SignUp.module.css","common/LoadingLine/LoadingLine.module.css","common/commonStyles.module.css","pages/Error404/Error404.tsx","store/appReducer.ts","api/cardsAPI.ts","store/profileReducer.ts","store/logInReducer.ts","pages/LogIn/LogIn.tsx","store/setNewPasswordReducer.ts","pages/SetNewPassword/SetNewPassword.tsx","assets/icon/iconEmail.png","store/recoveryPasswordReducer.ts","pages/RecoveryPassword/RecoveryPassword.tsx","store/signUpReducer.ts","pages/SignUp/SignUp.tsx","common/LoadingLine/LoadingLine.tsx","common/ErrorSnackbar/ErrorSnackbar.tsx","pages/EditProfile/EditProfile.tsx","pages/Header/Header.tsx","pages/Profile/Profile.tsx","pages/Profile/ProfileContainer.tsx","pages/StartPage/StartPage.tsx","common/Modals/ModalQuestion/ModalQuestion.tsx","common/Modals/ModalQuestion/ModalQuestionContainer.tsx","common/Table/Table.tsx","pages/Packs/Packs.tsx","store/packsReducer.ts","pages/Packs/SortPacks/SortPacks.tsx","pages/Packs/PacksContainer.tsx","store/cardsReducer.ts","pages/Cards/Cards.tsx","pages/Cards/CardsContainer.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx","pages/Header/Haeder.module.css","common/Table/Table.module.css","pages/Profile/Profile.module.css","common/Modals/ModalQuestion/ModalQuestion.module.css"],"names":["module","exports","Error404","setLoadingStatusAC","statusRequest","type","setAppErrorAC","error","initState","status","instance","axios","create","baseURL","withCredentials","cardsAPI","email","payload","from","message","post","data","password","resetPasswordToken","delete","packsAPI","isMyPacks","_id","pageCount","page","sortPacks","_name","allMin","allMax","user_id","packName","get","name","isPrivate","cardsPack","put","trainingCardsAPI","cardsPack_id","question","answer","grade","card","avatar","publicCardPacksCount","setUserData","setUserDataAC","setIsLoggedInAC","value","buttonDisabledAC","buttonDisabled","initialState","isLoggedIn","LogIn","useSelector","state","dispatch","useDispatch","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","then","res","catch","e","response","resetForm","to","className","cs","background","blockContainer","text","FormControl","formControl","handleSubmit","form","FormGroup","TextField","variant","size","label","margin","getFieldProps","style","touched","color","FormControlLabel","control","Checkbox","checked","buttonBlock","Button","button","disabled","completed","SetNewPassword","setNewPassword","token","useParams","confirmPassword","RecoveryPassword","src","iconEmail","s","icon","navlink","SignUp","LoadingLine","app","loadingStyle","LinearProgress","Alert","props","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","EditProfile","Header","history","useHistory","headerBlock","nav","item","activeClassName","activeLink","isLoginFix","onClick","push","Profile","imgContainer","alt","onClickHandler","ProfileContainer","StartPage","ModalQuestion","onClickBackground","onClickYes","onClickNo","questionText","show","backgroundModal","modalContainer","ModalQuestionContainer","buttonName","useState","setShow","Table","table","tableHeaders","map","h","tableDate","d","firstCell","secondCell","thirdCell","forthCell","deleteHandler","updateHandler","Packs","addPackHandler","packsForTable","deletePackHandler","updatePackHandler","isMyPacksAC","switchPageCountAC","changePageAC","sortPacksAC","packNameAC","changeRangeAC","packsArray","cardPacksTotalCount","maxCardsCount","minCardsCount","pagesButtonSwitcher","fetchPacksTC","getState","packs","cardPacks","allPacksDataAC","sortPacksTC","a","SortPacks","changeRange","changeRangeTC","target","onChange","isMyPacksTC","currentTarget","Select","toString","val","Number","switchPageCountTC","MenuItem","b","changePageTC","id","packNameTC","Slider","min","max","valueLabelDisplay","PacksContainer","useEffect","p","cardsCount","updated","deletePackTC","updatePackTC","getCards","fetchCardsTC","cards","Cards","addCardHandler","cardsForTable","deleteCardHandler","updateCardCardHandler","CardsContainer","c","addCardTC","deleteCardTC","updateCardTC","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","copyState","pagesCount","Math","ceil","pagesButtonSwitcherNew","i","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.41b0ea02.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"StartPage_background__1DYp4\",\"test\":\"StartPage_test__24Dyg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navlink\":\"RecoveryPassword_navlink__2tvH4\",\"icon\":\"RecoveryPassword_icon__1RGVj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navlink\":\"SignUp_navlink__2uiPT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingStyle\":\"LoadingLine_loadingStyle__1NmIM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"commonStyles_background__2q_NM\",\"blockContainer\":\"commonStyles_blockContainer__11RPC\",\"form\":\"commonStyles_form__2TPJb\",\"text\":\"commonStyles_text__3BwWT\",\"formControl\":\"commonStyles_formControl__2OASi\",\"button\":\"commonStyles_button__GPYdo\",\"buttonBlock\":\"commonStyles_buttonBlock__1A-KK\"};","import React from 'react';\n\nfunction Error404() {\n    return (\n        <div>\n            Error404\n        </div>\n    )\n}\n\nexport default Error404","export type RequestStatusType = 'idle' | 'loading'\n//test2\nexport const setLoadingStatusAC = (statusRequest: RequestStatusType) => {\n    return {\n        type: \"APP/SET-STATUS\",\n        statusRequest\n    } as const\n}\n\nexport const setAppErrorAC = (error: null | string) => {\n    return {\n        type: \"APP/SET-ERROR\",\n        error\n    } as const\n}\n\nexport type setLoadingStatusAT = ReturnType<typeof setLoadingStatusAC>\nexport type setAppErrorAT = ReturnType<typeof setAppErrorAC>\n\nexport type actionAppType = setLoadingStatusAT | setAppErrorAT\n\nexport const initState = {\n    status: 0,\n    error: null as null | string\n\n}\n\ntype InitStateType = typeof initState\n\nexport const appReducer = (state: InitStateType = initState, action: actionAppType): InitStateType => {\n    switch (action.type) {\n        case \"APP/SET-STATUS\": {\n            let copyState = {...state};\n            if (action.statusRequest === 'loading') {\n                copyState.status++\n            } else {\n                copyState.status--\n            }\n            return copyState\n        }\n        case 'APP/SET-ERROR':\n            return {...state, error: action.error}\n        default: {\n            return state\n        }\n    }\n}","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\n    // baseURL: \"http://localhost:7542/2.0/\",\n    withCredentials: true,\n})\n\nexport const cardsAPI = {\n    forgotPassword(email: string) {\n        const payload = {\n            email,\n            from: `test-front-admin <romanxeo@gmail.com>`,\n            message: `<div style=\"background-color: #a3c486; padding: 10px\">\n                        password recovery link: \n                        <a href='http://localhost:3000/#/SetNewPassword/$token$'>\n                        link local</a>\n                        <a href='https://romanxeo.github.io/cardsapp/#/SetNewPassword/$token$'>\n                        link gh-pages</a></div>`\n        }\n        const promise = instance.post<any>('auth/forgot', payload);\n        return promise;\n    },\n\n    login(data: LoginParamsType) {\n        return instance.post<UserDataType>(`/auth/login`, data)\n    },\n\n    setNewPassword(password: string, resetPasswordToken: string) {\n        const payload = {\n            password,\n            resetPasswordToken\n        }\n        const promise = instance.post<any>('auth/set-new-password', payload);\n        return promise;\n    },\n\n    register(email: string, password: string) {\n        const payload = {\n            email,\n            password\n        }\n        const promise = instance.post<any>('auth/register', payload);\n        return promise;\n    },\n    me() {\n        return instance.post <UserDataType>(`auth/me`)\n    },\n    logOut() {\n        return instance.delete<any>('auth/me')\n    }\n}\n\nexport const packsAPI = {\n    getPacks(isMyPacks: boolean,\n             _id: string,\n             pageCount: number,\n             page: number,\n             sortPacks: 0 | 'update',\n             _name: string,\n             allMin: number,\n             allMax: number) {\n        //debugger\n        let user_id = ''\n        if (isMyPacks) {\n            user_id = `&user_id=${_id}`\n        }\n        let packName = ''\n        if (_name) {\n            packName = `&packName=${_name}`\n        }\n\n        return instance.get<PacksResponseType>(`cards/pack?pageCount=${pageCount}&page=${page}&sortPacks=${sortPacks}&min=${allMin}&max=${allMax}`+user_id+packName)\n\n    },\n    addPack(name: string, isPrivate: boolean) {\n        const payload = {\n            cardsPack: {\n                name, isPrivate\n            }\n        }\n        return instance.post<PackType>('cards/pack', payload)\n    },\n    deletePack(_id: string) {\n        return instance.delete<PackType>(`cards/pack?id=${_id}`)\n    },\n    updatePack(_id: string, name: string) {\n        const payload = {\n            cardsPack: {name, _id}\n        }\n        return instance.put<PackType>(`cards/pack`, payload)\n    }\n}\n\nexport const trainingCardsAPI = {\n    getCards(cardsPack_id: string) {\n        return instance.get<CardsResponseType>(`cards/card?cardsPack_id=${cardsPack_id}`)\n    },\n    addCard(cardsPack_id: string, question: string, answer: string, grade: number) {\n        const payload = {\n            card: {cardsPack_id, question, answer, grade},\n        }\n        return instance.post<CardType>(`cards/card`, payload)\n    },\n    deleteCard(_id: string) {\n        return instance.delete<CardType>(`cards/card?id=${_id}`)\n    },\n    updateCard(_id: string, question: string, answer: string, grade: number) {\n        const payload = {\n            card: {_id, question, answer, grade},\n        }\n        return instance.put<CardType>(`cards/card`, payload)\n    }\n\n}\n\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\nexport type UserDataType = {\n    _id: string\n    email: string\n    name: string\n    rememberMe?: boolean\n    avatar?: string\n    publicCardPacksCount: number\n}\nexport type PackType = {\n    _id: string\n    name: string\n    user_id: string\n    user_name: string\n    private: boolean\n    created: string\n    updated: string\n    cardsCount: number\n}\nexport type PacksResponseType = {\n    cardPacks: Array<PackType>\n    cardPacksTotalCount: number // количество колод\n    maxCardsCount: number\n    minCardsCount: number\n    page: number// выбранная страница\n    pageCount: number // количество элементов на странице\n}\nexport type CardType = {\n    answer: string\n    cardsPack_id: string\n    created: string\n    grade: number\n    question: string\n    rating: number\n    shots: number\n    type: string\n    updated: string\n    user_id: string\n    _id: string\n}\nexport type CardsResponseType = {\n    cards: CardType[]\n    cardsTotalCount: number\n    maxGrade: number\n    minGrade: number\n    packUserId: string\n    page: number\n    pageCount: number\n}","import {Dispatch} from 'redux'\nimport {cardsAPI} from \"../api/cardsAPI\";\nimport {setAppErrorAC, setAppErrorAT, setLoadingStatusAC, setLoadingStatusAT} from \"./appReducer\";\n\n\nexport type SetUserDataACType = ReturnType<typeof setUserDataAC>\n\nexport type ActionProfileType = SetUserDataACType | setLoadingStatusAT | setAppErrorAT\ntype ThunkDispatch = Dispatch<ActionProfileType>\n\nexport const initState = {\n    name: \"\",\n    avatar: \"\",\n    _id: \"\",\n    publicCardPacksCount: 0,\n}\n\ntype InitStateType = typeof initState\n\nexport const setUserData = \"profile/SET-USER-DATA\"\n\nexport const ProfileReducer = (state: InitStateType = initState, action: ActionProfileType): InitStateType => {\n    switch (action.type) {\n        case setUserData: {\n            return {\n                ...state,\n                name: action.name,\n                avatar: action.avatar,\n                _id: action._id,\n                publicCardPacksCount: action.publicCardPacksCount\n            }\n        }\n        default: {\n            return state\n        }\n    }\n}\n\nexport const setUserDataAC = (name: string, avatar: string, _id: string, publicCardPacksCount: number) => ({\n    type: setUserData, name, avatar, _id, publicCardPacksCount\n} as const)\n\n\n// thunks\nexport const setUserDataTC = () => {\n    return (dispatch: ThunkDispatch) => {\n        dispatch(setLoadingStatusAC('loading'))\n        cardsAPI.me()\n            .then((res) => {\n                dispatch(setUserDataAC(res.data.name, res.data.avatar ? res.data.avatar : \"\", res.data._id,\n                    res.data.publicCardPacksCount))\n                dispatch(setLoadingStatusAC('idle'))\n            })\n            .catch((e) => {\n                dispatch(setLoadingStatusAC('idle'))\n                const error = e.response ? e.response.data.error : e.message\n                dispatch(setAppErrorAC(error))\n            })\n    }\n\n}","import {setLoadingStatusAC, setAppErrorAC, setLoadingStatusAT, setAppErrorAT} from './appReducer'\nimport {LoginParamsType, cardsAPI} from \"../api/cardsAPI\";\nimport {setUserDataAC, SetUserDataACType} from \"./profileReducer\";\nimport {Dispatch} from 'redux';\n\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'LOGIN/SET-IS-LOGGED-IN', value} as const)\n\nconst buttonDisabledAC = (buttonDisabled: boolean) => {\n    return {\n        type: \"LOGIN/BUTTON-DISABLED\",\n        buttonDisabled\n    } as const\n}\n\nexport type setIsLoggedInAT = ReturnType<typeof setIsLoggedInAC>\nexport type buttonDisabledAT = ReturnType<typeof buttonDisabledAC>\n\n// types\ntype actionLogInType = setIsLoggedInAT\n    | buttonDisabledAT\n    | setLoadingStatusAT\n    | SetUserDataACType\n    | setAppErrorAT\n\nconst initialState = {\n    isLoggedIn: false,\n    buttonDisabled: false\n}\n\ntype InitialStateType = typeof initialState\n\nexport const LogInReducer = (state: InitialStateType = initialState, action: actionLogInType): InitialStateType => {\n    switch (action.type) {\n        case 'LOGIN/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        case \"LOGIN/BUTTON-DISABLED\": {\n            return {...state, buttonDisabled: action.buttonDisabled}\n        }\n        default:\n            return state\n    }\n}\n\n\n// thunks\n/*export const loginTwTC = (data: LoginParamsType) => (dispatch: any) => {\n    dispatch(setLoadingStatusAC('loading'))\n    cardsAPI.login(data)\n        .then((res) => {\n            dispatch(setIsLoggedInAC(true))\n            dispatch(setLoadingStatusAC('idle'))\n            dispatch(setUserDataAC(res.data.name, res.data.avatar ? res.data.avatar : \"\", res.data._id,\n                res.data.publicCardPacksCount))\n        })\n        .catch(e => {\n            //dispatch(setAppErrorAC('dfdgfd'))\n            const error = e.response ? e.response.data.error : e.message\n            dispatch(setAppErrorAC(error))\n            dispatch(setLoadingStatusAC('idle'))\n        })\n}*/\n\n//thunk\nexport const loginTC = (data: LoginParamsType) => {\n    return (dispatch: any) => {\n        dispatch(buttonDisabledAC(true))\n        dispatch(setLoadingStatusAC('loading'))\n        cardsAPI.login(data)\n            .then(res => {\n                dispatch(setIsLoggedInAC(true))\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n                dispatch(setUserDataAC(res.data.name, res.data.avatar ? res.data.avatar : \"\", res.data._id,\n                    res.data.publicCardPacksCount))\n            })\n            .catch(e => {\n                const error = e.response ? e.response.data.error : \"some unknown error\"\n                dispatch(setAppErrorAC(error))\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n            })\n    }\n}\n\nexport const logoutTC = () => (dispatch: Dispatch<actionLogInType>) => {\n    dispatch(setLoadingStatusAC('loading'))\n    cardsAPI.logOut()\n        .then((res) => {\n            dispatch(setIsLoggedInAC(false))\n            dispatch(setLoadingStatusAC('idle'))\n            dispatch(setUserDataAC(\"\", \"\", \"\", 0))\n        })\n        .catch(e => {\n            dispatch(setLoadingStatusAC('idle'))\n            //dispatch(setAppErrorAC(\"some error\"))\n            const error = e.response ? e.response.data.error : e.message\n            dispatch(setAppErrorAC(error))\n        })\n\n}\n\n","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"../../store/logInReducer\";\nimport {AppRootStateType} from \"../../store/store\";\nimport {NavLink, Redirect} from 'react-router-dom';\nimport cs from \"../../common/commonStyles.module.css\";\nimport s from \"../RecoveryPassword/RecoveryPassword.module.css\";\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const LogIn = () => {\n\n    let buttonDisabled = useSelector<AppRootStateType, boolean>(state => state.LogIn.buttonDisabled)\n    const isLoggedIn = useSelector<AppRootStateType, boolean> (state => state.LogIn.isLoggedIn)\n\n    const dispatch = useDispatch();\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Поле пароль обязательно';\n            } else if (values.password.length < 3) {\n                errors.password = 'Длина пароля должна быть больше 3 символов';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n            formik.resetForm();\n        },\n    });\n\n\n    if (isLoggedIn) {\n        return (\n            <Redirect to={'/profile'}/>\n        )\n    }\n/*\n\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <FormControl>\n                <FormLabel>\n                    <p>To log in get registered\n                        <a href={'https://social-network.samuraijs.com/'}\n                           target={'_blank'}> here\n                        </a>\n                    </p>\n                    <p>or use common test account credentials:</p>\n                    <p>Email: free@samuraijs.com</p>\n                    <p>Password: free</p>\n                </FormLabel>\n                <form onSubmit={formik.handleSubmit}>\n                    <FormGroup>\n                        <TextField label=\"Email\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps('email')}\n                        />\n\n                        {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\n\n\n                        <TextField type=\"password\"\n                                   label=\"Password\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps('password')}\n                        />\n                        {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\n\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox/>}\n                            {...formik.getFieldProps('rememberMe')}\n                            checked={formik.values.rememberMe}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </form>\n            </FormControl>\n        </Grid>\n    </Grid>\n*/\n\n    return (\n        <div className={cs.background}>\n            <div className={cs.blockContainer}>\n                <h2 className={cs.text}>IT Incubator</h2>\n                <h3 className={cs.text}>Log In</h3>\n                <FormControl className={cs.formControl}>\n                    <form onSubmit={formik.handleSubmit} className={cs.form}>\n                        <FormGroup>\n                            <TextField\n                                variant={\"outlined\"}\n                                size={'small'}\n                                label='E-mail'\n                                margin=\"normal\"\n                                {...formik.getFieldProps('email')}\n                            />\n\n                            <div style={{'height': '20px'}}>\n                                {formik.touched.email && formik.errors.email &&\n                                <div style={{color: 'red'}}>{formik.errors.email}</div>}\n                            </div>\n\n\n                            <TextField\n                                variant={\"outlined\"}\n                                type=\"password\"\n                                size={'small'}\n                                label='Password'\n                                margin=\"normal\"\n                                {...formik.getFieldProps('password')}\n                            />\n\n                            <div style={{'height': '20px'}}>\n                                {formik.touched.password && formik.errors.password &&\n                                <div style={{color: 'red'}}>{formik.errors.password}</div>}\n                            </div>\n\n                            <FormControlLabel\n                                label={'Remember me'}\n                                control={<Checkbox/>}\n                                {...formik.getFieldProps('rememberMe')}\n                                checked={formik.values.rememberMe}\n                            />\n\n                            <div className={cs.buttonBlock}>\n                                <Button\n                                    className={cs.button}\n                                    type={'submit'}\n                                    variant={'contained'}\n                                    color={'primary'}\n                                    size={'small'}\n                                    disabled={buttonDisabled}\n                                >\n                                    Login\n                                </Button>\n                            </div>\n\n                        </FormGroup>\n                    </form>\n                </FormControl>\n            </div>\n        </div>\n    )\n}\n\n\n\n","import {cardsAPI} from \"../api/cardsAPI\";\nimport {setAppErrorAC, setLoadingStatusAC} from \"./appReducer\";\n\nconst buttonDisabledAC = (buttonDisabled: boolean) => {\n    return {\n        type: \"SET-NEW-PASSWORD/BUTTON-DISABLED\",\n        buttonDisabled\n    } as const\n}\n\nconst completedRequestAC = (completed: boolean) => {\n    return {\n        type: \"SET-NEW-PASSWORD/COMPLETED-REQUEST\",\n        completed\n    } as const\n}\n\nexport type buttonDisabledAT = ReturnType<typeof buttonDisabledAC>\nexport type completedRequestAT = ReturnType<typeof completedRequestAC>\n\nexport type actionSetNewPasswordType =\n    buttonDisabledAT | completedRequestAT\n\nexport const initState = {\n    completed: false,\n    buttonDisabled: false\n}\n\ntype InitStateType = typeof initState\n\nexport const setNewPasswordReducer = (state: InitStateType = initState, action: actionSetNewPasswordType): InitStateType => {\n    switch (action.type) {\n        case \"SET-NEW-PASSWORD/BUTTON-DISABLED\": {\n            return {...state, buttonDisabled: action.buttonDisabled}\n        }\n        case \"SET-NEW-PASSWORD/COMPLETED-REQUEST\": {\n            return {...state, completed: action.completed}\n        }\n        default: {\n            return state\n        }\n    }\n}\n\n\n//thunk\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => {\n    return (dispatch: any) => {\n        dispatch(buttonDisabledAC(true))\n        dispatch(setLoadingStatusAC('loading'))\n        cardsAPI.setNewPassword(password, resetPasswordToken)\n            .then(res => {\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n                dispatch(completedRequestAC(true))\n            })\n            .catch(e => {\n                //console.log(err)\n                const error = e.response ? e.response.data.error : \"some unknown error\"\n                dispatch(setAppErrorAC(error))\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n            })\n    }\n}\n","import React from 'react';\n//import s from './RecoveryPassword.module.css';\nimport cs from '../../common/commonStyles.module.css'\nimport {useFormik} from \"formik\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Redirect, useParams} from 'react-router-dom';\nimport {setNewPasswordTC} from \"../../store/setNewPasswordReducer\";\nimport {AppRootStateType} from \"../../store/store\";\n\n\ntype FormikErrorType = {\n    password?: string\n    confirmPassword?: string\n}\n\nconst SetNewPassword = () => {\n\n    let completed = useSelector<AppRootStateType, boolean>(state => state.setNewPassword.completed)\n    let buttonDisabled = useSelector<AppRootStateType, boolean>(state => state.setNewPassword.buttonDisabled)\n    const {token} = useParams<{ token: string }>()\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            password: '',\n            confirmPassword: ''\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.password) {\n                errors.password = 'ПУСТО';\n            } else if (values.password.length < 4) {\n                errors.password = 'БОЛЬШЕ ТРЕХ СИМВОЛОВ ДОЛЖНО БЫТЬ';\n            }\n\n            if (values.password !== values.confirmPassword) {\n                errors.confirmPassword = 'ПАРОЛИ НЕ СОВПАДАЮТ'\n            }\n            return errors;\n        },\n        onSubmit: (values) => {\n            dispatch(setNewPasswordTC(values.password, token))\n        }\n    })\n\n    if (completed) {\n        return (\n            <Redirect to={'/login'}/>\n        )\n    }\n\n    return (\n        <div className={cs.background}>\n            <div className={cs.blockContainer}>\n                <h2 className={cs.text}>It-incubator</h2>\n                <h3 className={cs.text}>Create new password</h3>\n                <FormControl className={cs.formControl}>\n                    <form onSubmit={formik.handleSubmit} className={cs.form}>\n                        <FormGroup>\n                            <TextField\n                                variant={\"outlined\"}\n                                size={'small'}\n                                label='password'\n                                margin=\"normal\"\n                                type=\"password\"\n                                {...formik.getFieldProps('password')}\n                            />\n\n                            <div style={{'height': '20px'}}>\n                                {formik.touched.password && formik.errors.password &&\n                                <div style={{color: 'red'}}>{formik.errors.password}</div>}\n                            </div>\n\n                            <TextField\n                                variant={\"outlined\"}\n                                size={'small'}\n                                label='confirmPassword'\n                                margin=\"normal\"\n                                type=\"password\"\n                                {...formik.getFieldProps('confirmPassword')}\n                            />\n\n                            <div style={{'height': '20px'}}>\n                                {formik.touched.confirmPassword && formik.errors.confirmPassword &&\n                                <div style={{color: 'red'}}>{formik.errors.confirmPassword}</div>}\n                            </div>\n\n                            <p>Create new password and we will send you further instructions to E-mail</p>\n\n                            <div className={cs.buttonBlock}>\n                                <Button\n                                    className={cs.button}\n                                    type={'submit'}\n                                    variant={'contained'}\n                                    color={'primary'}\n                                    size={'small'}\n                                    disabled={buttonDisabled}\n                                >\n                                    Create new password\n                                </Button>\n                            </div>\n\n                        </FormGroup>\n                    </form>\n                </FormControl>\n            </div>\n        </div>\n    )\n}\n\nexport default SetNewPassword","export default __webpack_public_path__ + \"static/media/iconEmail.f254994b.png\";","import {cardsAPI} from \"../api/cardsAPI\";\nimport {setAppErrorAC, setLoadingStatusAC} from \"./appReducer\";\n\nconst buttonDisabledAC = (buttonDisabled: boolean) => {\n    return {\n        type: \"RECOVERY-PASSWORD/BUTTON-DISABLED\",\n        buttonDisabled\n    } as const\n}\n\nconst completedRequestAC = (completed: boolean) => {\n    return {\n        type: \"RECOVERY-PASSWORD/COMPLETED-REQUEST\",\n        completed\n    } as const\n}\n\nexport type buttonDisabledAT = ReturnType<typeof buttonDisabledAC>\nexport type completedRequestAT = ReturnType<typeof completedRequestAC>\n\nexport type actionRecoveryPasswordType =\n    buttonDisabledAT | completedRequestAT\n\nexport const initState = {\n    completed: false,\n    buttonDisabled: false\n}\n\ntype InitStateType = typeof initState\n\nexport const RecoveryPasswordReducer = (state: InitStateType = initState, action: actionRecoveryPasswordType): InitStateType => {\n    switch (action.type) {\n        case \"RECOVERY-PASSWORD/BUTTON-DISABLED\": {\n            return {...state, buttonDisabled: action.buttonDisabled}\n        }\n        case \"RECOVERY-PASSWORD/COMPLETED-REQUEST\": {\n            return {...state, completed: action.completed}\n        }\n        default: {\n            return state\n        }\n    }\n}\n\n\n\n//thunk\nexport const forgotPasswordTC = (email: string) => {\n    return (dispatch: any) => {\n        dispatch(buttonDisabledAC(true))\n        dispatch(setLoadingStatusAC('loading'))\n        cardsAPI.forgotPassword(email)\n            .then(res => {\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n                dispatch(completedRequestAC(true))\n            })\n            .catch(e => {\n                const error = e.response ? e.response.data.error : \"some unknown error\"\n                dispatch(setAppErrorAC(error))\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n            })\n    }\n}","import React from 'react';\nimport s from './RecoveryPassword.module.css';\nimport cs from '../../common/commonStyles.module.css'\nimport {useFormik} from \"formik\";\nimport iconEmail from '../../assets/icon/iconEmail.png'\nimport TextField  from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport FormControl from \"@mui/material/FormControl\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport { NavLink } from 'react-router-dom';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../store/store\";\nimport {forgotPasswordTC} from '../../store/recoveryPasswordReducer';\n\n\ntype FormikErrorType = {\n    email?: string\n}\n\nfunction RecoveryPassword() {\n    let completed = useSelector<AppRootStateType, boolean>(state => state.RecoveryPassword.completed)\n    let buttonDisabled = useSelector<AppRootStateType, boolean>(state => state.RecoveryPassword.buttonDisabled)\n\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(forgotPasswordTC(values.email))\n            formik.resetForm()\n        },\n    })\n\n\n    if (completed) {\n        return (\n            <div className={cs.background}>\n                <div className={cs.blockContainer}>\n                    <div className={cs.form}>\n                        <h2 className={cs.text}>It-incubator</h2>\n                        <img src={iconEmail} className={s.icon}/>\n                        <h3 className={cs.text}>Check E-mail</h3>\n                        <p className={cs.text}>We have sent instructions to your E-mail how to recover your password</p>\n                    </div>\n\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className={cs.background}>\n                <div className={cs.blockContainer}>\n                    <h2 className={cs.text}>IT Incubator</h2>\n                    <h3 className={cs.text}>Forgot your password?</h3>\n                    <FormControl className={cs.formControl}>\n                        <form onSubmit={formik.handleSubmit} className={cs.form}>\n                            <FormGroup>\n                                <TextField\n                                    variant={\"outlined\"}\n                                    size={'small'}\n                                    label='E-mail'\n                                    margin=\"normal\"\n                                    {...formik.getFieldProps('email')}\n                                />\n\n                                <div style={{'height': '20px'}}>\n                                    {formik.touched.email && formik.errors.email &&\n                                    <div style={{color: 'red'}}>{formik.errors.email}</div>}\n                                </div>\n\n                                <p>Enter your e-mail address and we will send you further instructions</p>\n\n                                <div className={cs.buttonBlock}>\n                                    <Button\n                                        className={cs.button}\n                                        type={'submit'}\n                                        variant={'contained'}\n                                        color={'primary'}\n                                        size={'small'}\n                                        disabled={buttonDisabled}\n                                    >\n                                        Send instructions\n                                    </Button>\n                                </div>\n\n                                <p>Did you remember your password?</p>\n\n                                <div className={cs.buttonBlock}>\n                                    <nav>\n                                        <NavLink\n                                            className={s.navlink}\n                                            to=\"/login\"\n                                        >\n                                            Try logging in\n                                        </NavLink>\n                                    </nav>\n                                </div>\n                            </FormGroup>\n                        </form>\n                    </FormControl>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default RecoveryPassword","import {cardsAPI} from \"../api/cardsAPI\";\nimport {setAppErrorAC, setLoadingStatusAC} from \"./appReducer\";\n\nconst buttonDisabledAC = (buttonDisabled: boolean) => {\n    return {\n        type: \"SIGN-UP/BUTTON-DISABLED\",\n        buttonDisabled\n    } as const\n}\n\nconst completedRequestAC = (completed: boolean) => {\n    return {\n        type: \"SIGN-UP/COMPLETED-REQUEST\",\n        completed\n    } as const\n}\n\nexport type buttonDisabledAT = ReturnType<typeof buttonDisabledAC>\nexport type completedRequestAT = ReturnType<typeof completedRequestAC>\n\nexport type actionSignUpType =\n    buttonDisabledAT | completedRequestAT\n\nexport const initState = {\n    completed: false,\n    buttonDisabled: false\n}\n\ntype InitStateType = typeof initState\n\nexport const SignUpReducer = (state: InitStateType = initState, action: actionSignUpType): InitStateType => {\n    switch (action.type) {\n        case \"SIGN-UP/BUTTON-DISABLED\": {\n            return {...state, buttonDisabled: action.buttonDisabled}\n        }\n        case \"SIGN-UP/COMPLETED-REQUEST\": {\n            return {...state, completed: action.completed}\n        }\n        default: {\n            return state\n        }\n    }\n}\n\n//thunk\nexport const registerTC = (email: string, password: string) => {\n    return (dispatch: any) => {\n        dispatch(buttonDisabledAC(true))\n        dispatch(setLoadingStatusAC('loading'))\n        cardsAPI.register(email, password)\n            .then(res => {\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n                dispatch(completedRequestAC(true))\n            })\n            .catch(e => {\n                const error = e.response ? e.response.data.error : \"some unknown error\"\n                dispatch(setAppErrorAC(error))\n                //dispatch(setAppErrorAC('unknown error'))\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n            })\n    }\n}","import React from 'react';\nimport s from './SignUp.module.css';\nimport cs from '../../common/commonStyles.module.css'\nimport {useFormik} from \"formik\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {NavLink, Redirect} from 'react-router-dom';\nimport {registerTC} from \"../../store/signUpReducer\";\nimport {AppRootStateType} from \"../../store/store\";\n\ntype FormikErrorType = {\n    email?: string,\n    password?: string,\n    confirmPassword?: string\n}\n\nconst SignUp = () => {\n\n    let completed = useSelector<AppRootStateType, boolean>(state => state.SignUp.completed)\n    let buttonDisabled = useSelector<AppRootStateType, boolean>(state => state.SignUp.buttonDisabled)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            confirmPassword: ''\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n\n            if (!values.password) {\n                errors.password = 'ПУСТО';\n            } else if (values.password.length < 4) {\n                errors.password = 'БОЛЬШЕ ТРЕХ СИМВОЛОВ ДОЛЖНО БЫТЬ';\n            }\n\n            if (values.password !== values.confirmPassword) {\n                errors.confirmPassword = 'ПАРОЛИ НЕ СОВПАДАЮТ'\n            }\n            return errors;\n        },\n        onSubmit: (values) => {\n            dispatch(registerTC(values.email, values.password))\n        }\n    })\n\n    if (completed) {\n        return (\n            <Redirect to={'/login'}/>\n        )\n    }\n\n    return (\n        <div className={cs.background}>\n            <div className={cs.blockContainer}>\n                <h2 className={cs.text}>IT Incubator</h2>\n                <h3 className={cs.text}>Sign Up</h3>\n                <FormControl className={cs.formControl}>\n                    <form onSubmit={formik.handleSubmit} className={cs.form}>\n                        <FormGroup>\n                            <TextField\n                                variant={\"outlined\"}\n                                size={'small'}\n                                label='email'\n                                margin=\"normal\"\n                                {...formik.getFieldProps('email')}\n                            />\n\n                            <div style={{'height': '20px'}}>\n                                {formik.touched.email && formik.errors.email &&\n                                <div style={{color: 'red'}}>{formik.errors.email}</div>}\n                            </div>\n\n                            <TextField\n                                variant={\"outlined\"}\n                                size={'small'}\n                                label='password'\n                                margin=\"normal\"\n                                type=\"password\"\n                                {...formik.getFieldProps('password')}\n                            />\n\n                            <div style={{'height': '20px'}}>\n                                {formik.touched.password && formik.errors.password &&\n                                <div style={{color: 'red'}}>{formik.errors.password}</div>}\n                            </div>\n\n                            <TextField\n                                variant={\"outlined\"}\n                                size={'small'}\n                                label='confirmPassword'\n                                margin=\"normal\"\n                                type=\"password\"\n                                {...formik.getFieldProps('confirmPassword')}\n                            />\n\n                            <div style={{'height': '20px'}}>\n                                {formik.touched.confirmPassword && formik.errors.confirmPassword &&\n                                <div style={{color: 'red'}}>{formik.errors.confirmPassword}</div>}\n                            </div>\n\n                            <div className={cs.buttonBlock}>\n                                <Button\n                                    className={cs.button}\n                                    type={'submit'}\n                                    variant={'contained'}\n                                    color={'primary'}\n                                    size={'small'}\n                                    disabled={buttonDisabled}\n                                >\n                                    Register\n                                </Button>\n\n\n                            </div>\n\n                            <div className={cs.buttonBlock}>\n                                <nav>\n                                    <NavLink\n                                        className={s.navlink}\n                                        to=\"/login\"\n                                    >\n                                        Login\n                                    </NavLink>\n                                </nav>\n                            </div>\n\n                        </FormGroup>\n                    </form>\n                </FormControl>\n            </div>\n        </div>\n    )\n}\n\nexport default SignUp","import React from 'react'\nimport s from './LoadingLine.module.css'\nimport LinearProgress from '@mui/material/LinearProgress'\nimport { useSelector } from 'react-redux'\nimport { AppRootStateType } from '../../store/store'\n\nconst LoadingLine = () => {\n\n    let status = useSelector<AppRootStateType, number>(state => state.app.status)\n\n    return (\n        <div className={s.loadingStyle}>\n            {status !== 0 && <LinearProgress color={\"secondary\"}/>}\n        </div>\n    )\n}\n\nexport default LoadingLine","import React from 'react'\nimport {AppRootStateType} from \"../../store/store\";\nimport {setAppErrorAC} from \"../../store/appReducer\";\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from \"react-redux\";\n\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n\n    let error = useSelector<AppRootStateType, null | string>(state => state.app.error)\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        dispatch(setAppErrorAC(null))\n    }\n\n    return (\n        <Snackbar\n            open={error !== null}\n            autoHideDuration={6000}\n            onClose={handleClose}\n        >\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n}\n","import React from \"react\";\n\nfunction EditProfile() {\n    return (\n        <div>\n            Edit profile\n        </div>\n    )\n}\nexport default EditProfile","import React from \"react\";\nimport {NavLink, useHistory} from \"react-router-dom\";\nimport s from './Haeder.module.css'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../store/store\";\nimport Button from \"@material-ui/core/Button\";\nimport {logoutTC, setIsLoggedInAC} from \"../../store/logInReducer\";\n\n\nfunction Header() {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.LogIn.isLoggedIn)\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n\n    const onClickHandler = () => {\n        dispatch(logoutTC())\n        dispatch(setIsLoggedInAC(false))\n        history.push('/login');\n\n    }\n\n    return (\n        <div>\n            <div className={s.headerBlock}>\n\n                <nav className={s.nav}>\n                    {!isLoggedIn && <div className={s.item}>\n                        <NavLink to={'/login'} activeClassName={s.activeLink}>Login</NavLink>\n                    </div>}\n                    {!isLoggedIn && <div className={s.item}>\n                        <NavLink to={'/SignUp'} activeClassName={s.activeLink}>SignUp</NavLink>\n                    </div>}\n                    {!isLoggedIn && <div className={s.item}>\n                        <NavLink to={'/RecoveryPassword'} activeClassName={s.activeLink}>Recovery password</NavLink>\n                    </div>}\n                    {isLoggedIn && <div className={s.item + ' ' + s.isLoginFix}>\n                        <NavLink to={'/Profile'} activeClassName={s.activeLink}>Profile</NavLink>\n                    </div>}\n                    {isLoggedIn && <div className={s.item + ' ' + s.isLoginFix}>\n                        <NavLink to={'/Packs'} activeClassName={s.activeLink}>Packs</NavLink>\n                    </div>}\n                    {isLoggedIn && <div className={s.item}>\n                        {/*<button onClick={onClickHandler}>Log out</button>*/}\n                        {/*<NavLink to={'/Packs'} activeClassName={s.activeLink}>Packs</NavLink>*/}\n                        <Button variant={'contained'}\n                                color={\"primary\"}\n                                size={\"small\"}\n                                onClick={onClickHandler}\n                        >Log out</Button>\n                    </div>}\n\n\n                </nav>\n            </div>\n\n        </div>\n\n    )\n}\n\nexport default Header;","import React from 'react';\nimport s from \"./Profile.module.css\"\nimport cs from \"../../common/commonStyles.module.css\";\nimport Button from '@material-ui/core/Button';\nimport ModalQuestionContainer from \"../../common/Modals/ModalQuestion/ModalQuestionContainer\";\n\ntype ProfilePropsType = {\n    name: string\n    avatar?: string\n    publicCardPacksCount: number\n    onClickHandler: () => void\n}\n\nfunction Profile(props: ProfilePropsType) {\n\n\n\n    return (\n        <div className={cs.background}>\n            <div className={s.blockContainer}>\n                <div className={s.imgContainer}><img src={props.avatar} alt={props.name}/></div>\n                <div className={s.text}>{props.name}</div>\n                <div className={s.text}>{`You have ${props.publicCardPacksCount} public packs`}</div>\n                <div className={s.button}>\n                    <Button\n                        variant={'contained'}\n                        color={\"primary\"}\n                        size={\"small\"}\n                        onClick={props.onClickHandler}>\n                        Edit profile\n                    </Button>\n\n\n\n                </div>\n\n            </div>\n\n\n        </div>\n    )\n\n}\n\nexport default Profile","import React from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../store/store\";\nimport {setUserDataTC} from \"../../store/profileReducer\";\nimport {Redirect, useHistory} from \"react-router-dom\";\nimport {setIsLoggedInAC} from \"../../store/logInReducer\";\nimport Profile from \"./Profile\";\n\nfunction ProfileContainer() {\n    const dispatch = useDispatch()\n    const _id = useSelector<AppRootStateType, string>(state => state.Profile._id)\n    const name = useSelector<AppRootStateType, string>(state => state.Profile.name);\n    const avatar = useSelector<AppRootStateType, string>(state => state.Profile.avatar);\n    const publicCardPacksCount = useSelector<AppRootStateType, number>(state => state.Profile.publicCardPacksCount);\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.LogIn.isLoggedIn);\n    const history = useHistory();\n\n    const onClickHandler = () => {\n        history.push('/EditProfile');\n    }\n\n    if (!isLoggedIn) {\n        dispatch(setUserDataTC());\n        if (!_id) {\n            return <Redirect to={\"/login\"}/>\n        } else {\n            dispatch(setIsLoggedInAC(true))\n        }\n\n    }\n    return <Profile name={name}\n                    avatar={avatar}\n                    publicCardPacksCount={publicCardPacksCount}\n                    onClickHandler={onClickHandler}/>\n\n\n}\n\nexport default ProfileContainer","import React from 'react';\nimport s from './StartPage.module.css'\n\n\nfunction StartPage() {\n\n    return (\n        <div className={s.background}>\n            <h1 className={s.test}>Hi! We glad to see you! </h1>\n            <h2 className={s.test}> This is application for learning with cards. </h2>\n        </div>\n    )\n\n}\n\nexport default StartPage;","import React from 'react';\nimport s from \"./ModalQuestion.module.css\"\nimport Button from \"@material-ui/core/Button\";\n\ntype PropsType = {\n    onClickBackground: () => void\n    onClickYes: () => void\n    onClickNo: () => void\n    questionText: string\n    show: boolean\n\n}\n\n\nconst ModalQuestion: React.FC<PropsType> = (\n    {\n        onClickBackground,\n        onClickYes,\n        onClickNo,\n        questionText,\n        show,\n\n    }\n) => {\n    if (!show) {\n        return null\n    }\n\n    return (\n        <>\n\n            <div className={s.backgroundModal} onClick={onClickBackground}></div>\n            <div className={s.modalContainer}>\n                <span>{questionText}</span>\n                <div>\n                    <Button\n                        className={s.button}\n                        variant={'contained'}\n                        color={\"primary\"}\n                        size={\"small\"}\n                        onClick={onClickYes}>\n                        Yes\n                    </Button>\n                    <Button\n                        className={s.button}\n                        variant={'contained'}\n                        color={\"primary\"}\n                        size={\"small\"}\n                        onClick={onClickNo}>\n                        No\n                    </Button>\n                </div>\n\n            </div>\n\n        </>\n    )\n\n}\n\nexport default ModalQuestion;","import React, {useState} from \"react\";\nimport ModalQuestion from \"./ModalQuestion\";\nimport Button from \"@material-ui/core/Button\";\n\ntype PropsType = {\n    questionText: string\n    onClickHandler: (answer: boolean) => void\n    buttonName: string\n}\n\nconst ModalQuestionContainer: React.FC<PropsType> = (\n    {\n        questionText,\n        buttonName,\n        onClickHandler,\n    }\n) => {\n    const [show, setShow] = useState(false);\n\n    const onClickYes = () => {\n        setShow(false);\n        onClickHandler(true)\n    }\n    const onClickNo = () => {\n        setShow(false);\n    }\n    const onClickBackground = () => {\n        setShow(false)\n    }\n\n    return (\n        <>\n            <Button\n                variant={'outlined'}\n                color={\"primary\"}\n                size={\"small\"}\n                onClick={() => setShow(true)}>\n                {buttonName}\n            </Button>\n            <ModalQuestion onClickBackground={onClickBackground}\n                           onClickYes={onClickYes}\n                           onClickNo={onClickNo}\n                           questionText={questionText}\n                           show={show}\n            />\n\n        </>\n\n    )\n}\n\nexport default ModalQuestionContainer;\n","import React from 'react';\nimport s from './Table.module.css'\nimport Button from \"@material-ui/core/Button\";\nimport {NavLink} from 'react-router-dom';\nimport ModalQuestionContainer from \"../Modals/ModalQuestion/ModalQuestionContainer\";\n\ntype PropsType = {\n    tableHeaders: Array<string>\n    tableDate: Array<any>\n    deleteHandler: (_id: string) => void\n    updateHandler: (_id: string) => void\n    questionText: string\n}\n\nfunction Table(props: PropsType) {\n\n    return (\n        <table className={s.table}>\n            <thead className={s.table}>\n            <tr className={s.table}>\n                {props.tableHeaders.map((h) => {\n                    return <td className={s.table}>{h}</td>\n                })}\n            </tr>\n            </thead>\n            <tbody className={s.table}>\n\n            {props.tableDate.map((d) => {\n                    const onClickHandler = (answer: boolean) => {\n                        answer && props.deleteHandler(d._id)\n                    }\n                    return <tr className={s.table}>\n                        <td className={s.table}>{d.firstCell}</td>\n                        <td className={s.table}>{d.secondCell}</td>\n                        <td className={s.table}>{d.thirdCell}</td>\n                        <td className={s.table}>\n                            {d.forthCell ? d.forthCell : <NavLink to={`/Cards/${d._id}`}>Cards</NavLink>}\n                        </td>\n                        <td className={s.table}>\n                            <ModalQuestionContainer\n                                questionText={props.questionText}\n                                onClickHandler={onClickHandler}\n                                buttonName={\"Delete\"}\n                            />\n                            {/*<Button*/}\n                            {/*    variant={'outlined'}*/}\n                            {/*    color={\"primary\"}*/}\n                            {/*    size={\"small\"}*/}\n                            {/*    onClick={() => props.deleteHandler(d._id)}*/}\n                            {/*>*/}\n                            {/*    Delete*/}\n                            {/*</Button>*/}\n                        </td>\n                        <td className={s.table}>\n                            <Button\n                                variant={'outlined'}\n                                color={\"primary\"}\n                                size={\"small\"}\n                                onClick={() => props.updateHandler(d._id)}\n                            >\n                                Update\n                            </Button>\n                        </td>\n                    </tr>\n                }\n            )\n            }\n\n            </tbody>\n        </table>\n\n    )\n}\n\nexport default Table;","import React from 'react';\nimport s from './Packs.module.css'\nimport Button from \"@material-ui/core/Button\";\nimport Table from \"../../common/Table/Table\";\n\n\ntype PropsType = {\n    packsForTable: Array<any>\n    addPackHandler: () => void\n    deletePackHandler: (_id: string,) => void\n    updatePackHandler: (_id: string) => void\n}\n\n\nfunction Packs(props: PropsType) {\n\n    return (\n        <div>\n            <Button\n                variant={'outlined'}\n                color={\"primary\"}\n                size={\"small\"}\n                onClick={props.addPackHandler}>\n                Add pack\n            </Button>\n            <Table tableHeaders={[\"Name\", \"Cards count\", \"Updated\", \"Cards\", \"Delete pack\", \"Update pack\" ]}\n                   tableDate={props.packsForTable}\n                   deleteHandler={props.deletePackHandler}\n                   updateHandler={props.updatePackHandler}\n                   questionText={\"Do you really want to delete this pack?\"}\n            />\n\n\n        </div>\n    )\n}\n\nexport default Packs","import {packsAPI, PackType} from \"../api/cardsAPI\";\nimport {setAppErrorAC, setAppErrorAT, setLoadingStatusAC, setLoadingStatusAT} from \"./appReducer\";\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\nimport {AppRootStateType} from \"./store\";\n\n\nexport const getPacksAC = (packs: Array<PackType>) => ({\n    type: \"packs/GET-PACKS\", packs\n} as const)\n\nexport const isMyPacksAC = (isMyPacks: boolean) => ({\n    type: \"packs/IS-MY-PACKS\", isMyPacks\n} as const)\n\nexport const allPacksDataAC = (cardPacksTotalCount: number, maxCardsCount: number, minCardsCount: number, page: number, pageCount: number) => ({\n    type: \"packs/ALL-PACKS-DATA\", cardPacksTotalCount, maxCardsCount, minCardsCount, page, pageCount\n} as const)\n\nexport const switchPageCountAC = (pageCount: number) => ({\n    type: \"packs/SWITCH-PAGE-COUNT\", pageCount\n} as const)\n\nexport const changePageAC = (page: number) => ({\n    type: \"packs/CHANGE-PAGE\", page\n} as const)\n\nexport const pagesButtonSwitcherAC = () => ({\n    type: \"packs/PAGES-BUTTON-SWITCHER\"\n} as const)\n\nexport const sortPacksAC = (sortPacks: 0 | 'update') => ({\n    type: \"packs/SORT-PACKS\", sortPacks\n} as const)\n\nexport const packNameAC = (packName: string) => ({\n    type: \"packs/PACK-NAME\", packName\n} as const)\n\nexport const changeRangeAC = (allMin: number, allMax: number) => ({\n    type: \"packs/CHANGE-RANGE\", allMin, allMax\n} as const)\n\ntype getPacksAT = ReturnType<typeof getPacksAC>\ntype isMyPacksAT = ReturnType<typeof isMyPacksAC>\ntype allPacksDataAT = ReturnType<typeof allPacksDataAC>\ntype switchPageCountAT = ReturnType<typeof switchPageCountAC>\ntype changePageAT = ReturnType<typeof changePageAC>\ntype pagesButtonSwitcherAT = ReturnType<typeof pagesButtonSwitcherAC>\ntype sortPacksAT = ReturnType<typeof sortPacksAC>\ntype packNameAT = ReturnType<typeof packNameAC>\ntype changeRangeAT = ReturnType<typeof changeRangeAC>\n\nexport type ActionsPacksType = setLoadingStatusAT\n    | setAppErrorAT\n    | getPacksAT\n    | isMyPacksAT\n    | allPacksDataAT\n    | switchPageCountAT\n    | changePageAT\n    | pagesButtonSwitcherAT\n    | sortPacksAT\n    | packNameAT\n    | changeRangeAT\n\n\nexport type InitialStateType = {\n    packsArray: Array<PackType>\n    isMyPacks: boolean\n    cardPacksTotalCount: number,\n    maxCardsCount: number,\n    minCardsCount: number,\n    page: number,\n    pageCount: number\n    pagesButtonSwitcher: Array<number>\n    sortPacks: 0 | 'update'\n    packName: string\n    allMax: number,\n    allMin: number\n}\n\nconst initialState: InitialStateType = {\n    packsArray: [],\n    isMyPacks: false,\n    cardPacksTotalCount: 0,\n    maxCardsCount: 0,\n    minCardsCount: 0,\n    page: 1,\n    pageCount: 10,\n    pagesButtonSwitcher: [],\n    sortPacks: 0,\n    packName: '',\n    allMax: 0,\n    allMin: 0\n}\n\n\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionsPacksType): InitialStateType => {\n    switch (action.type) {\n        case \"packs/GET-PACKS\": {\n            return {...state, packsArray: action.packs}\n        }\n        case \"packs/IS-MY-PACKS\": {\n            return {...state, isMyPacks: action.isMyPacks}\n        }\n        case \"packs/ALL-PACKS-DATA\": {\n            return {\n                ...state,\n                cardPacksTotalCount: action.cardPacksTotalCount,\n                maxCardsCount: action.maxCardsCount,\n                minCardsCount: action.minCardsCount,\n                page: action.page,\n                pageCount: action.pageCount,\n                allMax: state.allMax === 0 ? action.maxCardsCount : state.allMax\n            }\n        }\n        case \"packs/SWITCH-PAGE-COUNT\": {\n            return {\n                ...state,\n                pageCount: action.pageCount\n            }\n        }\n        case \"packs/CHANGE-PAGE\": {\n            return {\n                ...state,\n                page: action.page\n            }\n        }\n        case \"packs/PAGES-BUTTON-SWITCHER\": {\n\n            let pagesCount = Math.ceil(state.cardPacksTotalCount / state.pageCount)\n\n            let pagesButtonSwitcherNew = [];\n\n            if (pagesCount < 6) {\n                for (let i = 1; i <= pagesCount; i++) {\n                    pagesButtonSwitcherNew.push(i)\n                }\n            }\n            else {\n                pagesButtonSwitcherNew.push(1)\n                if (state.page < 5) {\n                    for (let i = 2; i <= 6; i++) {\n                        pagesButtonSwitcherNew.push(i)\n                    }\n                }\n                else {\n                    if (state.page > pagesCount-3) {\n                        for (let i = 5; i >= 1; i--) {\n                            pagesButtonSwitcherNew.push(pagesCount-i)\n                        }\n                    }\n                    else {\n                        for (let i = state.page-2; i <= state.page+2; i++) {\n                            pagesButtonSwitcherNew.push(i)\n                        }\n                    }\n                }\n                pagesButtonSwitcherNew.push(pagesCount)\n            }\n\n            return {\n                ...state,\n                pagesButtonSwitcher: [...pagesButtonSwitcherNew]\n            }\n        }\n        case \"packs/SORT-PACKS\": {\n            return {\n                ...state,\n                sortPacks: action.sortPacks\n            }\n        }\n        case \"packs/PACK-NAME\": {\n            return {\n                ...state,\n                packName: action.packName\n            }\n        }\n        case \"packs/CHANGE-RANGE\": {\n            return {\n                ...state,\n                allMin: action.allMin,\n                allMax: action.allMax\n            }\n        }\n        default: {\n            return state\n        }\n    }\n}\n\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsPacksType>\n\n//thunk\n/*export const fetchPacksTC = (): ThunkType => {\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsPacksType>) => {\n        dispatch(setLoadingStatusAC('loading'))\n        packsAPI.getPacks()\n            .then((res) => {\n                dispatch(getPacksAC(res.data.cardPacks))\n                dispatch(setLoadingStatusAC('idle'))\n            })\n            .catch((e) => {\n                dispatch(setLoadingStatusAC('idle'))\n                const error = e.response ? e.response.data.error : e.message\n                dispatch(setAppErrorAC(error))\n            })\n    }\n}*/\n\n//thunk\nexport const fetchPacksTC = () => (dispatch: any, getState: () => AppRootStateType) => {\n    const isMyPacks = getState().Packs.isMyPacks\n    const _id = getState().Profile._id\n    const pageCount = getState().Packs.pageCount\n    const page = getState().Packs.page\n    const sortPacks = getState().Packs.sortPacks\n    const packName = getState().Packs.packName\n    const allMin = getState().Packs.allMin\n    const allMax = getState().Packs.allMax\n    //debugger\n    dispatch(setLoadingStatusAC('loading'))\n    packsAPI.getPacks(isMyPacks, _id, pageCount, page, sortPacks, packName, allMin, allMax)\n        .then((res) => {\n            dispatch(getPacksAC(res.data.cardPacks))\n            dispatch(allPacksDataAC(res.data.cardPacksTotalCount, res.data.maxCardsCount, res.data.minCardsCount, res.data.page, res.data.pageCount))\n            dispatch(pagesButtonSwitcherAC())\n            dispatch(setLoadingStatusAC('idle'))\n        })\n        .catch((e) => {\n            dispatch(setLoadingStatusAC('idle'))\n            const error = e.response ? e.response.data.error : e.message\n            dispatch(setAppErrorAC(error))\n        })\n}\n\nexport const isMyPacksTC = (isMyPacks: boolean) => async (dispatch: any) => {\n    await dispatch(setLoadingStatusAC('loading'));\n    await dispatch(isMyPacksAC(isMyPacks))\n    await dispatch(fetchPacksTC())\n    await dispatch(setLoadingStatusAC('idle'))\n}\n\nexport const switchPageCountTC = (pageCount: number) => async (dispatch: any) => {\n    await dispatch(setLoadingStatusAC('loading'));\n    await dispatch(switchPageCountAC(pageCount))\n    await dispatch(fetchPacksTC())\n    await dispatch(setLoadingStatusAC('idle'))\n}\n\nexport const changePageTC = (page: number) => async (dispatch: any) => {\n    await dispatch(setLoadingStatusAC('loading'));\n    await dispatch(changePageAC(page))\n    await dispatch(fetchPacksTC())\n    await dispatch(setLoadingStatusAC('idle'))\n}\n\nexport const sortPacksTC = (sortPacks: 0 | 'update') => async (dispatch: any) => {\n    await dispatch(setLoadingStatusAC('loading'));\n    await dispatch(sortPacksAC(sortPacks))\n    await dispatch(fetchPacksTC())\n    await dispatch(setLoadingStatusAC('idle'))\n}\n\nexport const packNameTC = (packName: string) => async (dispatch: any) => {\n    await dispatch(setLoadingStatusAC('loading'));\n    await dispatch(packNameAC(packName))\n    await dispatch(fetchPacksTC())\n    await dispatch(setLoadingStatusAC('idle'))\n}\n\nexport const changeRangeTC = (allMin: number, allMax: number) => async (dispatch: any) => {\n    await dispatch(setLoadingStatusAC('loading'));\n    await dispatch(changeRangeAC(allMin, allMax))\n    await dispatch(fetchPacksTC())\n    await dispatch(setLoadingStatusAC('idle'))\n}\n\n\n\n\nexport const addPackTC = (name: string, isPrivate: boolean): ThunkType => {\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsPacksType>) => {\n        dispatch(setLoadingStatusAC('loading'));\n        packsAPI.addPack(name, isPrivate)\n            .then((res) => {\n                // dispatch(addPacksAC())\n                dispatch(fetchPacksTC())\n                dispatch(setLoadingStatusAC('idle'))\n            })\n            .catch((e) => {\n                dispatch(setLoadingStatusAC('idle'))\n                const error = e.response ? e.response.data.error : e.message\n                dispatch(setAppErrorAC(error))\n            })\n    }\n}\n\nexport const deletePackTC = (_id: string): ThunkType => {\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsPacksType>) => {\n        dispatch(setLoadingStatusAC('loading'));\n        packsAPI.deletePack(_id)\n            .then(() => {\n                dispatch(fetchPacksTC())\n                dispatch(setLoadingStatusAC('idle'))\n            })\n            .catch((e) => {\n                dispatch(setLoadingStatusAC('idle'))\n                const error = e.response ? e.response.data.error : e.message\n                dispatch(setAppErrorAC(error))\n            })\n    }\n}\n\nexport const updatePackTC = (_id: string, name: string): ThunkType => {\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsPacksType>) => {\n        dispatch(setLoadingStatusAC('loading'));\n        packsAPI.updatePack(_id, name)\n            .then(() => {\n                dispatch(fetchPacksTC())\n                dispatch(setLoadingStatusAC('idle'))\n            })\n            .catch((e) => {\n                dispatch(setLoadingStatusAC('idle'))\n                const error = e.response ? e.response.data.error : e.message\n                dispatch(setAppErrorAC(error))\n            })\n    }\n}\n\n\n\n\n\n\n","import React, {ChangeEvent} from 'react'\nimport {\n    changePageTC,\n    changeRangeTC,\n    isMyPacksTC,\n    packNameTC,\n    sortPacksTC,\n    switchPageCountTC\n} from \"../../../store/packsReducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../store/store\";\nimport {Checkbox} from '@material-ui/core';\nimport {Button, Input, MenuItem, Select, SelectChangeEvent, TextField} from '@mui/material';\nimport s from './SortPacks.module.css'\nimport Box from '@mui/material/Box';\nimport Slider from '@mui/material/Slider';\n\nconst SortPacks = () => {\n\n    let isMyPacks = useSelector<AppRootStateType, boolean>(state => state.Packs.isMyPacks);\n    let cardPacksTotalCount = useSelector<AppRootStateType, number>(state => state.Packs.cardPacksTotalCount);\n    let pageCount = useSelector<AppRootStateType, number>(state => state.Packs.pageCount);\n    let page = useSelector<AppRootStateType, number>(state => state.Packs.page);\n    let pagesButtonSwitcher = useSelector<AppRootStateType, Array<number>>(state => state.Packs.pagesButtonSwitcher);\n    let sortPacks = useSelector<AppRootStateType, 0 | 'update'>(state => state.Packs.sortPacks);\n    let packName = useSelector<AppRootStateType, string>(state => state.Packs.packName)\n    let maxCardsCount = useSelector<AppRootStateType, number>(state => state.Packs.maxCardsCount);\n    let minCardsCount = useSelector<AppRootStateType, number>(state => state.Packs.minCardsCount);\n    let allMin = useSelector<AppRootStateType, number>(state => state.Packs.allMin);\n    let allMax = useSelector<AppRootStateType, number>(state => state.Packs.allMax);\n\n    const dispatch = useDispatch()\n\n    const isMyPacksOnChange = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(isMyPacksTC(e.currentTarget.checked))\n    }\n\n    const switchPageCount = (e: SelectChangeEvent<string>) => {\n        const val = Number(e.target.value)\n        dispatch(switchPageCountTC(val))\n    }\n\n    /*const [value, setValue] = React.useState<number[]>([20, 37]);\n\n\n    };*/\n\n    const changeRange = (e: any) => {\n        //console.log(e.target.value)\n        dispatch(changeRangeTC(e.target.value[0], e.target.value[1]))\n    }\n\n    return (\n        <div>\n            <div>\n                <input\n                    type={'checkbox'}\n                    onChange={isMyPacksOnChange}\n                    checked={isMyPacks}\n                /> My Packs\n            </div>\n            <div>\n                cardPacksTotalCount: {cardPacksTotalCount}\n            </div>\n            <div>\n                In One Page:\n                <Select\n                    //labelId=\"demo-simple-select-label\"\n                    //id=\"demo-simple-select\"\n                    value={pageCount.toString()}\n                    variant=\"filled\"\n                    label=\"Count\"\n                    onChange={switchPageCount}\n                >\n                    <MenuItem value={10}>10 Ten</MenuItem>\n                    <MenuItem value={20}>20 Twenty</MenuItem>\n                    <MenuItem value={30}>30 Thirty</MenuItem>\n                    <MenuItem value={40}>40 Forty</MenuItem>\n                    <MenuItem value={50}>50 Fifty</MenuItem>\n                </Select>\n            </div>\n            <div>\n                {pagesButtonSwitcher.map(b =>\n                    <Button\n                        size=\"small\"\n                        variant={page === b ? \"contained\" : \"text\"}\n                        onClick={(e) => {\n                            dispatch(changePageTC(b))\n                        }}>{b}</Button>\n                )}\n            </div>\n            <div>\n                Sort by:\n                <Button\n                    size=\"small\"\n                    variant={sortPacks === 'update' ? \"contained\" : \"text\"}\n                    onClick={(e) => {\n                        dispatch(sortPacksTC('update'))\n                    }}\n                >Up</Button>\n                <Button\n                    size=\"small\"\n                    variant={sortPacks === 0 ? \"contained\" : \"text\"}\n                    onClick={(e) => {\n                        dispatch(sortPacksTC(0))\n                    }}\n                >Down</Button>\n            </div>\n            <div>\n                Search:\n                <TextField\n                    id=\"filled-basic\"\n                    label=\"Filled\"\n                    variant=\"filled\"\n                    value={packName}\n                    onChange={(e)=>{dispatch(packNameTC(e.target.value))}}\n                />\n            </div>\n            <div style={{'width': '300px', 'margin': '20px'}}>\n\n                    <Slider\n                        min={minCardsCount}\n                        max={maxCardsCount}\n                        value={[allMin, allMax]}\n                        onChange={(e) => {changeRange(e)}}\n                        valueLabelDisplay=\"auto\"\n                    />\n\n            </div>\n        </div>\n    )\n}\n\nexport default SortPacks\n/*changeRangeTC*/\n\n/*\n<Button\nvariant={page === b ? \"contained\" : \"text\"}\nonClick={(e) => {dispatch(changePageTC(b))\n>{b}</Button>\n\n<Button variant=\"contained\">Contained</Button>*/\n","import React, {ChangeEvent, useEffect} from 'react';\nimport Packs from \"./Packs\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../store/store\";\nimport {PackType} from \"../../api/cardsAPI\";\nimport {addPackTC, deletePackTC, fetchPacksTC, isMyPacksTC, updatePackTC} from \"../../store/packsReducer\";\nimport {Redirect} from \"react-router-dom\";\nimport SortPacks from \"./SortPacks/SortPacks\";\n\n\nfunction PacksContainer() {\n    const dispatch = useDispatch()\n    const packs = useSelector<AppRootStateType, Array<PackType>>(state => state.Packs.packsArray)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.LogIn.isLoggedIn);\n\n    useEffect(() => {\n        dispatch(fetchPacksTC())\n    }, [])\n\n    if (!isLoggedIn) {\n        return <Redirect to={\"/login\"}/>\n    }\n    const addPackHandler = () => {\n        dispatch(addPackTC(\"NewName-R\", false))\n    }\n    const deletePackHandler = (_id: string) => {\n        dispatch(deletePackTC(_id))\n    }\n    const updatePackHandler = (_id: string) => {\n        dispatch(updatePackTC(_id, \"UpdateName\"))\n    }\n    const packsForTable = packs.map((p) => (\n        {\n\n        firstCell: p.name,\n        secondCell: p.cardsCount,\n        thirdCell: p.updated,\n        _id: p._id\n    }))\n\n\n\n    return (\n        <div>\n            <SortPacks />\n            <Packs packsForTable={packsForTable}\n                   addPackHandler={addPackHandler}\n                   deletePackHandler={deletePackHandler}\n                   updatePackHandler={updatePackHandler}\n            />\n        </div>\n\n    )\n}\n\nexport default PacksContainer","import {CardType, trainingCardsAPI} from \"../api/cardsAPI\";\nimport {setAppErrorAC, setAppErrorAT, setLoadingStatusAC, setLoadingStatusAT} from \"./appReducer\";\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\nimport {AppRootStateType} from \"./store\";\n\n\ntype InitStateType = typeof initState;\ntype GetCardsActionType = ReturnType<typeof getCardsAC>\nexport type ActionsCardsType = setLoadingStatusAT | setAppErrorAT | GetCardsActionType\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsCardsType>\n\nexport const initState: Array<CardType> = [];\nconst getCards = \"cards/GET-CARDS\"\n\n\nexport const cardsReducer = (state: InitStateType = initState, action: ActionsCardsType): InitStateType => {\n    switch (action.type) {\n        case getCards: {\n            return action.cards\n        }\n        default: {\n            return state\n        }\n    }\n}\n\nexport const getCardsAC = (cards: Array<CardType>) => ({\n    type: getCards, cards\n} as const)\n\nexport const fetchCardsTC = (cardsPack_id: string): ThunkType => {\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsCardsType>) => {\n        dispatch(setLoadingStatusAC('loading'));\n        trainingCardsAPI.getCards(cardsPack_id)\n            .then((res) => {\n                dispatch(getCardsAC(res.data.cards))\n                dispatch(setLoadingStatusAC('idle'))\n            })\n            .catch((e) => {\n                dispatch(setLoadingStatusAC('idle'))\n                const error = e.response ? e.response.data.error : e.message\n                dispatch(setAppErrorAC(error))\n            })\n    }\n}\n\nexport const addCardTC = (cardsPack_id: string, question: string, answer: string, grade: number): ThunkType => {\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsCardsType>) => {\n        dispatch(setLoadingStatusAC('loading'));\n        trainingCardsAPI.addCard(cardsPack_id, question, answer, grade)\n            .then(() => {\n                dispatch(fetchCardsTC(cardsPack_id));\n                dispatch(setLoadingStatusAC('idle'));\n            })\n            .catch((e) => {\n                dispatch(setLoadingStatusAC('idle'))\n                const error = e.response ? e.response.data.error : e.message\n                dispatch(setAppErrorAC(error))\n            })\n    }\n}\nexport const deleteCardTC = (_id:string, cardsPack_id: string): ThunkType => {\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsCardsType>) => {\n        dispatch(setLoadingStatusAC('loading'));\n        trainingCardsAPI.deleteCard(_id)\n            .then(() => {\n                dispatch(fetchCardsTC(cardsPack_id));\n                dispatch(setLoadingStatusAC('idle'));\n            })\n            .catch((e) => {\n                dispatch(setLoadingStatusAC('idle'))\n                const error = e.response ? e.response.data.error : e.message\n                dispatch(setAppErrorAC(error))\n            })\n    }\n}\n\nexport const updateCardTC = (cardsPack_id: string, _id: string, question: string, answer: string, grade: number): ThunkType => {\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsCardsType>) => {\n        dispatch(setLoadingStatusAC('loading'));\n        trainingCardsAPI.updateCard(_id, question, answer, grade)\n            .then(() => {\n                dispatch(fetchCardsTC(cardsPack_id));\n                dispatch(setLoadingStatusAC('idle'));\n            })\n            .catch((e) => {\n                dispatch(setLoadingStatusAC('idle'))\n                const error = e.response ? e.response.data.error : e.message\n                dispatch(setAppErrorAC(error))\n            })\n    }\n}\n","import React from 'react';\nimport Table from \"../../common/Table/Table\";\nimport Button from \"@material-ui/core/Button\";\n\ntype PropsType = {\n    cardsForTable: Array<any>\n    addCardHandler: (cardsPack_id: string) => void\n    cardsPack_id: string\n    deleteCardHandler: (cardsPack_id: string, _id?: string) => void\n    updateCardCardHandler: (cardsPack_id: string) => void\n\n}\n\nfunction Cards(props: PropsType) {\n\n\n    return (\n        <div>\n            <Button\n                variant={'outlined'}\n                color={\"primary\"}\n                size={\"small\"}\n                onClick={() => props.addCardHandler(props.cardsPack_id)}>\n                Add card\n            </Button>\n            <Table\n                tableHeaders={[\"Question\", \"Answer\", \"Grade\", \"Updated\", \"Delete card\", \"Update card\"]}\n                tableDate={props.cardsForTable}\n                deleteHandler={props.deleteCardHandler}\n                updateHandler={props.updateCardCardHandler}\n                questionText={\"Do you really want to delete this card?\"}\n            />\n        </div>\n    )\n}\n\nexport default Cards;","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../store/store\";\nimport {CardType} from \"../../api/cardsAPI\";\nimport {addCardTC, deleteCardTC, fetchCardsTC, updateCardTC} from \"../../store/cardsReducer\";\nimport {useParams} from \"react-router-dom\";\nimport Cards from \"./Cards\";\n\n\nfunction CardsContainer() {\n    const dispatch = useDispatch()\n    const cards = useSelector<AppRootStateType, CardType[]>(state => state.Cards)\n    const {cardsPack_id} = useParams<{ cardsPack_id: string }>()\n    useEffect(() => {\n        dispatch(fetchCardsTC(cardsPack_id))\n    }, [])\n\n    const cardsForTable = cards.map((c) => ({\n        firstCell: c.question,\n        secondCell: c.answer,\n        thirdCell: c.grade,\n        forthCell: c.updated,\n        _id: c._id,\n\n    }))\n\n    const addCardHandler = (cardsPack_id: string) => {\n        dispatch(addCardTC(cardsPack_id, \"test question\", \"test answer\", 0))\n    }\n\n    const deleteCardHandler = (_id: string) => {\n        dispatch(deleteCardTC(_id, cardsPack_id))\n    }\n    const updateCardCardHandler = (_id: string) => {\n        dispatch(updateCardTC(cardsPack_id, _id, \"updated question\", \"updated answer\", 1))\n    }\n\n    return (\n        <Cards\n            cardsForTable={cardsForTable}\n            cardsPack_id={cardsPack_id}\n            addCardHandler={addCardHandler}\n            deleteCardHandler={deleteCardHandler}\n            updateCardCardHandler={updateCardCardHandler}\n        />\n    )\n}\n\nexport default CardsContainer;","import React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n/*import s from './App.module.css';*/\nimport Error404 from './pages/Error404/Error404';\nimport {LogIn} from './pages/LogIn/LogIn';\nimport SetNewPassword from \"../src/pages/SetNewPassword/SetNewPassword\";\nimport RecoveryPassword from \"./pages/RecoveryPassword/RecoveryPassword\";\nimport SignUp from './pages/SignUp/SignUp';\nimport LoadingLine from './common/LoadingLine/LoadingLine';\nimport {ErrorSnackbar} from './common/ErrorSnackbar/ErrorSnackbar';\nimport EditProfile from \"./pages/EditProfile/EditProfile\";\nimport Header from \"./pages/Header/Header\";\nimport ProfileContainer from \"./pages/Profile/ProfileContainer\";\nimport StartPage from \"./pages/StartPage/StartPage\";\nimport PacksContainer from \"./pages/Packs/PacksContainer\";\nimport CardsContainer from \"./pages/Cards/CardsContainer\";\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <LoadingLine/>\n            <Switch>\n                <Route exact path={'/'} render={() => <StartPage/>}/>\n                <Route path={'/SetNewPassword/:token'} render={() => <SetNewPassword/>}/>\n                <Route path={'/Error404'} render={() => <Error404/>}/>\n                <Route path={'/login'} render={() => <LogIn/>}/>\n                <Route path={'/Profile'} render={() => <ProfileContainer/>}/>\n                <Route path={'/RecoveryPassword'} render={() => <RecoveryPassword/>}/>\n                <Route path={'/SignUp'} render={() => <SignUp/>}/>\n                <Route path={'/EditProfile'} render={() => <EditProfile/>}/>\n                <Route path={'/Packs'} render={() => <PacksContainer/>}/>\n                <Route path={'/Cards/:cardsPack_id'} render={() => <CardsContainer/>}/>\n                <Redirect from={'*'} to={'/error404'}/>\n            </Switch>\n            <ErrorSnackbar/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunkMiddleware from \"redux-thunk\";\nimport {appReducer} from \"./appReducer\";\nimport {setNewPasswordReducer} from \"./setNewPasswordReducer\";\nimport {LogInReducer} from \"./logInReducer\";\nimport {ProfileReducer} from \"./profileReducer\";\nimport {RecoveryPasswordReducer} from \"./recoveryPasswordReducer\";\nimport {SignUpReducer} from \"./signUpReducer\";\nimport {packsReducer} from \"./packsReducer\";\nimport {cardsReducer} from \"./cardsReducer\";\n\n// объединяя reducer-ы с помощью combineReducers,\nconst rootReducer = combineReducers({\n    app: appReducer,\n    setNewPassword: setNewPasswordReducer,\n    LogIn: LogInReducer,\n    Profile: ProfileReducer,\n    RecoveryPassword: RecoveryPasswordReducer,\n    SignUp: SignUpReducer,\n    Packs: packsReducer,\n    Cards: cardsReducer\n})\n\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter } from 'react-router-dom';\nimport {store} from \"./store/store\";\nimport { Provider } from 'react-redux';\n\n// commit connection\n\n\n//coment\n\n//3\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerBlock\":\"Haeder_headerBlock__178d3\",\"nav\":\"Haeder_nav__OVEeX\",\"item\":\"Haeder_item__3r0Ki\",\"activeLink\":\"Haeder_activeLink__2UUEV\",\"isLoginFix\":\"Haeder_isLoginFix__31y95\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__1mgB1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Profile_background__Cr95E\",\"blockContainer\":\"Profile_blockContainer__3vd-8\",\"imgContainer\":\"Profile_imgContainer__shH_q\",\"text\":\"Profile_text__24QG7\",\"button\":\"Profile_button__1Rl1o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backgroundModal\":\"ModalQuestion_backgroundModal__2FDZ1\",\"modalContainer\":\"ModalQuestion_modalContainer__34dsF\",\"button\":\"ModalQuestion_button__37QQ1\"};"],"sourceRoot":""}