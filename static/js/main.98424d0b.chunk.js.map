{"version":3,"sources":["pages/RecoveryPassword/RecoveryPassword.module.css","pages/SignUp/SignUp.module.css","common/LoadingLine/LoadingLine.module.css","common/commonStyles.module.css","pages/Error404/Error404.tsx","store/appReducer.ts","api/cardsAPI.ts","store/profileReducer.ts","store/logInReducer.ts","pages/LogIn/LogIn.tsx","store/setNewPasswordReducer.ts","pages/SetNewPassword/SetNewPassword.tsx","assets/icon/iconEmail.png","store/recoveryPasswordReducer.ts","pages/RecoveryPassword/RecoveryPassword.tsx","store/signUpReducer.ts","pages/SignUp/SignUp.tsx","common/LoadingLine/LoadingLine.tsx","common/ErrorSnackbar/ErrorSnackbar.tsx","pages/EditProfile/EditProfile.tsx","pages/Header/Header.tsx","pages/Profile/Profile.tsx","pages/Profile/ProfileContainer.tsx","pages/StartPage/StartPage.tsx","pages/Packs/Packs.tsx","store/packsReducer.ts","pages/Packs/PacksContainer.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx","pages/Header/Haeder.module.css","pages/Profile/Profile.module.css","pages/StartPage/StartPage.module.css"],"names":["module","exports","Error404","setLoadingStatusAC","statusRequest","type","setAppErrorAC","error","initState","status","instance","axios","create","baseURL","withCredentials","cardsAPI","email","payload","from","message","post","data","password","resetPasswordToken","delete","packsAPI","get","name","isPrivate","cardsPack","avatar","_id","publicCardPacksCount","setUserData","setUserDataAC","initialState","isLoggedIn","setIsLoggedInAC","value","LogIn","dispatch","useDispatch","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","then","res","catch","e","response","resetForm","useSelector","state","to","Grid","container","justifyContent","item","FormControl","FormLabel","href","target","handleSubmit","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","checked","Button","variant","buttonDisabledAC","buttonDisabled","completed","SetNewPassword","setNewPassword","token","useParams","confirmPassword","className","cs","background","blockContainer","text","formControl","form","size","buttonBlock","button","disabled","RecoveryPassword","src","iconEmail","s","icon","navlink","SignUp","LoadingLine","app","loadingStyle","LinearProgress","Alert","props","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","EditProfile","Header","history","useHistory","headerBlock","nav","activeClassName","activeLink","onClick","push","Profile","imgContainer","alt","onClickHandler","ProfileContainer","StartPage","Packs","packs","map","p","key","cardsCount","updated","fetchPacksTC","cardPacks","PacksContainer","useEffect","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","copyState","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.98424d0b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navlink\":\"RecoveryPassword_navlink__2tvH4\",\"icon\":\"RecoveryPassword_icon__1RGVj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navlink\":\"SignUp_navlink__2uiPT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingStyle\":\"LoadingLine_loadingStyle__1NmIM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"commonStyles_background__2q_NM\",\"blockContainer\":\"commonStyles_blockContainer__11RPC\",\"form\":\"commonStyles_form__2TPJb\",\"text\":\"commonStyles_text__3BwWT\",\"formControl\":\"commonStyles_formControl__2OASi\",\"button\":\"commonStyles_button__GPYdo\",\"buttonBlock\":\"commonStyles_buttonBlock__1A-KK\"};","import React from 'react';\n\nfunction Error404() {\n    return (\n        <div>\n            Error404\n        </div>\n    )\n}\n\nexport default Error404","export type RequestStatusType = 'idle' | 'loading'\n//test2\nexport const setLoadingStatusAC = (statusRequest: RequestStatusType) => {\n    return {\n        type: \"APP/SET-STATUS\",\n        statusRequest\n    } as const\n}\n\nexport const setAppErrorAC = (error: null | string) => {\n    return {\n        type: \"APP/SET-ERROR\",\n        error\n    } as const\n}\n\nexport type setLoadingStatusAT = ReturnType<typeof setLoadingStatusAC>\nexport type setAppErrorAT = ReturnType<typeof setAppErrorAC>\n\nexport type actionAppType = setLoadingStatusAT | setAppErrorAT\n\nexport const initState = {\n    status: 0,\n    error: null as null | string\n\n}\n\ntype InitStateType = typeof initState\n\nexport const appReducer = (state: InitStateType = initState, action: actionAppType): InitStateType => {\n    switch (action.type) {\n        case \"APP/SET-STATUS\": {\n            let copyState = {...state};\n            if (action.statusRequest === 'loading') {\n                copyState.status++\n            } else {\n                copyState.status--\n            }\n            return copyState\n        }\n        case 'APP/SET-ERROR':\n            return {...state, error: action.error}\n        default: {\n            return state\n        }\n    }\n}","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://neko-back.herokuapp.com/2.0\",\n    // baseURL: \"http://localhost:7542/2.0/\",\n    withCredentials: true,\n})\n\nexport const cardsAPI = {\n    forgotPassword(email: string) {\n        const payload = {\n            email,\n            from: `test-front-admin <romanxeo@gmail.com>`,\n            message: `<div style=\"background-color: #a3c486; padding: 10px\">\n                        password recovery link: \n                        <a href='http://localhost:3000/#/SetNewPassword/$token$'>\n                        link local</a>\n                        <a href='https://romanxeo.github.io/cardsapp/#/SetNewPassword/$token$'>\n                        link gh-pages</a></div>`\n        }\n        const promise = instance.post<any>('auth/forgot', payload);\n        return promise;\n    },\n\n    login(data: LoginParamsType) {\n        return instance.post<UserDataType>(`/auth/login`, data)\n    },\n\n    setNewPassword(password: string, resetPasswordToken: string) {\n        const payload = {\n            password,\n            resetPasswordToken\n        }\n        const promise = instance.post<any>('auth/set-new-password', payload);\n        return promise;\n    },\n\n    register(email: string, password: string) {\n        const payload = {\n            email,\n            password\n        }\n        const promise = instance.post<any>('auth/register', payload);\n        return promise;\n    },\n    me() {\n        return instance.post <UserDataType>(`auth/me`)\n    },\n    logOut() {\n        return instance.delete<any>('auth/me')\n    }\n}\n\nexport const packsAPI = {\n    getPacks() {\n        return instance.get<PacksResponseType>('cards/pack')\n    },\n    addPack(name: string, isPrivate: boolean) {\n        const payload = {\n            cardsPack: {\n                name, isPrivate\n            }\n        }\n        return instance.post<PackType>('cards/pack', payload)\n    }\n}\n\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\nexport type UserDataType = {\n    _id: string\n    email: string\n    name: string\n    rememberMe?: boolean\n    avatar?: string\n    publicCardPacksCount: number\n}\nexport type PackType = {\n    _id: string\n    name: string\n    user_id: string\n    user_name: string\n    private: boolean\n    created: string\n    updated: string\n    cardsCount: number\n}\nexport type PacksResponseType = {\n    cardPacks: Array<PackType>\n    cardPacksTotalCount: number // количество колод\n    maxCardsCount: number\n    minCardsCount:number\n    page: number// выбранная страница\n    pageCount: number // количество элементов на странице\n\n\n}","import {Dispatch} from 'redux'\nimport {cardsAPI} from \"../api/cardsAPI\";\nimport {setAppErrorAC, setAppErrorAT, setLoadingStatusAC, setLoadingStatusAT} from \"./appReducer\";\n\n\nexport type SetUserDataACType = ReturnType<typeof setUserDataAC>\n\nexport type ActionProfileType = SetUserDataACType | setLoadingStatusAT | setAppErrorAT\ntype ThunkDispatch = Dispatch<ActionProfileType>\n\nexport const initState = {\n    name: \"\",\n    avatar: \"\",\n    _id: \"\",\n    publicCardPacksCount: 0,\n}\n\ntype InitStateType = typeof initState\n\nexport const setUserData = \"profile/SET-USER-DATA\"\n\nexport const ProfileReducer = (state: InitStateType = initState, action: ActionProfileType): InitStateType => {\n    switch (action.type) {\n        case setUserData: {\n            return {...state, name: action.name, avatar: action.avatar}\n        }\n        default: {\n            return state\n        }\n    }\n}\n\nexport const setUserDataAC = (name: string, avatar: string, _id: string, publicCardPacksCount: number) => ({\n    type: setUserData, name, avatar, _id, publicCardPacksCount\n} as const)\n\n\n// thunks\nexport const setUserDataTC = () => {\n    return (dispatch: ThunkDispatch) => {\n        dispatch(setLoadingStatusAC('loading'))\n        cardsAPI.me()\n            .then((res) => {\n                dispatch(setUserDataAC(res.data.name, res.data.avatar ? res.data.avatar : \"\", res.data._id,\n                    res.data.publicCardPacksCount))\n                dispatch(setLoadingStatusAC('idle'))\n            })\n            .catch((e) => {\n                dispatch(setLoadingStatusAC('idle'))\n                const error = e.response ? e.response.data.error : e.message\n                dispatch(setAppErrorAC(error))\n            })\n    }\n\n}","import {setLoadingStatusAC, setAppErrorAC, setLoadingStatusAT, setAppErrorAT} from './appReducer'\nimport {LoginParamsType, cardsAPI} from \"../api/cardsAPI\";\nimport {setUserDataAC, SetUserDataACType} from \"./profileReducer\";\nimport {Dispatch} from 'redux';\n\n\nconst initialState = {\n    isLoggedIn: false\n}\ntype InitialStateType = typeof initialState\n\nexport const LogInReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n\n// thunks\nexport const loginTC = (data: LoginParamsType) => (dispatch: any) => {\n    dispatch(setLoadingStatusAC('loading'))\n    cardsAPI.login(data)\n        .then((res) => {\n            dispatch(setIsLoggedInAC(true))\n            dispatch(setLoadingStatusAC('idle'))\n            dispatch(setUserDataAC(res.data.name, res.data.avatar ? res.data.avatar : \"\", res.data._id,\n                res.data.publicCardPacksCount))\n        })\n        .catch(e => {\n            //dispatch(setAppErrorAC('dfdgfd'))\n            const error = e.response ? e.response.data.error : e.message\n            dispatch(setAppErrorAC(error))\n            dispatch(setLoadingStatusAC('idle'))\n        })\n}\n\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setLoadingStatusAC('loading'))\n    cardsAPI.logOut()\n        .then((res) => {\n            dispatch(setIsLoggedInAC(false))\n            dispatch(setLoadingStatusAC('idle'))\n            dispatch(setUserDataAC(\"\", \"\", \"\", 0))\n        })\n        .catch(e => {\n            dispatch(setLoadingStatusAC('idle'))\n            //dispatch(setAppErrorAC(\"some error\"))\n            const error = e.response ? e.response.data.error : e.message\n            dispatch(setAppErrorAC(error))\n        })\n\n\n}\n\n// types\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | setLoadingStatusAT | SetUserDataACType | setAppErrorAT\n","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"../../store/logInReducer\";\nimport {AppRootStateType} from \"../../store/store\";\nimport { Redirect } from 'react-router-dom';\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const LogIn = () => {\n\n    const dispatch = useDispatch();\n\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Поле пароль обязательно';\n            } else if (values.password.length < 3) {\n                errors.password = 'Длина пароля должна быть больше 3 символов';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n            formik.resetForm();\n        },\n    });\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean> (state => state.LogIn.isLoggedIn)\n\n    if (isLoggedIn) {\n        return (\n            <Redirect to={'/profile'}/>\n        )\n    }\n\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <FormControl>\n                <FormLabel>\n                    <p>To log in get registered\n                        <a href={'https://social-network.samuraijs.com/'}\n                           target={'_blank'}> here\n                        </a>\n                    </p>\n                    <p>or use common test account credentials:</p>\n                    <p>Email: free@samuraijs.com</p>\n                    <p>Password: free</p>\n                </FormLabel>\n                <form onSubmit={formik.handleSubmit}>\n                    <FormGroup>\n                        <TextField label=\"Email\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps('email')}\n                        />\n\n                        {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\n\n\n                        <TextField type=\"password\"\n                                   label=\"Password\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps('password')}\n                        />\n                        {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\n\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox/>}\n                            {...formik.getFieldProps('rememberMe')}\n                            checked={formik.values.rememberMe}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </form>\n            </FormControl>\n        </Grid>\n    </Grid>\n}\n\n\n\n","import {cardsAPI} from \"../api/cardsAPI\";\nimport {setAppErrorAC, setLoadingStatusAC} from \"./appReducer\";\n\nconst buttonDisabledAC = (buttonDisabled: boolean) => {\n    return {\n        type: \"SET-NEW-PASSWORD/BUTTON-DISABLED\",\n        buttonDisabled\n    } as const\n}\n\nconst completedRequestAC = (completed: boolean) => {\n    return {\n        type: \"SET-NEW-PASSWORD/COMPLETED-REQUEST\",\n        completed\n    } as const\n}\n\nexport type buttonDisabledAT = ReturnType<typeof buttonDisabledAC>\nexport type completedRequestAT = ReturnType<typeof completedRequestAC>\n\nexport type actionSetNewPasswordType =\n    buttonDisabledAT | completedRequestAT\n\nexport const initState = {\n    completed: false,\n    buttonDisabled: false\n}\n\ntype InitStateType = typeof initState\n\nexport const setNewPasswordReducer = (state: InitStateType = initState, action: actionSetNewPasswordType): InitStateType => {\n    switch (action.type) {\n        case \"SET-NEW-PASSWORD/BUTTON-DISABLED\": {\n            return {...state, buttonDisabled: action.buttonDisabled}\n        }\n        case \"SET-NEW-PASSWORD/COMPLETED-REQUEST\": {\n            return {...state, completed: action.completed}\n        }\n        default: {\n            return state\n        }\n    }\n}\n\n\n//thunk\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => {\n    return (dispatch: any) => {\n        dispatch(buttonDisabledAC(true))\n        dispatch(setLoadingStatusAC('loading'))\n        cardsAPI.setNewPassword(password, resetPasswordToken)\n            .then(res => {\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n                dispatch(completedRequestAC(true))\n            })\n            .catch(e => {\n                //console.log(err)\n                const error = e.response ? e.response.data.error : \"some unknown error\"\n                dispatch(setAppErrorAC(error))\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n            })\n    }\n}\n","import React from 'react';\n//import s from './RecoveryPassword.module.css';\nimport cs from '../../common/commonStyles.module.css'\nimport {useFormik} from \"formik\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Redirect, useParams} from 'react-router-dom';\nimport {setNewPasswordTC} from \"../../store/setNewPasswordReducer\";\nimport {AppRootStateType} from \"../../store/store\";\n\n\ntype FormikErrorType = {\n    password?: string\n    confirmPassword?: string\n}\n\nconst SetNewPassword = () => {\n\n    let completed = useSelector<AppRootStateType, boolean>(state => state.setNewPassword.completed)\n    let buttonDisabled = useSelector<AppRootStateType, boolean>(state => state.setNewPassword.buttonDisabled)\n    const {token} = useParams<{ token: string }>()\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            password: '',\n            confirmPassword: ''\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.password) {\n                errors.password = 'ПУСТО';\n            } else if (values.password.length < 4) {\n                errors.password = 'БОЛЬШЕ ТРЕХ СИМВОЛОВ ДОЛЖНО БЫТЬ';\n            }\n\n            if (values.password !== values.confirmPassword) {\n                errors.confirmPassword = 'ПАРОЛИ НЕ СОВПАДАЮТ'\n            }\n            return errors;\n        },\n        onSubmit: (values) => {\n            dispatch(setNewPasswordTC(values.password, token))\n        }\n    })\n\n    if (completed) {\n        return (\n            <Redirect to={'/login'}/>\n        )\n    }\n\n    return (\n        <div className={cs.background}>\n            <div className={cs.blockContainer}>\n                <h2 className={cs.text}>It-incubator</h2>\n                <h3 className={cs.text}>Create new password</h3>\n                <FormControl className={cs.formControl}>\n                    <form onSubmit={formik.handleSubmit} className={cs.form}>\n                        <FormGroup>\n                            <TextField\n                                variant={\"outlined\"}\n                                size={'small'}\n                                label='password'\n                                margin=\"normal\"\n                                type=\"password\"\n                                {...formik.getFieldProps('password')}\n                            />\n\n                            <div style={{'height': '20px'}}>\n                                {formik.touched.password && formik.errors.password &&\n                                <div style={{color: 'red'}}>{formik.errors.password}</div>}\n                            </div>\n\n                            <TextField\n                                variant={\"outlined\"}\n                                size={'small'}\n                                label='confirmPassword'\n                                margin=\"normal\"\n                                type=\"password\"\n                                {...formik.getFieldProps('confirmPassword')}\n                            />\n\n                            <div style={{'height': '20px'}}>\n                                {formik.touched.confirmPassword && formik.errors.confirmPassword &&\n                                <div style={{color: 'red'}}>{formik.errors.confirmPassword}</div>}\n                            </div>\n\n                            <p>Create new password and we will send you further instructions to E-mail</p>\n\n                            <div className={cs.buttonBlock}>\n                                <Button\n                                    className={cs.button}\n                                    type={'submit'}\n                                    variant={'contained'}\n                                    color={'primary'}\n                                    size={'small'}\n                                    disabled={buttonDisabled}\n                                >\n                                    Create new password\n                                </Button>\n                            </div>\n\n                        </FormGroup>\n                    </form>\n                </FormControl>\n            </div>\n        </div>\n    )\n}\n\nexport default SetNewPassword","export default __webpack_public_path__ + \"static/media/iconEmail.f254994b.png\";","import {cardsAPI} from \"../api/cardsAPI\";\nimport {setAppErrorAC, setLoadingStatusAC} from \"./appReducer\";\n\nconst buttonDisabledAC = (buttonDisabled: boolean) => {\n    return {\n        type: \"RECOVERY-PASSWORD/BUTTON-DISABLED\",\n        buttonDisabled\n    } as const\n}\n\nconst completedRequestAC = (completed: boolean) => {\n    return {\n        type: \"RECOVERY-PASSWORD/COMPLETED-REQUEST\",\n        completed\n    } as const\n}\n\nexport type buttonDisabledAT = ReturnType<typeof buttonDisabledAC>\nexport type completedRequestAT = ReturnType<typeof completedRequestAC>\n\nexport type actionRecoveryPasswordType =\n    buttonDisabledAT | completedRequestAT\n\nexport const initState = {\n    completed: false,\n    buttonDisabled: false\n}\n\ntype InitStateType = typeof initState\n\nexport const RecoveryPasswordReducer = (state: InitStateType = initState, action: actionRecoveryPasswordType): InitStateType => {\n    switch (action.type) {\n        case \"RECOVERY-PASSWORD/BUTTON-DISABLED\": {\n            return {...state, buttonDisabled: action.buttonDisabled}\n        }\n        case \"RECOVERY-PASSWORD/COMPLETED-REQUEST\": {\n            return {...state, completed: action.completed}\n        }\n        default: {\n            return state\n        }\n    }\n}\n\n\n\n//thunk\nexport const forgotPasswordTC = (email: string) => {\n    return (dispatch: any) => {\n        dispatch(buttonDisabledAC(true))\n        dispatch(setLoadingStatusAC('loading'))\n        cardsAPI.forgotPassword(email)\n            .then(res => {\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n                dispatch(completedRequestAC(true))\n            })\n            .catch(e => {\n                const error = e.response ? e.response.data.error : \"some unknown error\"\n                dispatch(setAppErrorAC(error))\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n            })\n    }\n}","import React from 'react';\nimport s from './RecoveryPassword.module.css';\nimport cs from '../../common/commonStyles.module.css'\nimport {useFormik} from \"formik\";\nimport iconEmail from '../../assets/icon/iconEmail.png'\nimport TextField  from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport FormControl from \"@mui/material/FormControl\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport { NavLink } from 'react-router-dom';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../store/store\";\nimport {forgotPasswordTC} from '../../store/recoveryPasswordReducer';\n\n\ntype FormikErrorType = {\n    email?: string\n}\n\nfunction RecoveryPassword() {\n    let completed = useSelector<AppRootStateType, boolean>(state => state.RecoveryPassword.completed)\n    let buttonDisabled = useSelector<AppRootStateType, boolean>(state => state.RecoveryPassword.buttonDisabled)\n\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(forgotPasswordTC(values.email))\n\n\n\n            //setCompleted(true)\n            formik.resetForm()\n        },\n    })\n\n\n    if (completed) {\n        return (\n            <div className={cs.background}>\n                <div className={cs.blockContainer}>\n                    <div className={cs.form}>\n                        <h2 className={cs.text}>It-incubator</h2>\n                        <img src={iconEmail} className={s.icon}/>\n                        <h3 className={cs.text}>Check E-mail</h3>\n                        <p className={cs.text}>We have sent instructions to your E-mail how to recover your password</p>\n                    </div>\n\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className={cs.background}>\n                <div className={cs.blockContainer}>\n                    <h2 className={cs.text}>It-incubator</h2>\n                    <h3 className={cs.text}>Forgot your password?</h3>\n                    <FormControl className={cs.formControl}>\n                        <form onSubmit={formik.handleSubmit} className={cs.form}>\n                            <FormGroup>\n                                <TextField\n                                    variant={\"outlined\"}\n                                    size={'small'}\n                                    label='E-mail'\n                                    margin=\"normal\"\n                                    {...formik.getFieldProps('email')}\n                                />\n\n                                <div style={{'height': '20px'}}>\n                                    {formik.touched.email && formik.errors.email &&\n                                    <div style={{color: 'red'}}>{formik.errors.email}</div>}\n                                </div>\n\n                                <p>Enter your e-mail address and we will send you further instructions</p>\n\n                                <div className={cs.buttonBlock}>\n                                    <Button\n                                        className={cs.button}\n                                        type={'submit'}\n                                        variant={'contained'}\n                                        color={'primary'}\n                                        size={'small'}\n                                        disabled={buttonDisabled}\n                                    >\n                                        Send instructions\n                                    </Button>\n                                </div>\n\n                                <p>Did you remember your password?</p>\n\n                                <div className={cs.buttonBlock}>\n                                    <nav>\n                                        <NavLink\n                                            className={s.navlink}\n                                            to=\"/login\"\n                                        >\n                                            Try logging in\n                                        </NavLink>\n                                    </nav>\n                                </div>\n                            </FormGroup>\n                        </form>\n                    </FormControl>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default RecoveryPassword","import {cardsAPI} from \"../api/cardsAPI\";\nimport {setAppErrorAC, setLoadingStatusAC} from \"./appReducer\";\n\nconst buttonDisabledAC = (buttonDisabled: boolean) => {\n    return {\n        type: \"SIGN-UP/BUTTON-DISABLED\",\n        buttonDisabled\n    } as const\n}\n\nconst completedRequestAC = (completed: boolean) => {\n    return {\n        type: \"SIGN-UP/COMPLETED-REQUEST\",\n        completed\n    } as const\n}\n\nexport type buttonDisabledAT = ReturnType<typeof buttonDisabledAC>\nexport type completedRequestAT = ReturnType<typeof completedRequestAC>\n\nexport type actionSignUpType =\n    buttonDisabledAT | completedRequestAT\n\nexport const initState = {\n    completed: false,\n    buttonDisabled: false\n}\n\ntype InitStateType = typeof initState\n\nexport const SignUpReducer = (state: InitStateType = initState, action: actionSignUpType): InitStateType => {\n    switch (action.type) {\n        case \"SIGN-UP/BUTTON-DISABLED\": {\n            return {...state, buttonDisabled: action.buttonDisabled}\n        }\n        case \"SIGN-UP/COMPLETED-REQUEST\": {\n            return {...state, completed: action.completed}\n        }\n        default: {\n            return state\n        }\n    }\n}\n\n//thunk\nexport const registerTC = (email: string, password: string) => {\n    return (dispatch: any) => {\n        dispatch(buttonDisabledAC(true))\n        dispatch(setLoadingStatusAC('loading'))\n        cardsAPI.register(email, password)\n            .then(res => {\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n                dispatch(completedRequestAC(true))\n            })\n            .catch(e => {\n                const error = e.response ? e.response.data.error : \"some unknown error\"\n                dispatch(setAppErrorAC(error))\n                //dispatch(setAppErrorAC('unknown error'))\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n            })\n    }\n}","import React from 'react';\nimport s from './SignUp.module.css';\nimport cs from '../../common/commonStyles.module.css'\nimport {useFormik} from \"formik\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {NavLink, Redirect} from 'react-router-dom';\nimport {registerTC} from \"../../store/signUpReducer\";\nimport {AppRootStateType} from \"../../store/store\";\n\ntype FormikErrorType = {\n    email?: string,\n    password?: string,\n    confirmPassword?: string\n}\n\nconst SignUp = () => {\n\n    let completed = useSelector<AppRootStateType, boolean>(state => state.SignUp.completed)\n    let buttonDisabled = useSelector<AppRootStateType, boolean>(state => state.SignUp.buttonDisabled)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            confirmPassword: ''\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n\n            if (!values.password) {\n                errors.password = 'ПУСТО';\n            } else if (values.password.length < 4) {\n                errors.password = 'БОЛЬШЕ ТРЕХ СИМВОЛОВ ДОЛЖНО БЫТЬ';\n            }\n\n            if (values.password !== values.confirmPassword) {\n                errors.confirmPassword = 'ПАРОЛИ НЕ СОВПАДАЮТ'\n            }\n            return errors;\n        },\n        onSubmit: (values) => {\n            dispatch(registerTC(values.email, values.password))\n        }\n    })\n\n    if (completed) {\n        return (\n            <Redirect to={'/login'}/>\n        )\n    }\n\n    return (\n        <div className={cs.background}>\n            <div className={cs.blockContainer}>\n                <h2 className={cs.text}>It-incubator</h2>\n                <h3 className={cs.text}>Sign Up</h3>\n                <FormControl className={cs.formControl}>\n                    <form onSubmit={formik.handleSubmit} className={cs.form}>\n                        <FormGroup>\n                            <TextField\n                                variant={\"outlined\"}\n                                size={'small'}\n                                label='email'\n                                margin=\"normal\"\n                                {...formik.getFieldProps('email')}\n                            />\n\n                            <div style={{'height': '20px'}}>\n                                {formik.touched.email && formik.errors.email &&\n                                <div style={{color: 'red'}}>{formik.errors.email}</div>}\n                            </div>\n\n                            <TextField\n                                variant={\"outlined\"}\n                                size={'small'}\n                                label='password'\n                                margin=\"normal\"\n                                type=\"password\"\n                                {...formik.getFieldProps('password')}\n                            />\n\n                            <div style={{'height': '20px'}}>\n                                {formik.touched.password && formik.errors.password &&\n                                <div style={{color: 'red'}}>{formik.errors.password}</div>}\n                            </div>\n\n                            <TextField\n                                variant={\"outlined\"}\n                                size={'small'}\n                                label='confirmPassword'\n                                margin=\"normal\"\n                                type=\"password\"\n                                {...formik.getFieldProps('confirmPassword')}\n                            />\n\n                            <div style={{'height': '20px'}}>\n                                {formik.touched.confirmPassword && formik.errors.confirmPassword &&\n                                <div style={{color: 'red'}}>{formik.errors.confirmPassword}</div>}\n                            </div>\n\n                            <div className={cs.buttonBlock}>\n                                <Button\n                                    className={cs.button}\n                                    type={'submit'}\n                                    variant={'contained'}\n                                    color={'primary'}\n                                    size={'small'}\n                                    disabled={buttonDisabled}\n                                >\n                                    Register\n                                </Button>\n\n\n                            </div>\n\n                            <div className={cs.buttonBlock}>\n                                <nav>\n                                    <NavLink\n                                        className={s.navlink}\n                                        to=\"/login\"\n                                    >\n                                        Login\n                                    </NavLink>\n                                </nav>\n                            </div>\n\n                        </FormGroup>\n                    </form>\n                </FormControl>\n            </div>\n        </div>\n    )\n}\n\nexport default SignUp","import React from 'react'\nimport s from './LoadingLine.module.css'\nimport LinearProgress from '@mui/material/LinearProgress'\nimport { useSelector } from 'react-redux'\nimport { AppRootStateType } from '../../store/store'\n\nconst LoadingLine = () => {\n\n    let status = useSelector<AppRootStateType, number>(state => state.app.status)\n\n    return (\n        <div className={s.loadingStyle}>\n            {status !== 0 && <LinearProgress color={\"secondary\"}/>}\n        </div>\n    )\n}\n\nexport default LoadingLine","import React from 'react'\nimport {AppRootStateType} from \"../../store/store\";\nimport {setAppErrorAC} from \"../../store/appReducer\";\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from \"react-redux\";\n\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n\n    let error = useSelector<AppRootStateType, null | string>(state => state.app.error)\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        dispatch(setAppErrorAC(null))\n    }\n\n    return (\n        <Snackbar\n            open={error !== null}\n            autoHideDuration={6000}\n            onClose={handleClose}\n        >\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n}\n","import React from \"react\";\n\nfunction EditProfile() {\n    return (\n        <div>\n            Edit profile\n        </div>\n    )\n}\nexport default EditProfile","import React from \"react\";\nimport {NavLink, useHistory} from \"react-router-dom\";\nimport s from './Haeder.module.css'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../store/store\";\nimport Button from \"@material-ui/core/Button\";\nimport {logoutTC, setIsLoggedInAC} from \"../../store/logInReducer\";\n\n\nfunction Header() {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.LogIn.isLoggedIn)\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n\n    const onClickHandler = () => {\n        dispatch(logoutTC())\n        dispatch(setIsLoggedInAC(false))\n        history.push('/login');\n\n    }\n\n    return (\n        <div>\n            <div className={s.headerBlock}>\n\n                <nav className={s.nav}>\n                    {!isLoggedIn && <div className={s.item}>\n                        <NavLink to={'/login'} activeClassName={s.activeLink}>Login</NavLink>\n                    </div>}\n                    {!isLoggedIn && <div className={s.item}>\n                        <NavLink to={'/SignUp'} activeClassName={s.activeLink}>SignUp</NavLink>\n                    </div>}\n                    {!isLoggedIn && <div className={s.item}>\n                        <NavLink to={'/RecoveryPassword'} activeClassName={s.activeLink}>Recovery password</NavLink>\n                    </div>}\n                    {isLoggedIn && <div className={s.item}>\n                        <NavLink to={'/Profile'} activeClassName={s.activeLink}>Profile</NavLink>\n                    </div>}\n                    {isLoggedIn && <div className={s.item}>\n                        <NavLink to={'/Packs'} activeClassName={s.activeLink}>Packs</NavLink>\n                    </div>}\n                    {isLoggedIn && <div className={s.item}>\n                        <Button variant={'contained'}\n                                color={\"primary\"}\n                                size={\"small\"}\n                                onClick={onClickHandler}\n                        >Log out</Button>\n                    </div>}\n\n\n                </nav>\n            </div>\n\n        </div>\n\n    )\n}\n\nexport default Header;","import React from 'react';\nimport s from \"./Profile.module.css\"\nimport Button from '@material-ui/core/Button';\n\ntype ProfilePropsType = {\n    name: string\n    avatar?: string\n    publicCardPacksCount: number\n    onClickHandler: () => void\n}\n\nfunction Profile(props: ProfilePropsType) {\n\n    return (\n        <div className={s.background}>\n            <div className={s.blockContainer}>\n                <div className={s.imgContainer}><img src={props.avatar} alt={props.name}/></div>\n                <div className={s.text}>{props.name}</div>\n                <div className={s.text}>{`You have ${props.publicCardPacksCount} public packs`}</div>\n                <div className={s.button}>\n                    <Button\n                        variant={'contained'}\n                        color={\"primary\"}\n                        size={\"small\"}\n                        onClick={props.onClickHandler}>\n                        Edit profile\n                    </Button>\n                </div>\n\n            </div>\n\n\n        </div>\n    )\n\n}\n\nexport default Profile","import React from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../store/store\";\nimport {setUserDataTC} from \"../../store/profileReducer\";\nimport {Redirect, useHistory} from \"react-router-dom\";\nimport {setIsLoggedInAC} from \"../../store/logInReducer\";\nimport Profile from \"./Profile\";\n\nfunction ProfileContainer() {\n    const dispatch = useDispatch()\n    const _id = useSelector<AppRootStateType, string>(state => state.Profile._id)\n    const name = useSelector<AppRootStateType, string>(state => state.Profile.name);\n    const avatar = useSelector<AppRootStateType, string>(state => state.Profile.avatar);\n    const publicCardPacksCount = useSelector<AppRootStateType, number>(state => state.Profile.publicCardPacksCount);\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.LogIn.isLoggedIn);\n    const history = useHistory();\n\n    const onClickHandler = () => {\n        history.push('/EditProfile');\n    }\n\n    if (!isLoggedIn) {\n        dispatch(setUserDataTC());\n        if (!_id) {\n            return <Redirect to={\"/login\"}/>\n        } else {\n            dispatch(setIsLoggedInAC(true))\n        }\n\n    }\n    return <Profile name={name}\n                    avatar={avatar}\n                    publicCardPacksCount={publicCardPacksCount}\n                    onClickHandler={onClickHandler}/>\n\n\n}\n\nexport default ProfileContainer","import React from 'react';\nimport s from './StartPage.module.css'\n\nfunction StartPage() {\n\n    return (\n        <div className={s.background}>\n            <h1 className={s.test}>Hi! We glad to see you! </h1>\n            <h2 className={s.test}> This is application for learning with cards. </h2>\n        </div>\n    )\n\n}\nexport default StartPage;","import React from 'react';\nimport s from './Packs.module.css'\nimport {PackType} from \"../../api/cardsAPI\";\nimport Button from \"@material-ui/core/Button\";\n\n\ntype PropsType = {\n    packs: PackType[]\n    onClickHandler: () => void\n}\n\n\nfunction Packs(props: PropsType) {\n\n    return (\n        <div>\n            <Button\n                variant={'contained'}\n                color={\"primary\"}\n                size={\"small\"}\n                onClick={props.onClickHandler}>\n                Add pack\n            </Button>\n            {props.packs.map((p, key) => {\n                return <div key={p._id}>\n                    <span>{p.name}</span>\n                    <span>{p.cardsCount}</span>\n                    <span>{p.updated}</span>\n                </div>\n\n\n            })}\n\n        </div>\n    )\n}\n\nexport default Packs","import {packsAPI, PackType} from \"../api/cardsAPI\";\nimport {setAppErrorAC, setAppErrorAT, setLoadingStatusAC, setLoadingStatusAT} from \"./appReducer\";\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\nimport {AppRootStateType} from \"./store\";\n\ntype InitStateType = typeof initState;\ntype getPacksACType = ReturnType<typeof getPacksAC>\ntype addPacksACType = ReturnType<typeof addPacksAC>\nexport type ActionsPacksType = setLoadingStatusAT | setAppErrorAT | getPacksACType | addPacksACType\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsPacksType>\n\n\nconst setPacks = \"packs/SET-PACKS\"\nconst addPack = \"packs/ADD-PACK\"\n\nexport const initState: Array<PackType> = []\n\nexport const packsReducer = (state: InitStateType = initState, action: ActionsPacksType): InitStateType => {\n    switch (action.type) {\n        case \"packs/SET-PACKS\": {\n            return action.packs;\n        }\n        default: {\n            return state\n        }\n    }\n}\n\nexport const getPacksAC = (packs: Array<PackType>) => ({\n    type: setPacks, packs\n} as const)\nexport const addPacksAC = () => ({\n    type: addPack\n} as const)\n\n//thunk\nexport const fetchPacksTC = (): ThunkType => {\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsPacksType>) => {\n        dispatch(setLoadingStatusAC('loading'))\n        packsAPI.getPacks()\n            .then((res) => {\n                dispatch(getPacksAC(res.data.cardPacks))\n                dispatch(setLoadingStatusAC('idle'))\n            })\n            .catch((e) => {\n                dispatch(setLoadingStatusAC('idle'))\n                const error = e.response ? e.response.data.error : e.message\n                dispatch(setAppErrorAC(error))\n            })\n    }\n}\n\nexport const AddPackTC = (name: string, isPrivate: boolean): ThunkType => {\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsPacksType>) => {\n        dispatch(setLoadingStatusAC('loading'));\n        packsAPI.addPack(name, isPrivate)\n            .then((res) => {\n                // dispatch(addPacksAC())\n                dispatch(fetchPacksTC())\n                dispatch(setLoadingStatusAC('idle'))\n            })\n            .catch((e) => {\n                dispatch(setLoadingStatusAC('idle'))\n                const error = e.response ? e.response.data.error : e.message\n                dispatch(setAppErrorAC(error))\n            })\n    }\n}\n\n\n\n\n","import React, {useEffect} from 'react';\nimport Packs from \"./Packs\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../store/store\";\nimport {PackType} from \"../../api/cardsAPI\";\nimport {AddPackTC, fetchPacksTC} from \"../../store/packsReducer\";\nimport {Redirect} from \"react-router-dom\";\n\n\nfunction PacksContainer() {\n    const dispatch = useDispatch()\n    const packs = useSelector<AppRootStateType, Array<PackType>>(state => state.Packs)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.LogIn.isLoggedIn);\n    useEffect(() => {\n        dispatch(fetchPacksTC())\n    }, [])\n\n    if (!isLoggedIn) {\n        return <Redirect to={\"/login\"}/>\n    }\n    const addPacks = () => {\n        dispatch(AddPackTC(\"NewName\", false))\n    }\n\n    return (\n\n        <Packs packs = {packs} onClickHandler = {addPacks}/>\n    )\n}\n\nexport default PacksContainer","import React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n/*import s from './App.module.css';*/\nimport Error404 from './pages/Error404/Error404';\nimport {LogIn} from './pages/LogIn/LogIn';\nimport SetNewPassword from \"../src/pages/SetNewPassword/SetNewPassword\";\nimport RecoveryPassword from \"./pages/RecoveryPassword/RecoveryPassword\";\nimport SignUp from './pages/SignUp/SignUp';\nimport LoadingLine from './common/LoadingLine/LoadingLine';\nimport {ErrorSnackbar} from './common/ErrorSnackbar/ErrorSnackbar';\nimport EditProfile from \"./pages/EditProfile/EditProfile\";\nimport Header from \"./pages/Header/Header\";\nimport ProfileContainer from \"./pages/Profile/ProfileContainer\";\nimport StartPage from \"./pages/StartPage/StartPage\";\nimport PacksContainer from \"./pages/Packs/PacksContainer\";\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <LoadingLine/>\n            <Switch>\n                <Route exact path={'/'} render={() => <StartPage/>}/>\n                <Route path={'/SetNewPassword/:token'} render={() => <SetNewPassword/>}/>\n                <Route path={'/Error404'} render={() => <Error404/>}/>\n                <Route path={'/login'} render={() => <LogIn/>}/>\n                <Route path={'/Profile'} render={() => <ProfileContainer/>}/>\n                <Route path={'/RecoveryPassword'} render={() => <RecoveryPassword/>}/>\n                <Route path={'/SignUp'} render={() => <SignUp/>}/>\n                <Route path={'/EditProfile'} render={() => <EditProfile/>}/>\n                <Route path={'/Packs'} render={() => <PacksContainer/>}/>\n                <Redirect from={'*'} to={'/error404'}/>\n            </Switch>\n            <ErrorSnackbar/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunkMiddleware from \"redux-thunk\";\nimport {appReducer} from \"./appReducer\";\nimport {setNewPasswordReducer} from \"./setNewPasswordReducer\";\nimport {LogInReducer} from \"./logInReducer\";\nimport {ProfileReducer} from \"./profileReducer\";\nimport {RecoveryPasswordReducer} from \"./recoveryPasswordReducer\";\nimport {SignUpReducer} from \"./signUpReducer\";\nimport {packsReducer} from \"./packsReducer\";\n\n// объединяя reducer-ы с помощью combineReducers,\nconst rootReducer = combineReducers({\n    app: appReducer,\n    setNewPassword: setNewPasswordReducer,\n    LogIn: LogInReducer,\n    Profile: ProfileReducer,\n    RecoveryPassword: RecoveryPasswordReducer,\n    SignUp: SignUpReducer,\n    Packs: packsReducer,\n})\n\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter } from 'react-router-dom';\nimport {store} from \"./store/store\";\nimport { Provider } from 'react-redux';\n\n// commit connection\n\n\n//coment\n\n//3\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerBlock\":\"Haeder_headerBlock__178d3\",\"nav\":\"Haeder_nav__OVEeX\",\"item\":\"Haeder_item__3r0Ki\",\"activeLink\":\"Haeder_activeLink__2UUEV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Profile_background__Cr95E\",\"blockContainer\":\"Profile_blockContainer__3vd-8\",\"imgContainer\":\"Profile_imgContainer__shH_q\",\"text\":\"Profile_text__24QG7\",\"button\":\"Profile_button__1Rl1o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"StartPage_background__1DYp4\",\"test\":\"StartPage_test__24Dyg\"};"],"sourceRoot":""}