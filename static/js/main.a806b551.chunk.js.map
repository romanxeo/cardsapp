{"version":3,"sources":["pages/RecoveryPassword/RecoveryPassword.module.css","pages/SignUp/SignUp.module.css","common/LoadingLine/LoadingLine.module.css","common/commonStyles.module.css","pages/Error404/Error404.tsx","store/appReducer.ts","api/cardsAPI.ts","store/profileReducer.ts","store/logInReducer.ts","pages/LogIn/LogIn.tsx","store/setNewPasswordReducer.ts","pages/SetNewPassword/SetNewPassword.tsx","assets/icon/iconEmail.png","store/recoveryPasswordReducer.ts","pages/RecoveryPassword/RecoveryPassword.tsx","store/signUpReducer.ts","pages/SignUp/SignUp.tsx","common/LoadingLine/LoadingLine.tsx","common/ErrorSnackbar/ErrorSnackbar.tsx","pages/EditProfile/EditProfile.tsx","pages/Header/Header.tsx","pages/Profile/Profile.tsx","pages/Profile/ProfileContainer.tsx","pages/StartPage/StartPage.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx","pages/Header/Haeder.module.css","pages/Profile/Profile.module.css","pages/StartPage/StartPage.module.css"],"names":["module","exports","Error404","setLoadingStatusAC","statusRequest","type","setAppErrorAC","error","initState","status","instance","axios","create","baseURL","withCredentials","cardsAPI","email","payload","from","message","post","data","password","resetPasswordToken","delete","name","avatar","setUserData","setUserDataAC","initialState","isLoggedIn","setIsLoggedInAC","value","LogIn","dispatch","useDispatch","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","then","res","catch","resetForm","useSelector","state","to","Grid","container","justifyContent","item","FormControl","FormLabel","href","target","handleSubmit","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","checked","Button","variant","buttonDisabledAC","buttonDisabled","completed","SetNewPassword","setNewPassword","token","useParams","confirmPassword","err","className","cs","background","blockContainer","text","formControl","form","size","buttonBlock","button","disabled","RecoveryPassword","src","iconEmail","s","icon","navlink","SignUp","LoadingLine","app","loadingStyle","LinearProgress","Alert","props","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","EditProfile","Header","history","useHistory","headerBlock","nav","activeClassName","activeLink","onClick","push","Profile","imgContainer","alt","onClickHandler","ProfileContainer","e","response","StartPage","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","copyState","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a806b551.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navlink\":\"RecoveryPassword_navlink__2li2B\",\"icon\":\"RecoveryPassword_icon__I20tP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navlink\":\"SignUp_navlink__2-f5j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingStyle\":\"LoadingLine_loadingStyle__1uG-p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"commonStyles_background__20Fo_\",\"blockContainer\":\"commonStyles_blockContainer__3gIFf\",\"form\":\"commonStyles_form__nev2b\",\"text\":\"commonStyles_text__lIUVT\",\"formControl\":\"commonStyles_formControl__35-EK\",\"button\":\"commonStyles_button__1-WTl\",\"buttonBlock\":\"commonStyles_buttonBlock__jqV0Y\"};","import React from 'react';\r\n\r\nfunction Error404() {\r\n    return (\r\n        <div>\r\n            Error404\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error404","export type RequestStatusType = 'idle' | 'loading'\r\n\r\nexport const setLoadingStatusAC = (statusRequest: RequestStatusType) => {\r\n    return {\r\n        type: \"APP/SET-STATUS\",\r\n        statusRequest\r\n    } as const\r\n}\r\n\r\nexport const setAppErrorAC = (error: null | string) => {\r\n    return {\r\n        type: \"APP/SET-ERROR\",\r\n        error\r\n    } as const\r\n}\r\n\r\nexport type setLoadingStatusAT = ReturnType<typeof setLoadingStatusAC>\r\nexport type setAppErrorAT = ReturnType<typeof setAppErrorAC>\r\n\r\nexport type actionAppType = setLoadingStatusAT | setAppErrorAT\r\n\r\nexport const initState = {\r\n    status: 0,\r\n    error: null as null | string\r\n\r\n}\r\n\r\ntype InitStateType = typeof initState\r\n\r\nexport const appReducer = (state: InitStateType = initState, action: actionAppType): InitStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-STATUS\": {\r\n            let copyState = {...state};\r\n            if (action.statusRequest === 'loading') {\r\n                copyState.status++\r\n            } else {\r\n                copyState.status--\r\n            }\r\n            return copyState\r\n        }\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    withCredentials: true,\r\n})\r\n\r\nexport const cardsAPI = {\r\n    forgotPassword(email: string) {\r\n        const payload = {\r\n            email,\r\n            from: `test-front-admin <romanxeo@gmail.com>`,\r\n            message: `<div style=\"background-color: #a3c486; padding: 10px\">\r\n                        password recovery link: \r\n                        <a href='http://localhost:3000/#/SetNewPassword/$token$'>\r\n                        link local</a>\r\n                        <a href='https://romanxeo.github.io/cardsapp/#/SetNewPassword/$token$'>\r\n                        link gh-pages</a></div>`\r\n        }\r\n        const promise = instance.post<any>('auth/forgot', payload);\r\n        return promise;\r\n    },\r\n\r\n    login(data: LoginParamsType) {\r\n        return instance.post<UserDataType>(`/auth/login`, data)\r\n    },\r\n\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        const payload = {\r\n            password,\r\n            resetPasswordToken\r\n        }\r\n        const promise = instance.post<any>('auth/set-new-password', payload);\r\n        return promise;\r\n    },\r\n\r\n    register(email: string, password: string) {\r\n        const payload = {\r\n            email,\r\n            password\r\n        }\r\n        const promise = instance.post<any>('auth/register', payload);\r\n        return promise;\r\n    },\r\n    me() {\r\n        return instance.post <UserDataType>(`auth/me`)\r\n    },\r\n    logOut() {\r\n        return instance.delete<any>('auth/me')\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type UserDataType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    rememberMe?: boolean\r\n    avatar?: string\r\n}","import {Dispatch} from 'redux'\r\nimport {cardsAPI} from \"../api/cardsAPI\";\r\nimport {setAppErrorAC, setAppErrorAT, setLoadingStatusAC, setLoadingStatusAT} from \"./appReducer\";\r\n\r\n\r\nexport type SetUserDataACType = ReturnType<typeof setUserDataAC>\r\n\r\nexport type ActionProfileType = SetUserDataACType |  setLoadingStatusAT | setAppErrorAT\r\ntype ThunkDispatch = Dispatch<ActionProfileType>\r\n\r\nexport const initState = {\r\n    name: \"\",\r\n    avatar: \"\",\r\n}\r\n\r\ntype InitStateType = typeof initState\r\n\r\nexport const setUserData = \"profile/SET-USER-DATA\"\r\n\r\nexport const ProfileReducer = (state: InitStateType = initState, action: ActionProfileType): InitStateType => {\r\n    switch (action.type) {\r\n        case setUserData: {\r\n            return {...state, name: action.name, avatar: action.avatar}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const setUserDataAC = (name: string, avatar: string) => ({\r\n    type: setUserData, name, avatar\r\n} as const)\r\n\r\n\r\n// thunks\r\nexport const setUserDataTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setLoadingStatusAC('loading'))\r\n        cardsAPI.me()\r\n            .then((res) => {\r\n                dispatch(setUserDataAC(res.data.name, res.data.avatar ? res.data.avatar : \"\"))\r\n                dispatch(setLoadingStatusAC('idle'))\r\n            })\r\n            .catch((e) => {\r\n                dispatch(setLoadingStatusAC('idle'))\r\n                const error = e.response ? e.response.data.error : \"some unknown error\"\r\n                dispatch(setAppErrorAC(error))\r\n\r\n            })\r\n    }\r\n\r\n}","import {setLoadingStatusAC, setAppErrorAC, setLoadingStatusAT, setAppErrorAT} from './appReducer'\r\nimport {LoginParamsType, cardsAPI} from \"../api/cardsAPI\";\r\nimport {setUserDataAC, SetUserDataACType} from \"./profileReducer\";\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const LogInReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: any) => {\r\n    dispatch(setLoadingStatusAC('loading'))\r\n    cardsAPI.login(data)\r\n        .then((res) => {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setLoadingStatusAC('idle'))\r\n            dispatch(setUserDataAC(res.data.name, res.data.avatar ? res.data.avatar : \"\"))\r\n        })\r\n        .catch((error) => {\r\n            //dispatch(setAppErrorAC('dfdgfd'))\r\n            dispatch(setLoadingStatusAC('idle'))\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setLoadingStatusAC('loading'))\r\n    cardsAPI.logOut()\r\n        .then((res) => {\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setLoadingStatusAC('idle'))\r\n            dispatch(setUserDataAC(\"\",\"\"))\r\n        })\r\n        .catch((error) => {\r\n            dispatch(setLoadingStatusAC('idle'))\r\n            dispatch(setAppErrorAC(\"some error\"))\r\n        })\r\n\r\n\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | setLoadingStatusAT | SetUserDataACType | setAppErrorAT\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../store/logInReducer\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const LogIn = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Поле пароль обязательно';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Длина пароля должна быть больше 3 символов';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean> (state => state.LogIn.isLoggedIn)\r\n\r\n    if (isLoggedIn) {\r\n        return (\r\n            <Redirect to={'/profile'}/>\r\n        )\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n\r\n                        {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                            checked={formik.values.rememberMe}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n\r\n\r\n","import {cardsAPI} from \"../api/cardsAPI\";\r\nimport {setAppErrorAC, setLoadingStatusAC} from \"./appReducer\";\r\n\r\nconst buttonDisabledAC = (buttonDisabled: boolean) => {\r\n    return {\r\n        type: \"SET-NEW-PASSWORD/BUTTON-DISABLED\",\r\n        buttonDisabled\r\n    } as const\r\n}\r\n\r\nconst completedRequestAC = (completed: boolean) => {\r\n    return {\r\n        type: \"SET-NEW-PASSWORD/COMPLETED-REQUEST\",\r\n        completed\r\n    } as const\r\n}\r\n\r\nexport type buttonDisabledAT = ReturnType<typeof buttonDisabledAC>\r\nexport type completedRequestAT = ReturnType<typeof completedRequestAC>\r\n\r\nexport type actionSetNewPasswordType =\r\n    buttonDisabledAT | completedRequestAT\r\n\r\nexport const initState = {\r\n    completed: false,\r\n    buttonDisabled: false\r\n}\r\n\r\ntype InitStateType = typeof initState\r\n\r\nexport const setNewPasswordReducer = (state: InitStateType = initState, action: actionSetNewPasswordType): InitStateType => {\r\n    switch (action.type) {\r\n        case \"SET-NEW-PASSWORD/BUTTON-DISABLED\": {\r\n            return {...state, buttonDisabled: action.buttonDisabled}\r\n        }\r\n        case \"SET-NEW-PASSWORD/COMPLETED-REQUEST\": {\r\n            return {...state, completed: action.completed}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//thunk\r\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => {\r\n    return (dispatch: any) => {\r\n        dispatch(buttonDisabledAC(true))\r\n        dispatch(setLoadingStatusAC('loading'))\r\n        cardsAPI.setNewPassword(password, resetPasswordToken)\r\n            .then(res => {\r\n                dispatch(buttonDisabledAC(false))\r\n                dispatch(setLoadingStatusAC('idle'))\r\n                dispatch(completedRequestAC(true))\r\n            })\r\n            .catch(err => {\r\n                //console.log(err)\r\n                dispatch(setAppErrorAC('ERROR'))\r\n                dispatch(buttonDisabledAC(false))\r\n                dispatch(setLoadingStatusAC('idle'))\r\n            })\r\n    }\r\n}\r\n","import React from 'react';\r\n//import s from './RecoveryPassword.module.css';\r\nimport cs from '../../common/commonStyles.module.css'\r\nimport {useFormik} from \"formik\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {setNewPasswordTC} from \"../../store/setNewPasswordReducer\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    password?: string\r\n    confirmPassword?: string\r\n}\r\n\r\nconst SetNewPassword = () => {\r\n\r\n    let completed = useSelector<AppRootStateType, boolean>(state => state.setNewPassword.completed)\r\n    let buttonDisabled = useSelector<AppRootStateType, boolean>(state => state.setNewPassword.buttonDisabled)\r\n    const {token} = useParams<{ token: string }>()\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            confirmPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password) {\r\n                errors.password = 'ПУСТО';\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'БОЛЬШЕ ТРЕХ СИМВОЛОВ ДОЛЖНО БЫТЬ';\r\n            }\r\n\r\n            if (values.password !== values.confirmPassword) {\r\n                errors.confirmPassword = 'ПАРОЛИ НЕ СОВПАДАЮТ'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(setNewPasswordTC(values.password, token))\r\n        }\r\n    })\r\n\r\n    if (completed) {\r\n        return (\r\n            <Redirect to={'/login'}/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={cs.background}>\r\n            <div className={cs.blockContainer}>\r\n                <h2 className={cs.text}>It-incubator</h2>\r\n                <h3 className={cs.text}>Create new password</h3>\r\n                <FormControl className={cs.formControl}>\r\n                    <form onSubmit={formik.handleSubmit} className={cs.form}>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                variant={\"outlined\"}\r\n                                size={'small'}\r\n                                label='password'\r\n                                margin=\"normal\"\r\n                                type=\"password\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n\r\n                            <div style={{'height': '20px'}}>\r\n                                {formik.touched.password && formik.errors.password &&\r\n                                <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                            </div>\r\n\r\n                            <TextField\r\n                                variant={\"outlined\"}\r\n                                size={'small'}\r\n                                label='confirmPassword'\r\n                                margin=\"normal\"\r\n                                type=\"password\"\r\n                                {...formik.getFieldProps('confirmPassword')}\r\n                            />\r\n\r\n                            <div style={{'height': '20px'}}>\r\n                                {formik.touched.confirmPassword && formik.errors.confirmPassword &&\r\n                                <div style={{color: 'red'}}>{formik.errors.confirmPassword}</div>}\r\n                            </div>\r\n\r\n                            <p>Create new password and we will send you further instructions to E-mail</p>\r\n\r\n                            <div className={cs.buttonBlock}>\r\n                                <Button\r\n                                    className={cs.button}\r\n                                    type={'submit'}\r\n                                    variant={'contained'}\r\n                                    color={'primary'}\r\n                                    size={'small'}\r\n                                    disabled={buttonDisabled}\r\n                                >\r\n                                    Create new password\r\n                                </Button>\r\n                            </div>\r\n\r\n                        </FormGroup>\r\n                    </form>\r\n                </FormControl>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SetNewPassword","export default __webpack_public_path__ + \"static/media/iconEmail.f254994b.png\";","import {cardsAPI} from \"../api/cardsAPI\";\r\nimport {setAppErrorAC, setLoadingStatusAC} from \"./appReducer\";\r\n\r\nconst buttonDisabledAC = (buttonDisabled: boolean) => {\r\n    return {\r\n        type: \"RECOVERY-PASSWORD/BUTTON-DISABLED\",\r\n        buttonDisabled\r\n    } as const\r\n}\r\n\r\nconst completedRequestAC = (completed: boolean) => {\r\n    return {\r\n        type: \"RECOVERY-PASSWORD/COMPLETED-REQUEST\",\r\n        completed\r\n    } as const\r\n}\r\n\r\nexport type buttonDisabledAT = ReturnType<typeof buttonDisabledAC>\r\nexport type completedRequestAT = ReturnType<typeof completedRequestAC>\r\n\r\nexport type actionRecoveryPasswordType =\r\n    buttonDisabledAT | completedRequestAT\r\n\r\nexport const initState = {\r\n    completed: false,\r\n    buttonDisabled: false\r\n}\r\n\r\ntype InitStateType = typeof initState\r\n\r\nexport const RecoveryPasswordReducer = (state: InitStateType = initState, action: actionRecoveryPasswordType): InitStateType => {\r\n    switch (action.type) {\r\n        case \"RECOVERY-PASSWORD/BUTTON-DISABLED\": {\r\n            return {...state, buttonDisabled: action.buttonDisabled}\r\n        }\r\n        case \"RECOVERY-PASSWORD/COMPLETED-REQUEST\": {\r\n            return {...state, completed: action.completed}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n//thunk\r\nexport const forgotPasswordTC = (email: string) => {\r\n    return (dispatch: any) => {\r\n        dispatch(buttonDisabledAC(true))\r\n        dispatch(setLoadingStatusAC('loading'))\r\n        cardsAPI.forgotPassword(email)\r\n            .then(res => {\r\n                dispatch(buttonDisabledAC(false))\r\n                dispatch(setLoadingStatusAC('idle'))\r\n                dispatch(completedRequestAC(true))\r\n            })\r\n            .catch(err => {\r\n                dispatch(setAppErrorAC('E-mail not found'))\r\n                dispatch(buttonDisabledAC(false))\r\n                dispatch(setLoadingStatusAC('idle'))\r\n            })\r\n    }\r\n}","import React from 'react';\r\nimport s from './RecoveryPassword.module.css';\r\nimport cs from '../../common/commonStyles.module.css'\r\nimport {useFormik} from \"formik\";\r\nimport iconEmail from '../../assets/icon/iconEmail.png'\r\nimport TextField  from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {forgotPasswordTC} from '../../store/recoveryPasswordReducer';\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nfunction RecoveryPassword() {\r\n    let completed = useSelector<AppRootStateType, boolean>(state => state.RecoveryPassword.completed)\r\n    let buttonDisabled = useSelector<AppRootStateType, boolean>(state => state.RecoveryPassword.buttonDisabled)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(forgotPasswordTC(values.email))\r\n\r\n\r\n\r\n            //setCompleted(true)\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n\r\n    if (completed) {\r\n        return (\r\n            <div className={cs.background}>\r\n                <div className={cs.blockContainer}>\r\n                    <div className={cs.form}>\r\n                        <h2 className={cs.text}>It-incubator</h2>\r\n                        <img src={iconEmail} className={s.icon}/>\r\n                        <h3 className={cs.text}>Check E-mail</h3>\r\n                        <p className={cs.text}>We have sent instructions to your E-mail how to recover your password</p>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className={cs.background}>\r\n                <div className={cs.blockContainer}>\r\n                    <h2 className={cs.text}>It-incubator</h2>\r\n                    <h3 className={cs.text}>Forgot your password?</h3>\r\n                    <FormControl className={cs.formControl}>\r\n                        <form onSubmit={formik.handleSubmit} className={cs.form}>\r\n                            <FormGroup>\r\n                                <TextField\r\n                                    variant={\"outlined\"}\r\n                                    size={'small'}\r\n                                    label='E-mail'\r\n                                    margin=\"normal\"\r\n                                    {...formik.getFieldProps('email')}\r\n                                />\r\n\r\n                                <div style={{'height': '20px'}}>\r\n                                    {formik.touched.email && formik.errors.email &&\r\n                                    <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                                </div>\r\n\r\n                                <p>Enter your e-mail address and we will send you further instructions</p>\r\n\r\n                                <div className={cs.buttonBlock}>\r\n                                    <Button\r\n                                        className={cs.button}\r\n                                        type={'submit'}\r\n                                        variant={'contained'}\r\n                                        color={'primary'}\r\n                                        size={'small'}\r\n                                        disabled={buttonDisabled}\r\n                                    >\r\n                                        Send instructions\r\n                                    </Button>\r\n                                </div>\r\n\r\n                                <p>Did you remember your password?</p>\r\n\r\n                                <div className={cs.buttonBlock}>\r\n                                    <nav>\r\n                                        <NavLink\r\n                                            className={s.navlink}\r\n                                            to=\"/login\"\r\n                                        >\r\n                                            Try logging in\r\n                                        </NavLink>\r\n                                    </nav>\r\n                                </div>\r\n                            </FormGroup>\r\n                        </form>\r\n                    </FormControl>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RecoveryPassword","import {cardsAPI} from \"../api/cardsAPI\";\r\nimport {setAppErrorAC, setLoadingStatusAC} from \"./appReducer\";\r\n\r\nconst buttonDisabledAC = (buttonDisabled: boolean) => {\r\n    return {\r\n        type: \"SIGN-UP/BUTTON-DISABLED\",\r\n        buttonDisabled\r\n    } as const\r\n}\r\n\r\nconst completedRequestAC = (completed: boolean) => {\r\n    return {\r\n        type: \"SIGN-UP/COMPLETED-REQUEST\",\r\n        completed\r\n    } as const\r\n}\r\n\r\nexport type buttonDisabledAT = ReturnType<typeof buttonDisabledAC>\r\nexport type completedRequestAT = ReturnType<typeof completedRequestAC>\r\n\r\nexport type actionSignUpType =\r\n    buttonDisabledAT | completedRequestAT\r\n\r\nexport const initState = {\r\n    completed: false,\r\n    buttonDisabled: false\r\n}\r\n\r\ntype InitStateType = typeof initState\r\n\r\nexport const SignUpReducer = (state: InitStateType = initState, action: actionSignUpType): InitStateType => {\r\n    switch (action.type) {\r\n        case \"SIGN-UP/BUTTON-DISABLED\": {\r\n            return {...state, buttonDisabled: action.buttonDisabled}\r\n        }\r\n        case \"SIGN-UP/COMPLETED-REQUEST\": {\r\n            return {...state, completed: action.completed}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n//thunk\r\nexport const registerTC = (email: string, password: string) => {\r\n    return (dispatch: any) => {\r\n        dispatch(buttonDisabledAC(true))\r\n        dispatch(setLoadingStatusAC('loading'))\r\n        cardsAPI.register(email, password)\r\n            .then(res => {\r\n                dispatch(buttonDisabledAC(false))\r\n                dispatch(setLoadingStatusAC('idle'))\r\n                dispatch(completedRequestAC(true))\r\n            })\r\n            .catch(err => {\r\n                dispatch(setAppErrorAC('unknown error'))\r\n                dispatch(buttonDisabledAC(false))\r\n                dispatch(setLoadingStatusAC('idle'))\r\n            })\r\n    }\r\n}","import React from 'react';\r\nimport s from './SignUp.module.css';\r\nimport cs from '../../common/commonStyles.module.css'\r\nimport {useFormik} from \"formik\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {registerTC} from \"../../store/signUpReducer\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string,\r\n    password?: string,\r\n    confirmPassword?: string\r\n}\r\n\r\nconst SignUp = () => {\r\n\r\n    let completed = useSelector<AppRootStateType, boolean>(state => state.SignUp.completed)\r\n    let buttonDisabled = useSelector<AppRootStateType, boolean>(state => state.SignUp.buttonDisabled)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'ПУСТО';\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'БОЛЬШЕ ТРЕХ СИМВОЛОВ ДОЛЖНО БЫТЬ';\r\n            }\r\n\r\n            if (values.password !== values.confirmPassword) {\r\n                errors.confirmPassword = 'ПАРОЛИ НЕ СОВПАДАЮТ'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(registerTC(values.email, values.password))\r\n        }\r\n    })\r\n\r\n    if (completed) {\r\n        return (\r\n            <Redirect to={'/login'}/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={cs.background}>\r\n            <div className={cs.blockContainer}>\r\n                <h2 className={cs.text}>It-incubator</h2>\r\n                <h3 className={cs.text}>Sign Up</h3>\r\n                <FormControl className={cs.formControl}>\r\n                    <form onSubmit={formik.handleSubmit} className={cs.form}>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                variant={\"outlined\"}\r\n                                size={'small'}\r\n                                label='email'\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n\r\n                            <div style={{'height': '20px'}}>\r\n                                {formik.touched.email && formik.errors.email &&\r\n                                <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                            </div>\r\n\r\n                            <TextField\r\n                                variant={\"outlined\"}\r\n                                size={'small'}\r\n                                label='password'\r\n                                margin=\"normal\"\r\n                                type=\"password\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n\r\n                            <div style={{'height': '20px'}}>\r\n                                {formik.touched.password && formik.errors.password &&\r\n                                <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                            </div>\r\n\r\n                            <TextField\r\n                                variant={\"outlined\"}\r\n                                size={'small'}\r\n                                label='confirmPassword'\r\n                                margin=\"normal\"\r\n                                type=\"password\"\r\n                                {...formik.getFieldProps('confirmPassword')}\r\n                            />\r\n\r\n                            <div style={{'height': '20px'}}>\r\n                                {formik.touched.confirmPassword && formik.errors.confirmPassword &&\r\n                                <div style={{color: 'red'}}>{formik.errors.confirmPassword}</div>}\r\n                            </div>\r\n\r\n                            <div className={cs.buttonBlock}>\r\n                                <Button\r\n                                    className={cs.button}\r\n                                    type={'submit'}\r\n                                    variant={'contained'}\r\n                                    color={'primary'}\r\n                                    size={'small'}\r\n                                    disabled={buttonDisabled}\r\n                                >\r\n                                    Register\r\n                                </Button>\r\n\r\n\r\n                            </div>\r\n\r\n                            <div className={cs.buttonBlock}>\r\n                                <nav>\r\n                                    <NavLink\r\n                                        className={s.navlink}\r\n                                        to=\"/login\"\r\n                                    >\r\n                                        Login\r\n                                    </NavLink>\r\n                                </nav>\r\n                            </div>\r\n\r\n                        </FormGroup>\r\n                    </form>\r\n                </FormControl>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUp","import React from 'react'\r\nimport s from './LoadingLine.module.css'\r\nimport LinearProgress from '@mui/material/LinearProgress'\r\nimport { useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../store/store'\r\n\r\nconst LoadingLine = () => {\r\n\r\n    let status = useSelector<AppRootStateType, number>(state => state.app.status)\r\n\r\n    return (\r\n        <div className={s.loadingStyle}>\r\n            {status !== 0 && <LinearProgress color={\"secondary\"}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoadingLine","import React from 'react'\r\n//import Snackbar from '@mui/material/Snackbar'\r\n//import Alert, {AlertProps} from '@mui/material/Alert';\r\n//import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {setAppErrorAC} from \"../../store/appReducer\";\r\n\r\n\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    let error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar\r\n            open={error !== null}\r\n            autoHideDuration={6000}\r\n            onClose={handleClose}\r\n        >\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nfunction EditProfile() {\r\n    return (\r\n        <div>\r\n            Edit profile\r\n        </div>\r\n    )\r\n}\r\nexport default EditProfile","import React from \"react\";\r\nimport {NavLink, useHistory} from \"react-router-dom\";\r\nimport s from './Haeder.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {logoutTC, setIsLoggedInAC} from \"../../store/logInReducer\";\r\n\r\n\r\nfunction Header() {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.LogIn.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(logoutTC())\r\n        dispatch(setIsLoggedInAC(false))\r\n        history.push('/login');\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.headerBlock}>\r\n\r\n                <nav className={s.nav}>\r\n                    {!isLoggedIn && <div className={s.item}>\r\n                        <NavLink to={'/login'} activeClassName={s.activeLink}>Login</NavLink>\r\n                    </div>}\r\n                    {!isLoggedIn && <div className={s.item}>\r\n                        <NavLink to={'/SignUp'} activeClassName={s.activeLink}>SignUp</NavLink>\r\n                    </div>}\r\n                    {!isLoggedIn && <div className={s.item}>\r\n                        <NavLink to={'/RecoveryPassword'} activeClassName={s.activeLink}>Recovery password</NavLink>\r\n                    </div>}\r\n                    {/*{isLoggedIn && <div className={s.item}>*/}\r\n                    {/*    <NavLink to={'/Profile'} activeClassName={s.activeLink}>Profile</NavLink>*/}\r\n                    {/*</div>}*/}\r\n                    {isLoggedIn && <div className={s.item}>\r\n                        <Button variant={'contained'}\r\n                                color={\"primary\"}\r\n                                size={\"small\"}\r\n                                onClick={onClickHandler}\r\n                        >Log out</Button>\r\n                    </div>}\r\n\r\n\r\n                </nav>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport s from \"./Profile.module.css\"\r\nimport Button from '@material-ui/core/Button';\r\n\r\ntype ProfilePropsType = {\r\n    name: string\r\n    avatar?: string\r\n    onClickHandler: () => void\r\n}\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n\r\n    return (\r\n        <div className={s.background}>\r\n            <div className={s.blockContainer}>\r\n                <div className={s.imgContainer}><img src={props.avatar} alt={props.name}/></div>\r\n                <div className={s.text}>{props.name}</div>\r\n                <div className={s.button}>\r\n                    <Button\r\n                        variant={'contained'}\r\n                        color={\"primary\"}\r\n                        size={\"small\"}\r\n                        onClick={props.onClickHandler}>\r\n                        Edit profile\r\n                    </Button>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {setUserDataTC} from \"../../store/profileReducer\";\r\nimport {Redirect, useHistory} from \"react-router-dom\";\r\nimport {setIsLoggedInAC} from \"../../store/logInReducer\";\r\nimport Profile from \"./Profile\";\r\n\r\nfunction ProfileContainer() {\r\n    const dispatch = useDispatch()\r\n\r\n    const name = useSelector<AppRootStateType, string>(state => state.Profile.name);\r\n    const avatar = useSelector<AppRootStateType, string>(state => state.Profile.avatar);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.LogIn.isLoggedIn);\r\n    const history = useHistory();\r\n\r\n    const onClickHandler = () => {\r\n        history.push('/EditProfile');\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        dispatch(setUserDataTC());\r\n        if (!name) {\r\n            return <Redirect to={\"/login\"}/>\r\n        } else {\r\n            dispatch(setIsLoggedInAC(true))\r\n        }\r\n\r\n    }\r\n    return <Profile name={name} avatar={avatar} onClickHandler={onClickHandler}/>\r\n\r\n\r\n}\r\n\r\nexport default ProfileContainer","import React from 'react';\r\nimport s from './StartPage.module.css'\r\n\r\nfunction StartPage() {\r\n\r\n    return (\r\n        <div className={s.background}>\r\n            <h1 className={s.test}>Hi! We glad to see you! </h1>\r\n            <h2 className={s.test}> This is application for learning with cards. </h2>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default StartPage;","import React from 'react';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\n/*import s from './App.module.css';*/\r\nimport Error404 from './pages/Error404/Error404';\r\nimport {LogIn} from './pages/LogIn/LogIn';\r\nimport SetNewPassword from \"../src/pages/SetNewPassword/SetNewPassword\";\r\nimport RecoveryPassword from \"./pages/RecoveryPassword/RecoveryPassword\";\r\nimport SignUp from './pages/SignUp/SignUp';\r\nimport LoadingLine from './common/LoadingLine/LoadingLine';\r\nimport {ErrorSnackbar} from './common/ErrorSnackbar/ErrorSnackbar';\r\nimport EditProfile from \"./pages/EditProfile/EditProfile\";\r\nimport Header from \"./pages/Header/Header\";\r\nimport ProfileContainer from \"./pages/Profile/ProfileContainer\";\r\nimport StartPage from \"./pages/StartPage/StartPage\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <LoadingLine/>\r\n            <Switch>\r\n                <Route exact path={'/'} render={() => <StartPage/>}/>\r\n                <Route path={'/SetNewPassword/:token'} render={() => <SetNewPassword/>}/>\r\n                <Route path={'/Error404'} render={() => <Error404/>}/>\r\n                <Route path={'/login'} render={() => <LogIn/>}/>\r\n                <Route path={'/Profile'} render={() => <ProfileContainer/>}/>\r\n                <Route path={'/RecoveryPassword'} render={() => <RecoveryPassword/>}/>\r\n                <Route path={'/SignUp'} render={() => <SignUp/>}/>\r\n                <Route path={'/EditProfile'} render={() => <EditProfile/>}/>\r\n                <Redirect from={'*'} to={'/error404'}/>\r\n            </Switch>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from \"./appReducer\";\r\nimport {setNewPasswordReducer} from \"./setNewPasswordReducer\";\r\nimport {LogInReducer} from \"./logInReducer\";\r\nimport {ProfileReducer} from \"./profileReducer\";\r\nimport {RecoveryPasswordReducer} from \"./recoveryPasswordReducer\";\r\nimport {SignUpReducer} from \"./signUpReducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    setNewPassword: setNewPasswordReducer,\r\n    LogIn: LogInReducer,\r\n    Profile: ProfileReducer,\r\n    RecoveryPassword: RecoveryPasswordReducer,\r\n    SignUp: SignUpReducer\r\n})\r\n\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter } from 'react-router-dom';\r\nimport {store} from \"./store/store\";\r\nimport { Provider } from 'react-redux';\r\n\r\n// commit connection\r\n\r\n\r\n//coment\r\n\r\n//3\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerBlock\":\"Haeder_headerBlock__2b7JJ\",\"nav\":\"Haeder_nav__xQjmm\",\"item\":\"Haeder_item__3CdaX\",\"activeLink\":\"Haeder_activeLink__17v7Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Profile_background__2NQ7O\",\"blockContainer\":\"Profile_blockContainer__RHrsM\",\"imgContainer\":\"Profile_imgContainer__3JzgA\",\"text\":\"Profile_text__2HzNo\",\"button\":\"Profile_button__28idB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"StartPage_background__WCaXT\",\"test\":\"StartPage_test__1Jj3R\"};"],"sourceRoot":""}