{"version":3,"sources":["pages/RecoveryPassword/RecoveryPassword.module.css","pages/SignUp/SignUp.module.css","common/LoadingLine/LoadingLine.module.css","common/commonStyles.module.css","pages/Error404/Error404.tsx","store/appReducer.ts","api/cardsAPI.ts","store/profileReducer.ts","store/logInReducer.ts","pages/LogIn/LogIn.tsx","pages/Profile/Profile.tsx","store/setNewPasswordReducer.ts","pages/SetNewPassword/SetNewPassword.tsx","assets/icon/iconEmail.png","store/recoveryPasswordReducer.ts","pages/RecoveryPassword/RecoveryPassword.tsx","store/signUpReducer.ts","pages/SignUp/SignUp.tsx","common/LoadingLine/LoadingLine.tsx","common/ErrorSnackbar/ErrorSnackbar.tsx","pages/EditProfile/EditProfile.tsx","pages/Header/Header.tsx","common/c1-SuperInputText/SuperInputText.tsx","common/c2-SuperButton/SuperButton.tsx","common/c3-SuperCheckbox/SuperCheckbox.tsx","pages/TestPage/TestPage.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx","pages/Header/Haeder.module.css","pages/Profile/Profile.module.css","common/c1-SuperInputText/SuperInputText.module.css","common/c2-SuperButton/SuperButton.module.css","common/c3-SuperCheckbox/SuperCheckbox.module.css"],"names":["module","exports","Error404","setLoadingStatusAC","statusRequest","type","setAppErrorAC","error","initState","status","instance","axios","create","baseURL","withCredentials","cardsAPI","email","payload","from","message","post","data","password","resetPasswordToken","delete","name","avatar","setUserData","setUserDataAC","initialState","isLoggedIn","setIsLoggedInAC","value","LogIn","dispatch","useDispatch","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","then","res","catch","resetForm","useSelector","state","to","Grid","container","justifyContent","item","FormControl","FormLabel","href","target","handleSubmit","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","checked","Button","variant","Profile","history","useHistory","className","s","background","blockContainer","imgContainer","src","alt","text","button","size","onClick","push","buttonDisabledAC","buttonDisabled","completed","SetNewPassword","setNewPassword","token","useParams","confirmPassword","err","cs","formControl","form","buttonBlock","disabled","RecoveryPassword","iconEmail","icon","navlink","SignUp","LoadingLine","app","loadingStyle","LinearProgress","Alert","props","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","EditProfile","Header","headerBlock","nav","activeClassName","activeLink","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","spanClassName","restProps","finalSpanClassName","finalInputClassName","input","errorInput","superInput","e","currentTarget","key","SuperButton","red","finalClassName","default","SuperCheckbox","onChangeChecked","children","checkbox","TestPage","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","copyState","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.693c2d3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navlink\":\"RecoveryPassword_navlink__2tvH4\",\"icon\":\"RecoveryPassword_icon__1RGVj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navlink\":\"SignUp_navlink__2uiPT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingStyle\":\"LoadingLine_loadingStyle__1NmIM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"commonStyles_background__2q_NM\",\"blockContainer\":\"commonStyles_blockContainer__11RPC\",\"form\":\"commonStyles_form__2TPJb\",\"text\":\"commonStyles_text__3BwWT\",\"formControl\":\"commonStyles_formControl__2OASi\",\"button\":\"commonStyles_button__GPYdo\",\"buttonBlock\":\"commonStyles_buttonBlock__1A-KK\"};","import React from 'react';\n\nfunction Error404() {\n    return (\n        <div>\n            Error404\n        </div>\n    )\n}\n\nexport default Error404","export type RequestStatusType = 'idle' | 'loading'\n\nexport const setLoadingStatusAC = (statusRequest: RequestStatusType) => {\n    return {\n        type: \"APP/SET-STATUS\",\n        statusRequest\n    } as const\n}\n\nexport const setAppErrorAC = (error: null | string) => {\n    return {\n        type: \"APP/SET-ERROR\",\n        error\n    } as const\n}\n\nexport type setLoadingStatusAT = ReturnType<typeof setLoadingStatusAC>\nexport type setAppErrorAT = ReturnType<typeof setAppErrorAC>\n\nexport type actionAppType = setLoadingStatusAT | setAppErrorAT\n\nexport const initState = {\n    status: 0,\n    error: null as null | string\n}\n\ntype InitStateType = typeof initState\n\nexport const appReducer = (state: InitStateType = initState, action: actionAppType): InitStateType => {\n    switch (action.type) {\n        case \"APP/SET-STATUS\": {\n            let copyState = {...state};\n            if (action.statusRequest === 'loading') {\n                copyState.status++\n            } else {\n                copyState.status--\n            }\n            return copyState\n        }\n        case 'APP/SET-ERROR':\n            return {...state, error: action.error}\n        default: {\n            return state\n        }\n    }\n}","import axios, {AxiosResponse} from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\n    withCredentials: true,\n})\n\nexport const cardsAPI = {\n    forgotPassword(email: string) {\n        const payload = {\n            email,\n            from: `test-front-admin <romanxeo@gmail.com>`,\n            message: `<div style=\"background-color: #e3c486; padding: 10px\">\n                        password recovery link: \n                        <a href='http://localhost:3000/#/SetNewPassword/$token$'>\n                        link</a></div>`\n        }\n        const promise = instance.post<any>('auth/forgot', payload);\n        return promise;\n    },\n\n    login(data: LoginParamsType) {\n        return instance.post<UserDataType>(`/auth/login`, data)\n    },\n\n    setNewPassword(password: string, resetPasswordToken: string) {\n        const payload = {\n            password,\n            resetPasswordToken\n        }\n        const promise = instance.post<any>('auth/set-new-password', payload);\n        return promise;\n    },\n\n    register(email: string, password: string) {\n        const payload = {\n            email,\n            password\n        }\n        const promise = instance.post<any>('auth/register', payload);\n        return promise;\n    },\n    me() {\n        return instance.post <UserDataType>(`auth/me`)\n        // return Promise.resolve({_id: \"1\",    email: \"testEmail\", name: \"testName\", rememberMe: true,\n        //     avatar: \"https://pets2.me/media/res/1/3/1/9/2/13192.ozimro.300.jpg\"})\n    },\n    logOut() {\n        return instance.delete<any>('auth/me')\n    }\n}\n\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    }\n\nexport type UserDataType = {\n    _id: string\n    email: string\n    name: string\n    rememberMe?: boolean\n    avatar?: string\n}","import {Dispatch} from 'redux'\nimport {cardsAPI} from \"../api/cardsAPI\";\nimport {setAppErrorAC, setAppErrorAT, setLoadingStatusAC, setLoadingStatusAT} from \"./appReducer\";\n\n\nexport type SetUserDataACType = ReturnType<typeof setUserDataAC>\n\nexport type ActionProfileType = SetUserDataACType |  setLoadingStatusAT | setAppErrorAT\ntype ThunkDispatch = Dispatch<ActionProfileType>\n\nexport const initState = {\n    name: \"\",\n    avatar: \"\",\n}\n\ntype InitStateType = typeof initState\n\nexport const setUserData = \"profile/SET-USER-DATA\"\n\nexport const ProfileReducer = (state: InitStateType = initState, action: ActionProfileType): InitStateType => {\n    switch (action.type) {\n        case setUserData: {\n            return {...state, name: action.name, avatar: action.avatar}\n        }\n        default: {\n            return state\n        }\n    }\n}\n\nexport const setUserDataAC = (name: string, avatar: string) => ({\n    type: setUserData, name, avatar\n} as const)\n\n\n// thunks\nexport const setUserDataTC = () => {\n    return (dispatch: ThunkDispatch) => {\n        dispatch(setLoadingStatusAC('loading'))\n        cardsAPI.me()\n            .then((res) => {\n                dispatch(setUserDataAC(res.data.name, res.data.avatar ? res.data.avatar : \"\"))\n                dispatch(setLoadingStatusAC('idle'))\n            })\n            .catch(() => {\n                dispatch(setLoadingStatusAC('idle'))\n                // dispatch(setAppErrorAC('unknown error'))\n            })\n    }\n\n}","import {setLoadingStatusAC, setAppErrorAC, setLoadingStatusAT} from './appReducer'\nimport {LoginParamsType, cardsAPI} from \"../api/cardsAPI\";\nimport {setUserDataAC, SetUserDataACType} from \"./profileReducer\";\nimport {Dispatch} from 'redux';\n\n\nconst initialState = {\n    isLoggedIn: false\n}\ntype InitialStateType = typeof initialState\n\nexport const LogInReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n\n// thunks\nexport const loginTC = (data: LoginParamsType) => (dispatch: any) => {\n    dispatch(setLoadingStatusAC('loading'))\n    cardsAPI.login(data)\n        .then((res) => {\n            dispatch(setIsLoggedInAC(true))\n            dispatch(setLoadingStatusAC('idle'))\n            dispatch(setUserDataAC(res.data.name, res.data.avatar ? res.data.avatar : \"\"))\n        })\n        .catch((error) => {\n            //dispatch(setAppErrorAC('dfdgfd'))\n            dispatch(setLoadingStatusAC('idle'))\n        })\n}\n\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setLoadingStatusAC('loading'))\n    cardsAPI.logOut()\n        .then((res) => {\n            dispatch(setIsLoggedInAC(false))\n            dispatch(setLoadingStatusAC('idle'))\n            dispatch(setUserDataAC(\"\",\"\"))\n        })\n        .catch((error) => {\n            //dispatch(setAppErrorAC('dfdgfd'))\n            dispatch(setLoadingStatusAC('idle'))\n        })\n\n\n}\n\n// types\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | setLoadingStatusAT | SetUserDataACType\n","import React from 'react'\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"../../store/logInReducer\";\nimport {AppRootStateType} from \"../../store/store\";\nimport { Redirect } from 'react-router-dom';\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const LogIn = () => {\n\n    const dispatch = useDispatch();\n\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Поле пароль обязательно';\n            } else if (values.password.length < 3) {\n                errors.password = 'Длина пароля должна быть больше 3 символов';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n            formik.resetForm();\n        },\n    });\n\n    const isLoggedIn = useSelector<AppRootStateType, boolean> (state => state.LogIn.isLoggedIn)\n\n    if (isLoggedIn) {\n        return (\n            <Redirect to={'/profile'}/>\n        )\n    }\n\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <FormControl>\n                <FormLabel>\n                    <p>To log in get registered\n                        <a href={'https://social-network.samuraijs.com/'}\n                           target={'_blank'}> here\n                        </a>\n                    </p>\n                    <p>or use common test account credentials:</p>\n                    <p>Email: free@samuraijs.com</p>\n                    <p>Password: free</p>\n                </FormLabel>\n                <form onSubmit={formik.handleSubmit}>\n                    <FormGroup>\n                        <TextField label=\"Email\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps('email')}\n                        />\n\n                        {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\n\n\n                        <TextField type=\"password\"\n                                   label=\"Password\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps('password')}\n                        />\n                        {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\n\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox/>}\n                            {...formik.getFieldProps('rememberMe')}\n                            checked={formik.values.rememberMe}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </form>\n            </FormControl>\n        </Grid>\n    </Grid>\n}\n\n\n\n","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../store/store\";\nimport {setUserDataTC} from \"../../store/profileReducer\";\nimport {Redirect, useHistory} from \"react-router-dom\";\nimport s from \"./Profile.module.css\"\nimport Button from '@material-ui/core/Button';\nimport {setIsLoggedInAC} from \"../../store/logInReducer\";\n\nfunction Profile() {\n    const dispatch = useDispatch()\n\n    const name = useSelector<AppRootStateType, string>(state => state.Profile.name);\n    const avatar = useSelector<AppRootStateType, string>(state => state.Profile.avatar);\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.LogIn.isLoggedIn);\n    const history = useHistory();\n\n    const onClickHandler = () => {\n        history.push('/EditProfile');\n    }\n\n    if (!isLoggedIn) {\n        dispatch(setUserDataTC());\n        if (!name) {\n            return <Redirect to={\"/login\"}/>\n        } else {\n            dispatch(setIsLoggedInAC(true))\n        }\n\n    }\n    return (\n        <div className={s.background}>\n            <div className={s.blockContainer}>\n                <div className={s.imgContainer}><img src={avatar} alt={name}/></div>\n                <div className={s.text}>{name}</div>\n                <div className={s.button}>\n                    <Button\n                        variant={'contained'}\n                        color={\"primary\"}\n                        size={\"small\"}\n                        onClick={onClickHandler}>\n                        Edit profile\n                    </Button>\n                </div>\n\n            </div>\n\n\n        </div>\n    )\n\n}\n\nexport default Profile","import {cardsAPI} from \"../api/cardsAPI\";\nimport {setAppErrorAC, setLoadingStatusAC} from \"./appReducer\";\n\nconst buttonDisabledAC = (buttonDisabled: boolean) => {\n    return {\n        type: \"SET-NEW-PASSWORD/BUTTON-DISABLED\",\n        buttonDisabled\n    } as const\n}\n\nconst completedRequestAC = (completed: boolean) => {\n    return {\n        type: \"SET-NEW-PASSWORD/COMPLETED-REQUEST\",\n        completed\n    } as const\n}\n\nexport type buttonDisabledAT = ReturnType<typeof buttonDisabledAC>\nexport type completedRequestAT = ReturnType<typeof completedRequestAC>\n\nexport type actionSetNewPasswordType =\n    buttonDisabledAT | completedRequestAT\n\nexport const initState = {\n    completed: false,\n    buttonDisabled: false\n}\n\ntype InitStateType = typeof initState\n\nexport const setNewPasswordReducer = (state: InitStateType = initState, action: actionSetNewPasswordType): InitStateType => {\n    switch (action.type) {\n        case \"SET-NEW-PASSWORD/BUTTON-DISABLED\": {\n            return {...state, buttonDisabled: action.buttonDisabled}\n        }\n        case \"SET-NEW-PASSWORD/COMPLETED-REQUEST\": {\n            return {...state, completed: action.completed}\n        }\n        default: {\n            return state\n        }\n    }\n}\n\n\n//thunk\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => {\n    return (dispatch: any) => {\n        dispatch(buttonDisabledAC(true))\n        dispatch(setLoadingStatusAC('loading'))\n        cardsAPI.setNewPassword(password, resetPasswordToken)\n            .then(res => {\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n                dispatch(completedRequestAC(true))\n            })\n            .catch(err => {\n                //console.log(err)\n                dispatch(setAppErrorAC('ERROR'))\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n            })\n    }\n}\n","import React from 'react';\n//import s from './RecoveryPassword.module.css';\nimport cs from '../../common/commonStyles.module.css'\nimport {useFormik} from \"formik\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Redirect, useParams} from 'react-router-dom';\nimport {setNewPasswordTC} from \"../../store/setNewPasswordReducer\";\nimport {AppRootStateType} from \"../../store/store\";\n\n\ntype FormikErrorType = {\n    password?: string\n    confirmPassword?: string\n}\n\nconst SetNewPassword = () => {\n\n    let completed = useSelector<AppRootStateType, boolean>(state => state.setNewPassword.completed)\n    let buttonDisabled = useSelector<AppRootStateType, boolean>(state => state.setNewPassword.buttonDisabled)\n    const {token} = useParams<{ token: string }>()\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            password: '',\n            confirmPassword: ''\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.password) {\n                errors.password = 'ПУСТО';\n            } else if (values.password.length < 4) {\n                errors.password = 'БОЛЬШЕ ТРЕХ СИМВОЛОВ ДОЛЖНО БЫТЬ';\n            }\n\n            if (values.password !== values.confirmPassword) {\n                errors.confirmPassword = 'ПАРОЛИ НЕ СОВПАДАЮТ'\n            }\n            return errors;\n        },\n        onSubmit: (values) => {\n            dispatch(setNewPasswordTC(values.password, token))\n        }\n    })\n\n    if (completed) {\n        return (\n            <Redirect to={'/login'}/>\n        )\n    }\n\n    return (\n        <div className={cs.background}>\n            <div className={cs.blockContainer}>\n                <h2 className={cs.text}>It-incubator</h2>\n                <h3 className={cs.text}>Create new password</h3>\n                <FormControl className={cs.formControl}>\n                    <form onSubmit={formik.handleSubmit} className={cs.form}>\n                        <FormGroup>\n                            <TextField\n                                variant={\"outlined\"}\n                                size={'small'}\n                                label='password'\n                                margin=\"normal\"\n                                type=\"password\"\n                                {...formik.getFieldProps('password')}\n                            />\n\n                            <div style={{'height': '20px'}}>\n                                {formik.touched.password && formik.errors.password &&\n                                <div style={{color: 'red'}}>{formik.errors.password}</div>}\n                            </div>\n\n                            <TextField\n                                variant={\"outlined\"}\n                                size={'small'}\n                                label='confirmPassword'\n                                margin=\"normal\"\n                                type=\"password\"\n                                {...formik.getFieldProps('confirmPassword')}\n                            />\n\n                            <div style={{'height': '20px'}}>\n                                {formik.touched.confirmPassword && formik.errors.confirmPassword &&\n                                <div style={{color: 'red'}}>{formik.errors.confirmPassword}</div>}\n                            </div>\n\n                            <p>Create new password and we will send you further instructions to E-mail</p>\n\n                            <div className={cs.buttonBlock}>\n                                <Button\n                                    className={cs.button}\n                                    type={'submit'}\n                                    variant={'contained'}\n                                    color={'primary'}\n                                    size={'small'}\n                                    disabled={buttonDisabled}\n                                >\n                                    Create new password\n                                </Button>\n                            </div>\n\n                        </FormGroup>\n                    </form>\n                </FormControl>\n            </div>\n        </div>\n    )\n}\n\nexport default SetNewPassword","export default __webpack_public_path__ + \"static/media/iconEmail.f254994b.png\";","import {cardsAPI} from \"../api/cardsAPI\";\nimport {setAppErrorAC, setLoadingStatusAC} from \"./appReducer\";\n\nconst buttonDisabledAC = (buttonDisabled: boolean) => {\n    return {\n        type: \"RECOVERY-PASSWORD/BUTTON-DISABLED\",\n        buttonDisabled\n    } as const\n}\n\nconst completedRequestAC = (completed: boolean) => {\n    return {\n        type: \"RECOVERY-PASSWORD/COMPLETED-REQUEST\",\n        completed\n    } as const\n}\n\nexport type buttonDisabledAT = ReturnType<typeof buttonDisabledAC>\nexport type completedRequestAT = ReturnType<typeof completedRequestAC>\n\nexport type actionRecoveryPasswordType =\n    buttonDisabledAT | completedRequestAT\n\nexport const initState = {\n    completed: false,\n    buttonDisabled: false\n}\n\ntype InitStateType = typeof initState\n\nexport const RecoveryPasswordReducer = (state: InitStateType = initState, action: actionRecoveryPasswordType): InitStateType => {\n    switch (action.type) {\n        case \"RECOVERY-PASSWORD/BUTTON-DISABLED\": {\n            return {...state, buttonDisabled: action.buttonDisabled}\n        }\n        case \"RECOVERY-PASSWORD/COMPLETED-REQUEST\": {\n            return {...state, completed: action.completed}\n        }\n        default: {\n            return state\n        }\n    }\n}\n\n\n\n//thunk\nexport const forgotPasswordTC = (email: string) => {\n    return (dispatch: any) => {\n        dispatch(buttonDisabledAC(true))\n        dispatch(setLoadingStatusAC('loading'))\n        cardsAPI.forgotPassword(email)\n            .then(res => {\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n                dispatch(completedRequestAC(true))\n            })\n            .catch(err => {\n                dispatch(setAppErrorAC('E-mail not found'))\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n            })\n    }\n}","import React from 'react';\nimport s from './RecoveryPassword.module.css';\nimport cs from '../../common/commonStyles.module.css'\nimport {useFormik} from \"formik\";\nimport iconEmail from '../../assets/icon/iconEmail.png'\nimport TextField  from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport FormControl from \"@mui/material/FormControl\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport { NavLink } from 'react-router-dom';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../store/store\";\nimport {forgotPasswordTC} from '../../store/recoveryPasswordReducer';\n\n\ntype FormikErrorType = {\n    email?: string\n}\n\nfunction RecoveryPassword() {\n    let completed = useSelector<AppRootStateType, boolean>(state => state.RecoveryPassword.completed)\n    let buttonDisabled = useSelector<AppRootStateType, boolean>(state => state.RecoveryPassword.buttonDisabled)\n\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            dispatch(forgotPasswordTC(values.email))\n\n\n\n            //setCompleted(true)\n            formik.resetForm()\n        },\n    })\n\n\n    if (completed) {\n        return (\n            <div className={cs.background}>\n                <div className={cs.blockContainer}>\n                    <div className={cs.form}>\n                        <h2 className={cs.text}>It-incubator</h2>\n                        <img src={iconEmail} className={s.icon}/>\n                        <h3 className={cs.text}>Check E-mail</h3>\n                        <p className={cs.text}>We have sent instructions to your E-mail how to recover your password</p>\n                    </div>\n\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className={cs.background}>\n                <div className={cs.blockContainer}>\n                    <h2 className={cs.text}>It-incubator</h2>\n                    <h3 className={cs.text}>Forgot your password?</h3>\n                    <FormControl className={cs.formControl}>\n                        <form onSubmit={formik.handleSubmit} className={cs.form}>\n                            <FormGroup>\n                                <TextField\n                                    variant={\"outlined\"}\n                                    size={'small'}\n                                    label='E-mail'\n                                    margin=\"normal\"\n                                    {...formik.getFieldProps('email')}\n                                />\n\n                                <div style={{'height': '20px'}}>\n                                    {formik.touched.email && formik.errors.email &&\n                                    <div style={{color: 'red'}}>{formik.errors.email}</div>}\n                                </div>\n\n                                <p>Enter your e-mail address and we will send you further instructions</p>\n\n                                <div className={cs.buttonBlock}>\n                                    <Button\n                                        className={cs.button}\n                                        type={'submit'}\n                                        variant={'contained'}\n                                        color={'primary'}\n                                        size={'small'}\n                                        disabled={buttonDisabled}\n                                    >\n                                        Send instructions\n                                    </Button>\n                                </div>\n\n                                <p>Did you remember your password?</p>\n\n                                <div className={cs.buttonBlock}>\n                                    <nav>\n                                        <NavLink\n                                            className={s.navlink}\n                                            to=\"/login\"\n                                        >\n                                            Try logging in\n                                        </NavLink>\n                                    </nav>\n                                </div>\n                            </FormGroup>\n                        </form>\n                    </FormControl>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default RecoveryPassword","import {cardsAPI} from \"../api/cardsAPI\";\nimport {setAppErrorAC, setLoadingStatusAC} from \"./appReducer\";\n\nconst buttonDisabledAC = (buttonDisabled: boolean) => {\n    return {\n        type: \"SIGN-UP/BUTTON-DISABLED\",\n        buttonDisabled\n    } as const\n}\n\nconst completedRequestAC = (completed: boolean) => {\n    return {\n        type: \"SIGN-UP/COMPLETED-REQUEST\",\n        completed\n    } as const\n}\n\nexport type buttonDisabledAT = ReturnType<typeof buttonDisabledAC>\nexport type completedRequestAT = ReturnType<typeof completedRequestAC>\n\nexport type actionSignUpType =\n    buttonDisabledAT | completedRequestAT\n\nexport const initState = {\n    completed: false,\n    buttonDisabled: false\n}\n\ntype InitStateType = typeof initState\n\nexport const SignUpReducer = (state: InitStateType = initState, action: actionSignUpType): InitStateType => {\n    switch (action.type) {\n        case \"SIGN-UP/BUTTON-DISABLED\": {\n            return {...state, buttonDisabled: action.buttonDisabled}\n        }\n        case \"SIGN-UP/COMPLETED-REQUEST\": {\n            return {...state, completed: action.completed}\n        }\n        default: {\n            return state\n        }\n    }\n}\n\n//thunk\nexport const registerTC = (email: string, password: string) => {\n    return (dispatch: any) => {\n        dispatch(buttonDisabledAC(true))\n        dispatch(setLoadingStatusAC('loading'))\n        cardsAPI.register(email, password)\n            .then(res => {\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n                dispatch(completedRequestAC(true))\n            })\n            .catch(err => {\n                dispatch(setAppErrorAC('unknown error'))\n                dispatch(buttonDisabledAC(false))\n                dispatch(setLoadingStatusAC('idle'))\n            })\n    }\n}","import React from 'react';\nimport s from './SignUp.module.css';\nimport cs from '../../common/commonStyles.module.css'\nimport {useFormik} from \"formik\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {NavLink, Redirect} from 'react-router-dom';\nimport {registerTC} from \"../../store/signUpReducer\";\nimport {AppRootStateType} from \"../../store/store\";\n\ntype FormikErrorType = {\n    email?: string,\n    password?: string,\n    confirmPassword?: string\n}\n\nconst SignUp = () => {\n\n    let completed = useSelector<AppRootStateType, boolean>(state => state.SignUp.completed)\n    let buttonDisabled = useSelector<AppRootStateType, boolean>(state => state.SignUp.buttonDisabled)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            confirmPassword: ''\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n\n            if (!values.password) {\n                errors.password = 'ПУСТО';\n            } else if (values.password.length < 4) {\n                errors.password = 'БОЛЬШЕ ТРЕХ СИМВОЛОВ ДОЛЖНО БЫТЬ';\n            }\n\n            if (values.password !== values.confirmPassword) {\n                errors.confirmPassword = 'ПАРОЛИ НЕ СОВПАДАЮТ'\n            }\n            return errors;\n        },\n        onSubmit: (values) => {\n            dispatch(registerTC(values.email, values.password))\n        }\n    })\n\n    if (completed) {\n        return (\n            <Redirect to={'/login'}/>\n        )\n    }\n\n    return (\n        <div className={cs.background}>\n            <div className={cs.blockContainer}>\n                <h2 className={cs.text}>It-incubator</h2>\n                <h3 className={cs.text}>Sign Up</h3>\n                <FormControl className={cs.formControl}>\n                    <form onSubmit={formik.handleSubmit} className={cs.form}>\n                        <FormGroup>\n                            <TextField\n                                variant={\"outlined\"}\n                                size={'small'}\n                                label='email'\n                                margin=\"normal\"\n                                {...formik.getFieldProps('email')}\n                            />\n\n                            <div style={{'height': '20px'}}>\n                                {formik.touched.email && formik.errors.email &&\n                                <div style={{color: 'red'}}>{formik.errors.email}</div>}\n                            </div>\n\n                            <TextField\n                                variant={\"outlined\"}\n                                size={'small'}\n                                label='password'\n                                margin=\"normal\"\n                                type=\"password\"\n                                {...formik.getFieldProps('password')}\n                            />\n\n                            <div style={{'height': '20px'}}>\n                                {formik.touched.password && formik.errors.password &&\n                                <div style={{color: 'red'}}>{formik.errors.password}</div>}\n                            </div>\n\n                            <TextField\n                                variant={\"outlined\"}\n                                size={'small'}\n                                label='confirmPassword'\n                                margin=\"normal\"\n                                type=\"password\"\n                                {...formik.getFieldProps('confirmPassword')}\n                            />\n\n                            <div style={{'height': '20px'}}>\n                                {formik.touched.confirmPassword && formik.errors.confirmPassword &&\n                                <div style={{color: 'red'}}>{formik.errors.confirmPassword}</div>}\n                            </div>\n\n                            <div className={cs.buttonBlock}>\n                                <Button\n                                    className={cs.button}\n                                    type={'submit'}\n                                    variant={'contained'}\n                                    color={'primary'}\n                                    size={'small'}\n                                    disabled={buttonDisabled}\n                                >\n                                    Register\n                                </Button>\n\n\n                            </div>\n\n                            <div className={cs.buttonBlock}>\n                                <nav>\n                                    <NavLink\n                                        className={s.navlink}\n                                        to=\"/login\"\n                                    >\n                                        Login\n                                    </NavLink>\n                                </nav>\n                            </div>\n\n                        </FormGroup>\n                    </form>\n                </FormControl>\n            </div>\n        </div>\n    )\n}\n\nexport default SignUp","import React from 'react'\nimport s from './LoadingLine.module.css'\nimport LinearProgress from '@mui/material/LinearProgress'\nimport { useSelector } from 'react-redux'\nimport { AppRootStateType } from '../../store/store'\n\nconst LoadingLine = () => {\n\n    let status = useSelector<AppRootStateType, number>(state => state.app.status)\n\n    return (\n        <div className={s.loadingStyle}>\n            {status !== 0 && <LinearProgress color={\"secondary\"}/>}\n        </div>\n    )\n}\n\nexport default LoadingLine","import React from 'react'\nimport Snackbar from '@mui/material/Snackbar'\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../store/store\";\nimport {setAppErrorAC} from \"../../store/appReducer\";\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n\n    let error = useSelector<AppRootStateType, null | string>(state => state.app.error)\n    const dispatch = useDispatch()\n\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        dispatch(setAppErrorAC(null))\n    }\n\n    return (\n        <Snackbar\n            open={error !== null}\n            autoHideDuration={6000}\n            onClose={handleClose}\n        >\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n}\n","import React from \"react\";\n\nfunction EditProfile() {\n    return (\n        <div>\n            Edit profile\n        </div>\n    )\n}\nexport default EditProfile","import React from \"react\";\nimport {NavLink, useHistory} from \"react-router-dom\";\nimport s from './Haeder.module.css'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../store/store\";\nimport Button from \"@material-ui/core/Button\";\nimport {logoutTC, setIsLoggedInAC} from \"../../store/logInReducer\";\n\n\nfunction Header() {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.LogIn.isLoggedIn)\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n\n    const onClickHandler = () => {\n        dispatch(logoutTC())\n        dispatch(setIsLoggedInAC(false))\n        history.push('/login');\n\n    }\n\n    return (\n        <div>\n            <div className={s.headerBlock}>\n\n                <nav className={s.nav}>\n                    {!isLoggedIn && <div className={s.item}>\n                        <NavLink to={'/login'} activeClassName={s.activeLink}>Login</NavLink>\n                    </div>}\n                    {!isLoggedIn && <div className={s.item}>\n                        <NavLink to={'/SignUp'} activeClassName={s.activeLink}>SignUp</NavLink>\n                    </div>}\n                    {!isLoggedIn && <div className={s.item}>\n                        <NavLink to={'/RecoveryPassword'} activeClassName={s.activeLink}>Recovery password</NavLink>\n                    </div>}\n                    {/*{isLoggedIn && <div className={s.item}>*/}\n                    {/*    <NavLink to={'/Profile'} activeClassName={s.activeLink}>Profile</NavLink>*/}\n                    {/*</div>}*/}\n                    {isLoggedIn && <div className={s.item}>\n                        <Button variant={'contained'}\n                                color={\"primary\"}\n                                size={\"small\"}\n                                onClick={onClickHandler}\n                        >Log out</Button>\n                    </div>}\n\n\n                </nav>\n            </div>\n\n        </div>\n\n    )\n}\n\nexport default Header;","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\nimport s from './SuperInputText.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n}\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value)\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        onEnter // если есть пропс onEnter\n        && e.key === 'Enter' // и если нажата кнопка Enter\n        && onEnter() // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\n    const finalInputClassName = `${s.input} ${error ? s.errorInput : s.superInput} ${s.className}` // need to fix with (?:) and s.superInput\n\n    return (\n        <>\n            <input\n                type={'text'}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span className={finalSpanClassName}>{error}</span>}\n        </>\n    )\n}\n\nexport default SuperInputText\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\nimport s from './SuperButton.module.css'\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n    const finalClassName = `${s.button} ${red ? s.red : s.default} ${className}`\n\n    return (\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    )\n}\n\nexport default SuperButton\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\nimport s from './SuperCheckbox.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void\n    spanClassName?: string\n}\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeChecked,\n        className, spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e)\n\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\n\n    return (\n        <label className={s.label}>\n            <input\n                type={'checkbox'}\n                onChange={onChangeCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n            />\n            {children && <span className={s.spanClassName}>{children}</span>}\n        </label> // благодаря label нажатие на спан передастся в инпут\n    )\n}\n\nexport default SuperCheckbox\n","import React from 'react';\nimport SuperInputText from \"../../common/c1-SuperInputText/SuperInputText\";\nimport SuperButton from \"../../common/c2-SuperButton/SuperButton\";\nimport SuperCheckbox from \"../../common/c3-SuperCheckbox/SuperCheckbox\";\n\nfunction TestPage() {\n    return (\n        <div>\n            TestPage\n            <SuperInputText/>\n            <SuperButton>\n                default\n            </SuperButton>\n            <SuperCheckbox/>\n        </div>\n    )\n}\n\nexport default TestPage","import React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n/*import s from './App.module.css';*/\nimport Error404 from './pages/Error404/Error404';\nimport {LogIn} from './pages/LogIn/LogIn';\nimport Profile from \"./pages/Profile/Profile\";\nimport SetNewPassword from \"../src/pages/SetNewPassword/SetNewPassword\";\nimport RecoveryPassword from \"./pages/RecoveryPassword/RecoveryPassword\";\nimport SignUp from './pages/SignUp/SignUp';\nimport LoadingLine from './common/LoadingLine/LoadingLine';\nimport {ErrorSnackbar} from './common/ErrorSnackbar/ErrorSnackbar';\nimport EditProfile from \"./pages/EditProfile/EditProfile\";\nimport Header from \"./pages/Header/Header\";\nimport TestPage from \"./pages/TestPage/TestPage\";\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header/>\n\n            <LoadingLine/>\n            <Switch>\n                <Route exact path={'/'} render={() => <TestPage/>}/>\n                <Route path={'/SetNewPassword/:token'} render={() => <SetNewPassword/>}/>\n                <Route path={'/Error404'} render={() => <Error404/>}/>\n                <Route path={'/login'} render={() => <LogIn/>}/>\n                <Route path={'/Profile'} render={() => <Profile/>}/>\n                <Route path={'/RecoveryPassword'} render={() => <RecoveryPassword/>}/>\n                <Route path={'/SignUp'} render={() => <SignUp/>}/>\n                <Route path={'/EditProfile'} render={() => <EditProfile/>}/>\n                <Redirect from={'*'} to={'/error404'}/>\n            </Switch>\n            <ErrorSnackbar/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunkMiddleware from \"redux-thunk\";\nimport {appReducer} from \"./appReducer\";\nimport {setNewPasswordReducer} from \"./setNewPasswordReducer\";\nimport {LogInReducer} from \"./logInReducer\";\nimport {ProfileReducer} from \"./profileReducer\";\nimport {RecoveryPasswordReducer} from \"./recoveryPasswordReducer\";\nimport {SignUpReducer} from \"./signUpReducer\";\n\n// объединяя reducer-ы с помощью combineReducers,\nconst rootReducer = combineReducers({\n    app: appReducer,\n    setNewPassword: setNewPasswordReducer,\n    LogIn: LogInReducer,\n    Profile: ProfileReducer,\n    RecoveryPassword: RecoveryPasswordReducer,\n    SignUp: SignUpReducer\n})\n\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\nimport {store} from \"./store/store\";\nimport { Provider } from 'react-redux';\n\n// commit connection\n\n\n//coment\n\n//3\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerBlock\":\"Haeder_headerBlock__178d3\",\"nav\":\"Haeder_nav__OVEeX\",\"item\":\"Haeder_item__3r0Ki\",\"activeLink\":\"Haeder_activeLink__2UUEV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Profile_background__Cr95E\",\"blockContainer\":\"Profile_blockContainer__3vd-8\",\"imgContainer\":\"Profile_imgContainer__shH_q\",\"text\":\"Profile_text__24QG7\",\"button\":\"Profile_button__1Rl1o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SuperInputText_input__1XNDN\",\"superInput\":\"SuperInputText_superInput__WuyFe\",\"errorInput\":\"SuperInputText_errorInput__2h4-F\",\"error\":\"SuperInputText_error__2Ii1S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1Oj1f\",\"red\":\"SuperButton_red__17evz\",\"button\":\"SuperButton_button__3SK66\",\"blink\":\"SuperButton_blink__3GAa3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"SuperCheckbox_label__1ql-3\",\"checkBox\":\"SuperCheckbox_checkBox__2xRnB\",\"spanClassName\":\"SuperCheckbox_spanClassName__309sz\"};"],"sourceRoot":""}