{"version":3,"sources":["pages/StartPage/StartPage.module.css","pages/RecoveryPassword/RecoveryPassword.module.css","pages/SignUp/SignUp.module.css","common/LoadingLine/LoadingLine.module.css","common/commonStyles.module.css","pages/Error404/Error404.tsx","store/appReducer.ts","api/cardsAPI.ts","store/profileReducer.ts","store/logInReducer.ts","pages/LogIn/LogIn.tsx","store/setNewPasswordReducer.ts","pages/SetNewPassword/SetNewPassword.tsx","assets/icon/iconEmail.png","store/recoveryPasswordReducer.ts","pages/RecoveryPassword/RecoveryPassword.tsx","store/signUpReducer.ts","pages/SignUp/SignUp.tsx","common/LoadingLine/LoadingLine.tsx","common/ErrorSnackbar/ErrorSnackbar.tsx","pages/EditProfile/EditProfile.tsx","pages/Header/Header.tsx","pages/Profile/Profile.tsx","pages/Profile/ProfileContainer.tsx","pages/StartPage/StartPage.tsx","common/Table/Table.tsx","pages/Packs/Packs.tsx","store/packsReducer.ts","pages/Packs/SortPacks/SortPacks.tsx","pages/Packs/PacksContainer.tsx","store/cardsReducer.ts","pages/Cards/Cards.tsx","pages/Cards/CardsContainer.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx","pages/Header/Haeder.module.css","common/Table/Table.module.css","pages/Profile/Profile.module.css"],"names":["module","exports","Error404","setLoadingStatusAC","statusRequest","type","setAppErrorAC","error","initState","status","instance","axios","create","baseURL","withCredentials","cardsAPI","email","payload","from","message","post","data","password","resetPasswordToken","delete","packsAPI","isMyPacks","_id","pageCount","page","user_id","get","name","isPrivate","cardsPack","put","trainingCardsAPI","cardsPack_id","question","answer","grade","card","avatar","publicCardPacksCount","setUserData","setUserDataAC","setIsLoggedInAC","value","buttonDisabledAC","buttonDisabled","initialState","isLoggedIn","LogIn","useSelector","state","dispatch","useDispatch","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","then","res","catch","e","response","resetForm","to","className","cs","background","blockContainer","text","FormControl","formControl","handleSubmit","form","FormGroup","TextField","variant","size","label","margin","getFieldProps","style","touched","color","FormControlLabel","control","Checkbox","checked","buttonBlock","Button","button","disabled","completed","SetNewPassword","setNewPassword","token","useParams","confirmPassword","RecoveryPassword","src","iconEmail","s","icon","navlink","SignUp","LoadingLine","app","loadingStyle","LinearProgress","Alert","props","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","EditProfile","Header","history","useHistory","headerBlock","nav","item","activeClassName","activeLink","isLoginFix","onClick","push","Profile","imgContainer","alt","onClickHandler","ProfileContainer","StartPage","Table","table","tableHeaders","map","h","tableDate","d","firstCell","secondCell","thirdCell","forthCell","deleteHandler","updateHandler","Packs","addPackHandler","packsForTable","deletePackHandler","updatePackHandler","isMyPacksAC","switchPageCountAC","changePageAC","packsArray","cardPacksTotalCount","maxCardsCount","minCardsCount","pagesButtonSwitcher","fetchPacksTC","getState","packs","cardPacks","allPacksDataAC","SortPacks","onChange","a","isMyPacksTC","currentTarget","Select","toString","val","Number","target","switchPageCountTC","MenuItem","b","changePageTC","PacksContainer","useEffect","p","cardsCount","updated","deletePackTC","updatePackTC","getCards","fetchCardsTC","cards","Cards","addCardHandler","cardsForTable","deleteCardHandler","CardsContainer","c","addCardTC","deleteCardTC","App","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","copyState","pagesCount","Math","ceil","pagesButtonSwitcherNew","i","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.cd74038b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"StartPage_background__WCaXT\",\"test\":\"StartPage_test__1Jj3R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navlink\":\"RecoveryPassword_navlink__2li2B\",\"icon\":\"RecoveryPassword_icon__I20tP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navlink\":\"SignUp_navlink__2-f5j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingStyle\":\"LoadingLine_loadingStyle__1uG-p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"commonStyles_background__20Fo_\",\"blockContainer\":\"commonStyles_blockContainer__3gIFf\",\"form\":\"commonStyles_form__nev2b\",\"text\":\"commonStyles_text__lIUVT\",\"formControl\":\"commonStyles_formControl__35-EK\",\"button\":\"commonStyles_button__1-WTl\",\"buttonBlock\":\"commonStyles_buttonBlock__jqV0Y\"};","import React from 'react';\r\n\r\nfunction Error404() {\r\n    return (\r\n        <div>\r\n            Error404\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error404","export type RequestStatusType = 'idle' | 'loading'\r\n//test2\r\nexport const setLoadingStatusAC = (statusRequest: RequestStatusType) => {\r\n    return {\r\n        type: \"APP/SET-STATUS\",\r\n        statusRequest\r\n    } as const\r\n}\r\n\r\nexport const setAppErrorAC = (error: null | string) => {\r\n    return {\r\n        type: \"APP/SET-ERROR\",\r\n        error\r\n    } as const\r\n}\r\n\r\nexport type setLoadingStatusAT = ReturnType<typeof setLoadingStatusAC>\r\nexport type setAppErrorAT = ReturnType<typeof setAppErrorAC>\r\n\r\nexport type actionAppType = setLoadingStatusAT | setAppErrorAT\r\n\r\nexport const initState = {\r\n    status: 0,\r\n    error: null as null | string\r\n\r\n}\r\n\r\ntype InitStateType = typeof initState\r\n\r\nexport const appReducer = (state: InitStateType = initState, action: actionAppType): InitStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-STATUS\": {\r\n            let copyState = {...state};\r\n            if (action.statusRequest === 'loading') {\r\n                copyState.status++\r\n            } else {\r\n                copyState.status--\r\n            }\r\n            return copyState\r\n        }\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0/\",\r\n    // baseURL: \"http://localhost:7542/2.0/\",\r\n    withCredentials: true,\r\n})\r\n\r\nexport const cardsAPI = {\r\n    forgotPassword(email: string) {\r\n        const payload = {\r\n            email,\r\n            from: `test-front-admin <romanxeo@gmail.com>`,\r\n            message: `<div style=\"background-color: #a3c486; padding: 10px\">\r\n                        password recovery link: \r\n                        <a href='http://localhost:3000/#/SetNewPassword/$token$'>\r\n                        link local</a>\r\n                        <a href='https://romanxeo.github.io/cardsapp/#/SetNewPassword/$token$'>\r\n                        link gh-pages</a></div>`\r\n        }\r\n        const promise = instance.post<any>('auth/forgot', payload);\r\n        return promise;\r\n    },\r\n\r\n    login(data: LoginParamsType) {\r\n        return instance.post<UserDataType>(`/auth/login`, data)\r\n    },\r\n\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        const payload = {\r\n            password,\r\n            resetPasswordToken\r\n        }\r\n        const promise = instance.post<any>('auth/set-new-password', payload);\r\n        return promise;\r\n    },\r\n\r\n    register(email: string, password: string) {\r\n        const payload = {\r\n            email,\r\n            password\r\n        }\r\n        const promise = instance.post<any>('auth/register', payload);\r\n        return promise;\r\n    },\r\n    me() {\r\n        return instance.post <UserDataType>(`auth/me`)\r\n    },\r\n    logOut() {\r\n        return instance.delete<any>('auth/me')\r\n    }\r\n}\r\n\r\nexport const packsAPI = {\r\n    getPacks(isMyPacks: boolean, _id: string, pageCount: number, page: number) {\r\n        //debugger\r\n        let user_id = ''\r\n        if (isMyPacks) {\r\n            user_id = `&user_id=${_id}`\r\n        }\r\n\r\n        return instance.get<PacksResponseType>(`cards/pack?pageCount=${pageCount}&page=${page}`+user_id)\r\n\r\n    },\r\n    addPack(name: string, isPrivate: boolean) {\r\n        const payload = {\r\n            cardsPack: {\r\n                name, isPrivate\r\n            }\r\n        }\r\n        return instance.post<PackType>('cards/pack', payload)\r\n    },\r\n    deletePack(_id: string) {\r\n        return instance.delete<PackType>(`cards/pack?id=${_id}`)\r\n    },\r\n    updatePack(_id: string, name: string) {\r\n        const payload = {\r\n            cardsPack: {name, _id}\r\n        }\r\n        return instance.put<PackType>(`cards/pack`, payload)\r\n    }\r\n}\r\n\r\nexport const trainingCardsAPI = {\r\n    getCards(cardsPack_id: string) {\r\n        return instance.get<CardsResponseType>(`cards/card?cardsPack_id=${cardsPack_id}`)\r\n    },\r\n    addCard(cardsPack_id: string, question: string, answer: string, grade: number) {\r\n        const payload = {\r\n            card: {cardsPack_id,question, answer, grade},\r\n\r\n        }\r\n        return instance.post<CardType>(`cards/card`, payload)\r\n    },\r\n    deleteCard(_id: string)  {\r\n        return instance.delete<CardType>(`cards/card?id=${_id}`)\r\n},\r\n\r\n}\r\n\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type UserDataType = {\r\n    _id: string\r\n    email: string\r\n    name: string\r\n    rememberMe?: boolean\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n}\r\nexport type PackType = {\r\n    _id: string\r\n    name: string\r\n    user_id: string\r\n    user_name: string\r\n    private: boolean\r\n    created: string\r\n    updated: string\r\n    cardsCount: number\r\n}\r\nexport type PacksResponseType = {\r\n    cardPacks: Array<PackType>\r\n    cardPacksTotalCount: number // количество колод\r\n    maxCardsCount: number\r\n    minCardsCount:number\r\n    page: number// выбранная страница\r\n    pageCount: number // количество элементов на странице\r\n}\r\nexport type CardType = {\r\n    answer: string\r\n    cardsPack_id: string\r\n    created: string\r\n    grade: number\r\n    question: string\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    _id: string\r\n}\r\nexport type CardsResponseType = {\r\n    cards: CardType[]\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    packUserId: string\r\n    page: number\r\n    pageCount: number\r\n}","import {Dispatch} from 'redux'\r\nimport {cardsAPI} from \"../api/cardsAPI\";\r\nimport {setAppErrorAC, setAppErrorAT, setLoadingStatusAC, setLoadingStatusAT} from \"./appReducer\";\r\n\r\n\r\nexport type SetUserDataACType = ReturnType<typeof setUserDataAC>\r\n\r\nexport type ActionProfileType = SetUserDataACType | setLoadingStatusAT | setAppErrorAT\r\ntype ThunkDispatch = Dispatch<ActionProfileType>\r\n\r\nexport const initState = {\r\n    name: \"\",\r\n    avatar: \"\",\r\n    _id: \"\",\r\n    publicCardPacksCount: 0,\r\n}\r\n\r\ntype InitStateType = typeof initState\r\n\r\nexport const setUserData = \"profile/SET-USER-DATA\"\r\n\r\nexport const ProfileReducer = (state: InitStateType = initState, action: ActionProfileType): InitStateType => {\r\n    switch (action.type) {\r\n        case setUserData: {\r\n            debugger\r\n            return {...state, name: action.name, avatar: action.avatar, _id: action._id, publicCardPacksCount: action.publicCardPacksCount}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const setUserDataAC = (name: string, avatar: string, _id: string, publicCardPacksCount: number) => ({\r\n    type: setUserData, name, avatar, _id, publicCardPacksCount\r\n} as const)\r\n\r\n\r\n// thunks\r\nexport const setUserDataTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setLoadingStatusAC('loading'))\r\n        cardsAPI.me()\r\n            .then((res) => {\r\n                dispatch(setUserDataAC(res.data.name, res.data.avatar ? res.data.avatar : \"\", res.data._id,\r\n                    res.data.publicCardPacksCount))\r\n                dispatch(setLoadingStatusAC('idle'))\r\n            })\r\n            .catch((e) => {\r\n                dispatch(setLoadingStatusAC('idle'))\r\n                const error = e.response ? e.response.data.error : e.message\r\n                dispatch(setAppErrorAC(error))\r\n            })\r\n    }\r\n\r\n}","import {setLoadingStatusAC, setAppErrorAC, setLoadingStatusAT, setAppErrorAT} from './appReducer'\r\nimport {LoginParamsType, cardsAPI} from \"../api/cardsAPI\";\r\nimport {setUserDataAC, SetUserDataACType} from \"./profileReducer\";\r\nimport {Dispatch} from 'redux';\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'LOGIN/SET-IS-LOGGED-IN', value} as const)\r\n\r\nconst buttonDisabledAC = (buttonDisabled: boolean) => {\r\n    return {\r\n        type: \"LOGIN/BUTTON-DISABLED\",\r\n        buttonDisabled\r\n    } as const\r\n}\r\n\r\nexport type setIsLoggedInAT = ReturnType<typeof setIsLoggedInAC>\r\nexport type buttonDisabledAT = ReturnType<typeof buttonDisabledAC>\r\n\r\n// types\r\ntype actionLogInType = setIsLoggedInAT\r\n    | buttonDisabledAT\r\n    | setLoadingStatusAT\r\n    | SetUserDataACType\r\n    | setAppErrorAT\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    buttonDisabled: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const LogInReducer = (state: InitialStateType = initialState, action: actionLogInType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'LOGIN/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        case \"LOGIN/BUTTON-DISABLED\": {\r\n            return {...state, buttonDisabled: action.buttonDisabled}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// thunks\r\n/*export const loginTwTC = (data: LoginParamsType) => (dispatch: any) => {\r\n    dispatch(setLoadingStatusAC('loading'))\r\n    cardsAPI.login(data)\r\n        .then((res) => {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setLoadingStatusAC('idle'))\r\n            dispatch(setUserDataAC(res.data.name, res.data.avatar ? res.data.avatar : \"\", res.data._id,\r\n                res.data.publicCardPacksCount))\r\n        })\r\n        .catch(e => {\r\n            //dispatch(setAppErrorAC('dfdgfd'))\r\n            const error = e.response ? e.response.data.error : e.message\r\n            dispatch(setAppErrorAC(error))\r\n            dispatch(setLoadingStatusAC('idle'))\r\n        })\r\n}*/\r\n\r\n//thunk\r\nexport const loginTC = (data: LoginParamsType) => {\r\n    return (dispatch: any) => {\r\n        dispatch(buttonDisabledAC(true))\r\n        dispatch(setLoadingStatusAC('loading'))\r\n        cardsAPI.login(data)\r\n            .then(res => {\r\n                debugger\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(buttonDisabledAC(false))\r\n                dispatch(setLoadingStatusAC('idle'))\r\n                dispatch(setUserDataAC(res.data.name, res.data.avatar ? res.data.avatar : \"\", res.data._id,\r\n                    res.data.publicCardPacksCount))\r\n            })\r\n            .catch(e => {\r\n                const error = e.response ? e.response.data.error : \"some unknown error\"\r\n                dispatch(setAppErrorAC(error))\r\n                dispatch(buttonDisabledAC(false))\r\n                dispatch(setLoadingStatusAC('idle'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<actionLogInType>) => {\r\n    dispatch(setLoadingStatusAC('loading'))\r\n    cardsAPI.logOut()\r\n        .then((res) => {\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setLoadingStatusAC('idle'))\r\n            dispatch(setUserDataAC(\"\", \"\", \"\", 0))\r\n        })\r\n        .catch(e => {\r\n            dispatch(setLoadingStatusAC('idle'))\r\n            //dispatch(setAppErrorAC(\"some error\"))\r\n            const error = e.response ? e.response.data.error : e.message\r\n            dispatch(setAppErrorAC(error))\r\n        })\r\n\r\n}\r\n\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../store/logInReducer\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport cs from \"../../common/commonStyles.module.css\";\r\nimport s from \"../RecoveryPassword/RecoveryPassword.module.css\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const LogIn = () => {\r\n\r\n    let buttonDisabled = useSelector<AppRootStateType, boolean>(state => state.LogIn.buttonDisabled)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean> (state => state.LogIn.isLoggedIn)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'romanxeo@gmail.com',\r\n            password: 'dubfrufp37',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Поле пароль обязательно';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Длина пароля должна быть больше 3 символов';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n\r\n    if (isLoggedIn) {\r\n        return (\r\n            <Redirect to={'/profile'}/>\r\n        )\r\n    }\r\n/*\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n\r\n                        {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                            checked={formik.values.rememberMe}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n*/\r\n\r\n    return (\r\n        <div className={cs.background}>\r\n            <div className={cs.blockContainer}>\r\n                <h2 className={cs.text}>IT Incubator</h2>\r\n                <h3 className={cs.text}>Log In</h3>\r\n                <FormControl className={cs.formControl}>\r\n                    <form onSubmit={formik.handleSubmit} className={cs.form}>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                variant={\"outlined\"}\r\n                                size={'small'}\r\n                                label='E-mail'\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n\r\n                            <div style={{'height': '20px'}}>\r\n                                {formik.touched.email && formik.errors.email &&\r\n                                <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                            </div>\r\n\r\n\r\n                            <TextField\r\n                                variant={\"outlined\"}\r\n                                type=\"password\"\r\n                                size={'small'}\r\n                                label='Password'\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n\r\n                            <div style={{'height': '20px'}}>\r\n                                {formik.touched.password && formik.errors.password &&\r\n                                <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                            </div>\r\n\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox/>}\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />\r\n\r\n                            <div className={cs.buttonBlock}>\r\n                                <Button\r\n                                    className={cs.button}\r\n                                    type={'submit'}\r\n                                    variant={'contained'}\r\n                                    color={'primary'}\r\n                                    size={'small'}\r\n                                    disabled={buttonDisabled}\r\n                                >\r\n                                    Login\r\n                                </Button>\r\n                            </div>\r\n\r\n                        </FormGroup>\r\n                    </form>\r\n                </FormControl>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import {cardsAPI} from \"../api/cardsAPI\";\r\nimport {setAppErrorAC, setLoadingStatusAC} from \"./appReducer\";\r\n\r\nconst buttonDisabledAC = (buttonDisabled: boolean) => {\r\n    return {\r\n        type: \"SET-NEW-PASSWORD/BUTTON-DISABLED\",\r\n        buttonDisabled\r\n    } as const\r\n}\r\n\r\nconst completedRequestAC = (completed: boolean) => {\r\n    return {\r\n        type: \"SET-NEW-PASSWORD/COMPLETED-REQUEST\",\r\n        completed\r\n    } as const\r\n}\r\n\r\nexport type buttonDisabledAT = ReturnType<typeof buttonDisabledAC>\r\nexport type completedRequestAT = ReturnType<typeof completedRequestAC>\r\n\r\nexport type actionSetNewPasswordType =\r\n    buttonDisabledAT | completedRequestAT\r\n\r\nexport const initState = {\r\n    completed: false,\r\n    buttonDisabled: false\r\n}\r\n\r\ntype InitStateType = typeof initState\r\n\r\nexport const setNewPasswordReducer = (state: InitStateType = initState, action: actionSetNewPasswordType): InitStateType => {\r\n    switch (action.type) {\r\n        case \"SET-NEW-PASSWORD/BUTTON-DISABLED\": {\r\n            return {...state, buttonDisabled: action.buttonDisabled}\r\n        }\r\n        case \"SET-NEW-PASSWORD/COMPLETED-REQUEST\": {\r\n            return {...state, completed: action.completed}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//thunk\r\nexport const setNewPasswordTC = (password: string, resetPasswordToken: string) => {\r\n    return (dispatch: any) => {\r\n        dispatch(buttonDisabledAC(true))\r\n        dispatch(setLoadingStatusAC('loading'))\r\n        cardsAPI.setNewPassword(password, resetPasswordToken)\r\n            .then(res => {\r\n                dispatch(buttonDisabledAC(false))\r\n                dispatch(setLoadingStatusAC('idle'))\r\n                dispatch(completedRequestAC(true))\r\n            })\r\n            .catch(e => {\r\n                //console.log(err)\r\n                const error = e.response ? e.response.data.error : \"some unknown error\"\r\n                dispatch(setAppErrorAC(error))\r\n                dispatch(buttonDisabledAC(false))\r\n                dispatch(setLoadingStatusAC('idle'))\r\n            })\r\n    }\r\n}\r\n","import React from 'react';\r\n//import s from './RecoveryPassword.module.css';\r\nimport cs from '../../common/commonStyles.module.css'\r\nimport {useFormik} from \"formik\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {setNewPasswordTC} from \"../../store/setNewPasswordReducer\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    password?: string\r\n    confirmPassword?: string\r\n}\r\n\r\nconst SetNewPassword = () => {\r\n\r\n    let completed = useSelector<AppRootStateType, boolean>(state => state.setNewPassword.completed)\r\n    let buttonDisabled = useSelector<AppRootStateType, boolean>(state => state.setNewPassword.buttonDisabled)\r\n    const {token} = useParams<{ token: string }>()\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n            confirmPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.password) {\r\n                errors.password = 'ПУСТО';\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'БОЛЬШЕ ТРЕХ СИМВОЛОВ ДОЛЖНО БЫТЬ';\r\n            }\r\n\r\n            if (values.password !== values.confirmPassword) {\r\n                errors.confirmPassword = 'ПАРОЛИ НЕ СОВПАДАЮТ'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(setNewPasswordTC(values.password, token))\r\n        }\r\n    })\r\n\r\n    if (completed) {\r\n        return (\r\n            <Redirect to={'/login'}/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={cs.background}>\r\n            <div className={cs.blockContainer}>\r\n                <h2 className={cs.text}>It-incubator</h2>\r\n                <h3 className={cs.text}>Create new password</h3>\r\n                <FormControl className={cs.formControl}>\r\n                    <form onSubmit={formik.handleSubmit} className={cs.form}>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                variant={\"outlined\"}\r\n                                size={'small'}\r\n                                label='password'\r\n                                margin=\"normal\"\r\n                                type=\"password\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n\r\n                            <div style={{'height': '20px'}}>\r\n                                {formik.touched.password && formik.errors.password &&\r\n                                <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                            </div>\r\n\r\n                            <TextField\r\n                                variant={\"outlined\"}\r\n                                size={'small'}\r\n                                label='confirmPassword'\r\n                                margin=\"normal\"\r\n                                type=\"password\"\r\n                                {...formik.getFieldProps('confirmPassword')}\r\n                            />\r\n\r\n                            <div style={{'height': '20px'}}>\r\n                                {formik.touched.confirmPassword && formik.errors.confirmPassword &&\r\n                                <div style={{color: 'red'}}>{formik.errors.confirmPassword}</div>}\r\n                            </div>\r\n\r\n                            <p>Create new password and we will send you further instructions to E-mail</p>\r\n\r\n                            <div className={cs.buttonBlock}>\r\n                                <Button\r\n                                    className={cs.button}\r\n                                    type={'submit'}\r\n                                    variant={'contained'}\r\n                                    color={'primary'}\r\n                                    size={'small'}\r\n                                    disabled={buttonDisabled}\r\n                                >\r\n                                    Create new password\r\n                                </Button>\r\n                            </div>\r\n\r\n                        </FormGroup>\r\n                    </form>\r\n                </FormControl>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SetNewPassword","export default __webpack_public_path__ + \"static/media/iconEmail.f254994b.png\";","import {cardsAPI} from \"../api/cardsAPI\";\r\nimport {setAppErrorAC, setLoadingStatusAC} from \"./appReducer\";\r\n\r\nconst buttonDisabledAC = (buttonDisabled: boolean) => {\r\n    return {\r\n        type: \"RECOVERY-PASSWORD/BUTTON-DISABLED\",\r\n        buttonDisabled\r\n    } as const\r\n}\r\n\r\nconst completedRequestAC = (completed: boolean) => {\r\n    return {\r\n        type: \"RECOVERY-PASSWORD/COMPLETED-REQUEST\",\r\n        completed\r\n    } as const\r\n}\r\n\r\nexport type buttonDisabledAT = ReturnType<typeof buttonDisabledAC>\r\nexport type completedRequestAT = ReturnType<typeof completedRequestAC>\r\n\r\nexport type actionRecoveryPasswordType =\r\n    buttonDisabledAT | completedRequestAT\r\n\r\nexport const initState = {\r\n    completed: false,\r\n    buttonDisabled: false\r\n}\r\n\r\ntype InitStateType = typeof initState\r\n\r\nexport const RecoveryPasswordReducer = (state: InitStateType = initState, action: actionRecoveryPasswordType): InitStateType => {\r\n    switch (action.type) {\r\n        case \"RECOVERY-PASSWORD/BUTTON-DISABLED\": {\r\n            return {...state, buttonDisabled: action.buttonDisabled}\r\n        }\r\n        case \"RECOVERY-PASSWORD/COMPLETED-REQUEST\": {\r\n            return {...state, completed: action.completed}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n//thunk\r\nexport const forgotPasswordTC = (email: string) => {\r\n    return (dispatch: any) => {\r\n        dispatch(buttonDisabledAC(true))\r\n        dispatch(setLoadingStatusAC('loading'))\r\n        cardsAPI.forgotPassword(email)\r\n            .then(res => {\r\n                dispatch(buttonDisabledAC(false))\r\n                dispatch(setLoadingStatusAC('idle'))\r\n                dispatch(completedRequestAC(true))\r\n            })\r\n            .catch(e => {\r\n                const error = e.response ? e.response.data.error : \"some unknown error\"\r\n                dispatch(setAppErrorAC(error))\r\n                dispatch(buttonDisabledAC(false))\r\n                dispatch(setLoadingStatusAC('idle'))\r\n            })\r\n    }\r\n}","import React from 'react';\r\nimport s from './RecoveryPassword.module.css';\r\nimport cs from '../../common/commonStyles.module.css'\r\nimport {useFormik} from \"formik\";\r\nimport iconEmail from '../../assets/icon/iconEmail.png'\r\nimport TextField  from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport { NavLink } from 'react-router-dom';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {forgotPasswordTC} from '../../store/recoveryPasswordReducer';\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nfunction RecoveryPassword() {\r\n    let completed = useSelector<AppRootStateType, boolean>(state => state.RecoveryPassword.completed)\r\n    let buttonDisabled = useSelector<AppRootStateType, boolean>(state => state.RecoveryPassword.buttonDisabled)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(forgotPasswordTC(values.email))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n\r\n    if (completed) {\r\n        return (\r\n            <div className={cs.background}>\r\n                <div className={cs.blockContainer}>\r\n                    <div className={cs.form}>\r\n                        <h2 className={cs.text}>It-incubator</h2>\r\n                        <img src={iconEmail} className={s.icon}/>\r\n                        <h3 className={cs.text}>Check E-mail</h3>\r\n                        <p className={cs.text}>We have sent instructions to your E-mail how to recover your password</p>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className={cs.background}>\r\n                <div className={cs.blockContainer}>\r\n                    <h2 className={cs.text}>IT Incubator</h2>\r\n                    <h3 className={cs.text}>Forgot your password?</h3>\r\n                    <FormControl className={cs.formControl}>\r\n                        <form onSubmit={formik.handleSubmit} className={cs.form}>\r\n                            <FormGroup>\r\n                                <TextField\r\n                                    variant={\"outlined\"}\r\n                                    size={'small'}\r\n                                    label='E-mail'\r\n                                    margin=\"normal\"\r\n                                    {...formik.getFieldProps('email')}\r\n                                />\r\n\r\n                                <div style={{'height': '20px'}}>\r\n                                    {formik.touched.email && formik.errors.email &&\r\n                                    <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                                </div>\r\n\r\n                                <p>Enter your e-mail address and we will send you further instructions</p>\r\n\r\n                                <div className={cs.buttonBlock}>\r\n                                    <Button\r\n                                        className={cs.button}\r\n                                        type={'submit'}\r\n                                        variant={'contained'}\r\n                                        color={'primary'}\r\n                                        size={'small'}\r\n                                        disabled={buttonDisabled}\r\n                                    >\r\n                                        Send instructions\r\n                                    </Button>\r\n                                </div>\r\n\r\n                                <p>Did you remember your password?</p>\r\n\r\n                                <div className={cs.buttonBlock}>\r\n                                    <nav>\r\n                                        <NavLink\r\n                                            className={s.navlink}\r\n                                            to=\"/login\"\r\n                                        >\r\n                                            Try logging in\r\n                                        </NavLink>\r\n                                    </nav>\r\n                                </div>\r\n                            </FormGroup>\r\n                        </form>\r\n                    </FormControl>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RecoveryPassword","import {cardsAPI} from \"../api/cardsAPI\";\r\nimport {setAppErrorAC, setLoadingStatusAC} from \"./appReducer\";\r\n\r\nconst buttonDisabledAC = (buttonDisabled: boolean) => {\r\n    return {\r\n        type: \"SIGN-UP/BUTTON-DISABLED\",\r\n        buttonDisabled\r\n    } as const\r\n}\r\n\r\nconst completedRequestAC = (completed: boolean) => {\r\n    return {\r\n        type: \"SIGN-UP/COMPLETED-REQUEST\",\r\n        completed\r\n    } as const\r\n}\r\n\r\nexport type buttonDisabledAT = ReturnType<typeof buttonDisabledAC>\r\nexport type completedRequestAT = ReturnType<typeof completedRequestAC>\r\n\r\nexport type actionSignUpType =\r\n    buttonDisabledAT | completedRequestAT\r\n\r\nexport const initState = {\r\n    completed: false,\r\n    buttonDisabled: false\r\n}\r\n\r\ntype InitStateType = typeof initState\r\n\r\nexport const SignUpReducer = (state: InitStateType = initState, action: actionSignUpType): InitStateType => {\r\n    switch (action.type) {\r\n        case \"SIGN-UP/BUTTON-DISABLED\": {\r\n            return {...state, buttonDisabled: action.buttonDisabled}\r\n        }\r\n        case \"SIGN-UP/COMPLETED-REQUEST\": {\r\n            return {...state, completed: action.completed}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\n//thunk\r\nexport const registerTC = (email: string, password: string) => {\r\n    return (dispatch: any) => {\r\n        dispatch(buttonDisabledAC(true))\r\n        dispatch(setLoadingStatusAC('loading'))\r\n        cardsAPI.register(email, password)\r\n            .then(res => {\r\n                dispatch(buttonDisabledAC(false))\r\n                dispatch(setLoadingStatusAC('idle'))\r\n                dispatch(completedRequestAC(true))\r\n            })\r\n            .catch(e => {\r\n                const error = e.response ? e.response.data.error : \"some unknown error\"\r\n                dispatch(setAppErrorAC(error))\r\n                //dispatch(setAppErrorAC('unknown error'))\r\n                dispatch(buttonDisabledAC(false))\r\n                dispatch(setLoadingStatusAC('idle'))\r\n            })\r\n    }\r\n}","import React from 'react';\r\nimport s from './SignUp.module.css';\r\nimport cs from '../../common/commonStyles.module.css'\r\nimport {useFormik} from \"formik\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {registerTC} from \"../../store/signUpReducer\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string,\r\n    password?: string,\r\n    confirmPassword?: string\r\n}\r\n\r\nconst SignUp = () => {\r\n\r\n    let completed = useSelector<AppRootStateType, boolean>(state => state.SignUp.completed)\r\n    let buttonDisabled = useSelector<AppRootStateType, boolean>(state => state.SignUp.buttonDisabled)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'ПУСТО';\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'БОЛЬШЕ ТРЕХ СИМВОЛОВ ДОЛЖНО БЫТЬ';\r\n            }\r\n\r\n            if (values.password !== values.confirmPassword) {\r\n                errors.confirmPassword = 'ПАРОЛИ НЕ СОВПАДАЮТ'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(registerTC(values.email, values.password))\r\n        }\r\n    })\r\n\r\n    if (completed) {\r\n        return (\r\n            <Redirect to={'/login'}/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={cs.background}>\r\n            <div className={cs.blockContainer}>\r\n                <h2 className={cs.text}>IT Incubator</h2>\r\n                <h3 className={cs.text}>Sign Up</h3>\r\n                <FormControl className={cs.formControl}>\r\n                    <form onSubmit={formik.handleSubmit} className={cs.form}>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                variant={\"outlined\"}\r\n                                size={'small'}\r\n                                label='email'\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n\r\n                            <div style={{'height': '20px'}}>\r\n                                {formik.touched.email && formik.errors.email &&\r\n                                <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                            </div>\r\n\r\n                            <TextField\r\n                                variant={\"outlined\"}\r\n                                size={'small'}\r\n                                label='password'\r\n                                margin=\"normal\"\r\n                                type=\"password\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n\r\n                            <div style={{'height': '20px'}}>\r\n                                {formik.touched.password && formik.errors.password &&\r\n                                <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                            </div>\r\n\r\n                            <TextField\r\n                                variant={\"outlined\"}\r\n                                size={'small'}\r\n                                label='confirmPassword'\r\n                                margin=\"normal\"\r\n                                type=\"password\"\r\n                                {...formik.getFieldProps('confirmPassword')}\r\n                            />\r\n\r\n                            <div style={{'height': '20px'}}>\r\n                                {formik.touched.confirmPassword && formik.errors.confirmPassword &&\r\n                                <div style={{color: 'red'}}>{formik.errors.confirmPassword}</div>}\r\n                            </div>\r\n\r\n                            <div className={cs.buttonBlock}>\r\n                                <Button\r\n                                    className={cs.button}\r\n                                    type={'submit'}\r\n                                    variant={'contained'}\r\n                                    color={'primary'}\r\n                                    size={'small'}\r\n                                    disabled={buttonDisabled}\r\n                                >\r\n                                    Register\r\n                                </Button>\r\n\r\n\r\n                            </div>\r\n\r\n                            <div className={cs.buttonBlock}>\r\n                                <nav>\r\n                                    <NavLink\r\n                                        className={s.navlink}\r\n                                        to=\"/login\"\r\n                                    >\r\n                                        Login\r\n                                    </NavLink>\r\n                                </nav>\r\n                            </div>\r\n\r\n                        </FormGroup>\r\n                    </form>\r\n                </FormControl>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUp","import React from 'react'\r\nimport s from './LoadingLine.module.css'\r\nimport LinearProgress from '@mui/material/LinearProgress'\r\nimport { useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../store/store'\r\n\r\nconst LoadingLine = () => {\r\n\r\n    let status = useSelector<AppRootStateType, number>(state => state.app.status)\r\n\r\n    return (\r\n        <div className={s.loadingStyle}>\r\n            {status !== 0 && <LinearProgress color={\"secondary\"}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoadingLine","import React from 'react'\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {setAppErrorAC} from \"../../store/appReducer\";\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    let error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar\r\n            open={error !== null}\r\n            autoHideDuration={6000}\r\n            onClose={handleClose}\r\n        >\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nfunction EditProfile() {\r\n    return (\r\n        <div>\r\n            Edit profile\r\n        </div>\r\n    )\r\n}\r\nexport default EditProfile","import React from \"react\";\r\nimport {NavLink, useHistory} from \"react-router-dom\";\r\nimport s from './Haeder.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {logoutTC, setIsLoggedInAC} from \"../../store/logInReducer\";\r\n\r\n\r\nfunction Header() {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.LogIn.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(logoutTC())\r\n        dispatch(setIsLoggedInAC(false))\r\n        history.push('/login');\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.headerBlock}>\r\n\r\n                <nav className={s.nav}>\r\n                    {!isLoggedIn && <div className={s.item}>\r\n                        <NavLink to={'/login'} activeClassName={s.activeLink}>Login</NavLink>\r\n                    </div>}\r\n                    {!isLoggedIn && <div className={s.item}>\r\n                        <NavLink to={'/SignUp'} activeClassName={s.activeLink}>SignUp</NavLink>\r\n                    </div>}\r\n                    {!isLoggedIn && <div className={s.item}>\r\n                        <NavLink to={'/RecoveryPassword'} activeClassName={s.activeLink}>Recovery password</NavLink>\r\n                    </div>}\r\n                    {isLoggedIn && <div className={s.item + ' ' + s.isLoginFix}>\r\n                        <NavLink to={'/Profile'} activeClassName={s.activeLink}>Profile</NavLink>\r\n                    </div>}\r\n                    {isLoggedIn && <div className={s.item + ' ' + s.isLoginFix}>\r\n                        <NavLink to={'/Packs'} activeClassName={s.activeLink}>Packs</NavLink>\r\n                    </div>}\r\n                    {isLoggedIn && <div className={s.item}>\r\n                        {/*<button onClick={onClickHandler}>Log out</button>*/}\r\n                        {/*<NavLink to={'/Packs'} activeClassName={s.activeLink}>Packs</NavLink>*/}\r\n                        <Button variant={'contained'}\r\n                                color={\"primary\"}\r\n                                size={\"small\"}\r\n                                onClick={onClickHandler}\r\n                        >Log out</Button>\r\n                    </div>}\r\n\r\n\r\n                </nav>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport s from \"./Profile.module.css\"\r\nimport cs from \"../../common/commonStyles.module.css\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\ntype ProfilePropsType = {\r\n    name: string\r\n    avatar?: string\r\n    publicCardPacksCount: number\r\n    onClickHandler: () => void\r\n}\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n\r\n    return (\r\n        <div className={cs.background}>\r\n            <div className={s.blockContainer}>\r\n                <div className={s.imgContainer}><img src={props.avatar} alt={props.name}/></div>\r\n                <div className={s.text}>{props.name}</div>\r\n                <div className={s.text}>{`You have ${props.publicCardPacksCount} public packs`}</div>\r\n                <div className={s.button}>\r\n                    <Button\r\n                        variant={'contained'}\r\n                        color={\"primary\"}\r\n                        size={\"small\"}\r\n                        onClick={props.onClickHandler}>\r\n                        Edit profile\r\n                    </Button>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {setUserDataTC} from \"../../store/profileReducer\";\r\nimport {Redirect, useHistory} from \"react-router-dom\";\r\nimport {setIsLoggedInAC} from \"../../store/logInReducer\";\r\nimport Profile from \"./Profile\";\r\n\r\nfunction ProfileContainer() {\r\n    const dispatch = useDispatch()\r\n    const _id = useSelector<AppRootStateType, string>(state => state.Profile._id)\r\n    const name = useSelector<AppRootStateType, string>(state => state.Profile.name);\r\n    const avatar = useSelector<AppRootStateType, string>(state => state.Profile.avatar);\r\n    const publicCardPacksCount = useSelector<AppRootStateType, number>(state => state.Profile.publicCardPacksCount);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.LogIn.isLoggedIn);\r\n    const history = useHistory();\r\n\r\n    const onClickHandler = () => {\r\n        history.push('/EditProfile');\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        dispatch(setUserDataTC());\r\n        if (!_id) {\r\n            return <Redirect to={\"/login\"}/>\r\n        } else {\r\n            dispatch(setIsLoggedInAC(true))\r\n        }\r\n\r\n    }\r\n    return <Profile name={name}\r\n                    avatar={avatar}\r\n                    publicCardPacksCount={publicCardPacksCount}\r\n                    onClickHandler={onClickHandler}/>\r\n\r\n\r\n}\r\n\r\nexport default ProfileContainer","import React from 'react';\r\nimport s from './StartPage.module.css'\r\nimport Table from \"../../common/Table/Table\";\r\n\r\nfunction StartPage() {\r\n\r\n    return (\r\n        <div className={s.background}>\r\n            <h1 className={s.test}>Hi! We glad to see you! </h1>\r\n            <h2 className={s.test}> This is application for learning with cards. </h2>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default StartPage;","import React from 'react';\r\nimport s from './Table.module.css'\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    tableHeaders: Array<string>\r\n    tableDate: Array<any>\r\n    deleteHandler: (cardsPack_id: string) => void\r\n    updateHandler: (_id: string, name: string) => void\r\n}\r\nfunction Table(props: PropsType) {\r\n\r\nreturn (\r\n    <table className={s.table}>\r\n        <thead className={s.table}>\r\n        <tr className={s.table}>\r\n            {props.tableHeaders.map((h) => {\r\n                return <td className={s.table}>{h}</td>\r\n            })}\r\n        </tr>\r\n        </thead>\r\n        <tbody className={s.table}>\r\n\r\n        {props.tableDate.map((d) => {\r\n                return <tr className={s.table}>\r\n                    <td className={s.table}>{d.firstCell}</td>\r\n                    <td className={s.table}>{d.secondCell}</td>\r\n                    <td className={s.table}>{d.thirdCell}</td>\r\n                    <td className={s.table}>\r\n                        {d.forthCell ? d.forthCell : <NavLink to={`/Cards/${d.cardsPack_id}`}>Cards</NavLink>}\r\n                    </td>\r\n                    <td className={s.table}>\r\n                        <Button\r\n                            variant={'outlined'}\r\n                            color={\"primary\"}\r\n                            size={\"small\"}\r\n                            onClick={() => props.deleteHandler(d._id)}\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n                    </td>\r\n                    <td className={s.table}>\r\n                        <Button\r\n                            variant={'outlined'}\r\n                            color={\"primary\"}\r\n                            size={\"small\"}\r\n                            onClick={() => props.updateHandler(d.cardsPack_id, \"Updated name\")}\r\n                        >\r\n                            Update\r\n                        </Button>\r\n                    </td>\r\n\r\n                </tr>\r\n\r\n            }\r\n\r\n        )\r\n        }\r\n\r\n            </tbody>\r\n\r\n            </table>\r\n\r\n            )\r\n        }\r\n\r\n        export default Table;","import React, {ChangeEvent} from 'react';\r\nimport s from './Packs.module.css'\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"../../common/Table/Table\";\r\n\r\n\r\ntype PropsType = {\r\n    packsForTable: Array<any>\r\n    addPackHandler: () => void\r\n    deletePackHandler: (_id: string) => void\r\n    updatePackHandler: (_id: string, name: string) => void\r\n}\r\n\r\n\r\nfunction Packs(props: PropsType) {\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                variant={'outlined'}\r\n                color={\"primary\"}\r\n                size={\"small\"}\r\n                onClick={props.addPackHandler}>\r\n                Add pack\r\n            </Button>\r\n            <Table tableHeaders={[\"Name\", \"Cards count\", \"Updated\", \"Delete pack\", \"Update pack\", \"Cards\"]}\r\n                   tableDate={props.packsForTable}\r\n                   deleteHandler={props.deletePackHandler}\r\n                   updateHandler={props.updatePackHandler}\r\n            />\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Packs","import {packsAPI, PackType} from \"../api/cardsAPI\";\r\nimport {setAppErrorAC, setAppErrorAT, setLoadingStatusAC, setLoadingStatusAT} from \"./appReducer\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\n\r\nexport const getPacksAC = (packs: Array<PackType>) => ({\r\n    type: \"packs/GET-PACKS\", packs\r\n} as const)\r\n\r\nexport const isMyPacksAC = (isMyPacks: boolean) => ({\r\n    type: \"packs/IS-MY-PACKS\", isMyPacks\r\n} as const)\r\n\r\nexport const allPacksDataAC = (cardPacksTotalCount: number, maxCardsCount: number, minCardsCount: number, page: number, pageCount: number) => ({\r\n    type: \"packs/ALL-PACKS-DATA\", cardPacksTotalCount, maxCardsCount, minCardsCount, page, pageCount\r\n} as const)\r\n\r\nexport const switchPageCountAC = (pageCount: number) => ({\r\n    type: \"packs/SWITCH-PAGE-COUNT\", pageCount\r\n} as const)\r\n\r\nexport const changePageAC = (page: number) => ({\r\n    type: \"packs/CHANGE-PAGE\", page\r\n} as const)\r\n\r\nexport const pagesButtonSwitcherAC = () => ({\r\n    type: \"packs/PAGES-BUTTON-SWITCHER\"\r\n} as const)\r\n\r\ntype getPacksAT = ReturnType<typeof getPacksAC>\r\ntype isMyPacksAT = ReturnType<typeof isMyPacksAC>\r\ntype allPacksDataAT = ReturnType<typeof allPacksDataAC>\r\ntype switchPageCountAT = ReturnType<typeof switchPageCountAC>\r\ntype changePageAT = ReturnType<typeof changePageAC>\r\ntype pagesButtonSwitcherAT = ReturnType<typeof pagesButtonSwitcherAC>\r\n\r\nexport type ActionsPacksType = setLoadingStatusAT\r\n    | setAppErrorAT\r\n    | getPacksAT\r\n    | isMyPacksAT\r\n    | allPacksDataAT\r\n    | switchPageCountAT\r\n    | changePageAT\r\n    | pagesButtonSwitcherAT\r\n\r\n\r\nexport type InitialStateType = {\r\n    packsArray: Array<PackType>\r\n    isMyPacks: boolean\r\n    cardPacksTotalCount: number,\r\n    maxCardsCount: number,\r\n    minCardsCount: number,\r\n    page: number,\r\n    pageCount: number\r\n    pagesButtonSwitcher: Array<number>\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    packsArray: [],\r\n    isMyPacks: false,\r\n    cardPacksTotalCount: 0,\r\n    maxCardsCount: 0,\r\n    minCardsCount: 0,\r\n    page: 1,\r\n    pageCount: 10,\r\n    pagesButtonSwitcher: []\r\n}\r\n\r\n\r\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionsPacksType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"packs/GET-PACKS\": {\r\n            return {...state, packsArray: action.packs}\r\n        }\r\n        case \"packs/IS-MY-PACKS\": {\r\n            return {...state, isMyPacks: action.isMyPacks}\r\n        }\r\n        case \"packs/ALL-PACKS-DATA\": {\r\n            return {\r\n                ...state,\r\n                cardPacksTotalCount: action.cardPacksTotalCount,\r\n                maxCardsCount: action.maxCardsCount,\r\n                minCardsCount: action.minCardsCount,\r\n                page: action.page,\r\n                pageCount: action.pageCount\r\n            }\r\n        }\r\n        case \"packs/SWITCH-PAGE-COUNT\": {\r\n            return {\r\n                ...state,\r\n                pageCount: action.pageCount\r\n            }\r\n        }\r\n        case \"packs/CHANGE-PAGE\": {\r\n            return {\r\n                ...state,\r\n                page: action.page\r\n            }\r\n        }\r\n        case \"packs/PAGES-BUTTON-SWITCHER\": {\r\n\r\n            let pagesCount = Math.ceil(state.cardPacksTotalCount / state.pageCount)\r\n\r\n            let pagesButtonSwitcherNew = [];\r\n\r\n            if (pagesCount < 6) {\r\n                for (let i = 1; i <= pagesCount; i++) {\r\n                    pagesButtonSwitcherNew.push(i)\r\n                }\r\n            }\r\n            else {\r\n                pagesButtonSwitcherNew.push(1)\r\n                if (state.page < 5) {\r\n                    for (let i = 2; i <= 6; i++) {\r\n                        pagesButtonSwitcherNew.push(i)\r\n                    }\r\n                }\r\n                else {\r\n                    if (state.page > pagesCount-3) {\r\n                        for (let i = 5; i >= 1; i--) {\r\n                            pagesButtonSwitcherNew.push(pagesCount-i)\r\n                        }\r\n                    }\r\n                    else {\r\n                        for (let i = state.page-2; i <= state.page+2; i++) {\r\n                            pagesButtonSwitcherNew.push(i)\r\n                        }\r\n                    }\r\n                }\r\n                pagesButtonSwitcherNew.push(pagesCount)\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                pagesButtonSwitcher: [...pagesButtonSwitcherNew]\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsPacksType>\r\n\r\n//thunk\r\n/*export const fetchPacksTC = (): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsPacksType>) => {\r\n        dispatch(setLoadingStatusAC('loading'))\r\n        packsAPI.getPacks()\r\n            .then((res) => {\r\n                dispatch(getPacksAC(res.data.cardPacks))\r\n                dispatch(setLoadingStatusAC('idle'))\r\n            })\r\n            .catch((e) => {\r\n                dispatch(setLoadingStatusAC('idle'))\r\n                const error = e.response ? e.response.data.error : e.message\r\n                dispatch(setAppErrorAC(error))\r\n            })\r\n    }\r\n}*/\r\n\r\n//thunk\r\nexport const fetchPacksTC = () => (dispatch: any, getState: () => AppRootStateType) => {\r\n    const isMyPacks = getState().Packs.isMyPacks\r\n    const _id = getState().Profile._id\r\n    const pageCount = getState().Packs.pageCount\r\n    const page = getState().Packs.page\r\n    debugger\r\n    dispatch(setLoadingStatusAC('loading'))\r\n    packsAPI.getPacks(isMyPacks, _id, pageCount, page)\r\n        .then((res) => {\r\n            dispatch(getPacksAC(res.data.cardPacks))\r\n            dispatch(allPacksDataAC(res.data.cardPacksTotalCount, res.data.maxCardsCount, res.data.minCardsCount, res.data.page, res.data.pageCount))\r\n            dispatch(pagesButtonSwitcherAC())\r\n            dispatch(setLoadingStatusAC('idle'))\r\n        })\r\n        .catch((e) => {\r\n            dispatch(setLoadingStatusAC('idle'))\r\n            const error = e.response ? e.response.data.error : e.message\r\n            dispatch(setAppErrorAC(error))\r\n        })\r\n}\r\n\r\nexport const isMyPacksTC = (isMyPacks: boolean) => async (dispatch: any) => {\r\n    await dispatch(setLoadingStatusAC('loading'));\r\n    await dispatch(isMyPacksAC(isMyPacks))\r\n    await dispatch(fetchPacksTC())\r\n    await dispatch(setLoadingStatusAC('idle'))\r\n}\r\n\r\nexport const switchPageCountTC = (pageCount: number) => async (dispatch: any) => {\r\n    await dispatch(setLoadingStatusAC('loading'));\r\n    await dispatch(switchPageCountAC(pageCount))\r\n    await dispatch(fetchPacksTC())\r\n    await dispatch(setLoadingStatusAC('idle'))\r\n}\r\n\r\nexport const changePageTC = (page: number) => async (dispatch: any) => {\r\n    await dispatch(setLoadingStatusAC('loading'));\r\n    await dispatch(changePageAC(page))\r\n    await dispatch(fetchPacksTC())\r\n    await dispatch(setLoadingStatusAC('idle'))\r\n}\r\n\r\n\r\n//type InitStateType = typeof initState;\r\n// type addPacksACType = ReturnType<typeof addPacksAC>\r\n// const addPack = \"packs/ADD-PACK\"\r\n//export const initState: Array<PackType> = []\r\n// export const addPacksAC = () => ({\r\n//     type: addPack\r\n// } as const)\r\n\r\n\r\n\r\nexport const addPackTC = (name: string, isPrivate: boolean): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsPacksType>) => {\r\n        dispatch(setLoadingStatusAC('loading'));\r\n        packsAPI.addPack(name, isPrivate)\r\n            .then((res) => {\r\n                // dispatch(addPacksAC())\r\n                dispatch(fetchPacksTC())\r\n                dispatch(setLoadingStatusAC('idle'))\r\n            })\r\n            .catch((e) => {\r\n                dispatch(setLoadingStatusAC('idle'))\r\n                const error = e.response ? e.response.data.error : e.message\r\n                dispatch(setAppErrorAC(error))\r\n            })\r\n    }\r\n}\r\n\r\nexport const deletePackTC = (_id: string): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsPacksType>) => {\r\n        dispatch(setLoadingStatusAC('loading'));\r\n        packsAPI.deletePack(_id)\r\n            .then(() => {\r\n                dispatch(fetchPacksTC())\r\n                dispatch(setLoadingStatusAC('idle'))\r\n            })\r\n            .catch((e) => {\r\n                dispatch(setLoadingStatusAC('idle'))\r\n                const error = e.response ? e.response.data.error : e.message\r\n                dispatch(setAppErrorAC(error))\r\n            })\r\n    }\r\n}\r\n\r\nexport const updatePackTC = (_id: string, name: string): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsPacksType>) => {\r\n        dispatch(setLoadingStatusAC('loading'));\r\n        packsAPI.updatePack(_id, name)\r\n            .then(() => {\r\n                dispatch(fetchPacksTC())\r\n                dispatch(setLoadingStatusAC('idle'))\r\n            })\r\n            .catch((e) => {\r\n                dispatch(setLoadingStatusAC('idle'))\r\n                const error = e.response ? e.response.data.error : e.message\r\n                dispatch(setAppErrorAC(error))\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from 'react'\r\nimport {changePageTC, isMyPacksTC, switchPageCountTC} from \"../../../store/packsReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../store/store\";\r\nimport { Checkbox } from '@material-ui/core';\r\nimport {Button, MenuItem, Select, SelectChangeEvent } from '@mui/material';\r\nimport s from './SortPacks.module.css'\r\n\r\nconst SortPacks = () => {\r\n\r\n    let isMyPacks = useSelector<AppRootStateType, boolean>(state => state.Packs.isMyPacks);\r\n    let cardPacksTotalCount = useSelector<AppRootStateType, number>(state => state.Packs.cardPacksTotalCount);\r\n    let pageCount = useSelector<AppRootStateType, number>(state => state.Packs.pageCount);\r\n    let page = useSelector<AppRootStateType, number>(state => state.Packs.page);\r\n    let pagesButtonSwitcher = useSelector<AppRootStateType, Array<number>>(state => state.Packs.pagesButtonSwitcher);\r\n    const dispatch = useDispatch()\r\n\r\n    const isMyPacksOnChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(isMyPacksTC(e.currentTarget.checked))\r\n    }\r\n\r\n    const switchPageCount = (e: SelectChangeEvent<string>) => {\r\n        const val = Number(e.target.value)\r\n        dispatch(switchPageCountTC(val))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <input\r\n                    type={'checkbox'}\r\n                    onChange={isMyPacksOnChange}\r\n                    checked={isMyPacks}\r\n                /> My Packs\r\n            </div>\r\n            <div>\r\n                cardPacksTotalCount: {cardPacksTotalCount}\r\n            </div>\r\n            <div>\r\n                In One Page:\r\n                <Select\r\n                    //labelId=\"demo-simple-select-label\"\r\n                    //id=\"demo-simple-select\"\r\n                    value={pageCount.toString()}\r\n                    variant=\"filled\"\r\n                    label=\"Count\"\r\n                    onChange={switchPageCount}\r\n                >\r\n                    <MenuItem value={10}>10 Ten</MenuItem>\r\n                    <MenuItem value={20}>20 Twenty</MenuItem>\r\n                    <MenuItem value={30}>30 Thirty</MenuItem>\r\n                    <MenuItem value={40}>40 Forty</MenuItem>\r\n                    <MenuItem value={50}>50 Fifty</MenuItem>\r\n                </Select>\r\n            </div>\r\n            <div>\r\n                {pagesButtonSwitcher.map(b =>\r\n                    <Button\r\n                        size=\"small\"\r\n                        variant={page === b ? \"contained\" : \"text\"}\r\n                        onClick={(e) => {\r\n                            dispatch(changePageTC(b))\r\n                        }}>{b}</Button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SortPacks\r\n\r\n\r\n\r\n/*\r\n<Button\r\nvariant={page === b ? \"contained\" : \"text\"}\r\nonClick={(e) => {dispatch(changePageTC(b))\r\n>{b}</Button>\r\n\r\n<Button variant=\"contained\">Contained</Button>*/\r\n","import React, {ChangeEvent, useEffect} from 'react';\r\nimport Packs from \"./Packs\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {PackType} from \"../../api/cardsAPI\";\r\nimport {addPackTC, deletePackTC, fetchPacksTC, isMyPacksTC, updatePackTC} from \"../../store/packsReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport SortPacks from \"./SortPacks/SortPacks\";\r\n\r\n\r\nfunction PacksContainer() {\r\n    const dispatch = useDispatch()\r\n    const packs = useSelector<AppRootStateType, Array<PackType>>(state => state.Packs.packsArray)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.LogIn.isLoggedIn);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchPacksTC())\r\n    }, [])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n    const addPackHandler = () => {\r\n        dispatch(addPackTC(\"NewName-R\", false))\r\n    }\r\n    const deletePackHandler = (_id: string) => {\r\n        dispatch(deletePackTC(_id))\r\n    }\r\n    const updatePackHandler = (_id: string, name: string) => {\r\n        dispatch(updatePackTC(_id, name))\r\n    }\r\n    const packsForTable = packs.map((p) => ({\r\n        firstCell: p.name,\r\n        secondCell: p.cardsCount,\r\n        thirdCell: p.updated,\r\n        _id: p._id\r\n    }))\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <SortPacks />\r\n            <Packs packsForTable={packsForTable}\r\n                   addPackHandler={addPackHandler}\r\n                   deletePackHandler={deletePackHandler}\r\n                   updatePackHandler={updatePackHandler}\r\n            />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default PacksContainer","import {CardType, trainingCardsAPI} from \"../api/cardsAPI\";\r\nimport {setAppErrorAC, setAppErrorAT, setLoadingStatusAC, setLoadingStatusAT} from \"./appReducer\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\n\r\ntype InitStateType = typeof initState;\r\ntype GetCardsActionType = ReturnType<typeof getCardsAC>\r\nexport type ActionsCardsType = setLoadingStatusAT | setAppErrorAT | GetCardsActionType\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsCardsType>\r\n\r\nexport const initState: Array<CardType> = [];\r\nconst getCards = \"cards/GET-CARDS\"\r\n\r\n\r\nexport const cardsReducer = (state: InitStateType = initState, action: ActionsCardsType): InitStateType => {\r\n    switch (action.type) {\r\n        case getCards: {\r\n            return action.cards\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCardsAC = (cards: Array<CardType>) => ({\r\n    type: getCards, cards\r\n} as const)\r\n\r\nexport const fetchCardsTC = (cardsPack_id: string): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsCardsType>) => {\r\n        dispatch(setLoadingStatusAC('loading'));\r\n        trainingCardsAPI.getCards(cardsPack_id)\r\n            .then((res) => {\r\n                dispatch(getCardsAC(res.data.cards))\r\n                dispatch(setLoadingStatusAC('idle'))\r\n            })\r\n            .catch((e) => {\r\n                dispatch(setLoadingStatusAC('idle'))\r\n                const error = e.response ? e.response.data.error : e.message\r\n                dispatch(setAppErrorAC(error))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addCardTC = (cardsPack_id: string, question: string, answer: string, grade: number): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsCardsType>) => {\r\n        dispatch(setLoadingStatusAC('loading'));\r\n        trainingCardsAPI.addCard(cardsPack_id, question, answer, grade)\r\n            .then(() => {\r\n                dispatch(fetchCardsTC(cardsPack_id));\r\n                dispatch(setLoadingStatusAC('idle'));\r\n            })\r\n            .catch((e) => {\r\n                dispatch(setLoadingStatusAC('idle'))\r\n                const error = e.response ? e.response.data.error : e.message\r\n                dispatch(setAppErrorAC(error))\r\n            })\r\n    }\r\n}\r\nexport const deleteCardTC = (_id:string, cardsPack_id: string): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsCardsType>) => {\r\n        dispatch(setLoadingStatusAC('loading'));\r\n        debugger\r\n        trainingCardsAPI.deleteCard(_id)\r\n            .then(() => {\r\n                dispatch(fetchCardsTC(cardsPack_id));\r\n                dispatch(setLoadingStatusAC('idle'));\r\n            })\r\n            .catch((e) => {\r\n                dispatch(setLoadingStatusAC('idle'))\r\n                const error = e.response ? e.response.data.error : e.message\r\n                dispatch(setAppErrorAC(error))\r\n            })\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Table from \"../../common/Table/Table\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\ntype PropsType = {\r\n    cardsForTable: Array<any>\r\n    addCardHandler: (cardsPack_id: string) => void\r\n    cardsPack_id: string\r\n    deleteCardHandler: (cardsPack_id: string, _id?: string) => void\r\n}\r\n\r\nfunction Cards(props: PropsType) {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                variant={'outlined'}\r\n                color={\"primary\"}\r\n                size={\"small\"}\r\n                onClick={() => props.addCardHandler(props.cardsPack_id)}>\r\n                Add card\r\n            </Button>\r\n            <Table\r\n                tableHeaders={[\"Question\", \"Answer\", \"Grade\", \"Updated\", \"Delete card\", \"Update card\"]}\r\n                tableDate={props.cardsForTable}\r\n                deleteHandler={props.deleteCardHandler}\r\n                updateHandler ={(_id: string, name: string) => {}}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../store/store\";\r\nimport {CardType} from \"../../api/cardsAPI\";\r\nimport {addCardTC, deleteCardTC, fetchCardsTC} from \"../../store/cardsReducer\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport Cards from \"./Cards\";\r\n\r\n\r\nfunction CardsContainer() {\r\n    const dispatch = useDispatch()\r\n    const cards = useSelector<AppRootStateType, CardType[]>(state => state.Cards)\r\n    const {cardsPack_id} = useParams<{ cardsPack_id: string }>()\r\n    useEffect(() => {\r\n        dispatch(fetchCardsTC(cardsPack_id))\r\n    }, [])\r\n\r\n    const cardsForTable = cards.map((c) => ({\r\n        firstCell: c.question,\r\n        secondCell: c.answer,\r\n        thirdCell: c.grade,\r\n        forthCell: c.updated,\r\n        _id: c._id,\r\n\r\n    }))\r\n\r\n    const addCardHandler = (cardsPack_id: string) => {\r\n        dispatch(addCardTC(cardsPack_id, \"test question\", \"test answer\", 0))\r\n    }\r\n\r\n    const deleteCardHandler = (_id: string) => {\r\n        dispatch(deleteCardTC(_id, cardsPack_id))\r\n    }\r\n\r\n    return (\r\n        <Cards\r\n            cardsForTable = {cardsForTable}\r\n            cardsPack_id = {cardsPack_id}\r\n            addCardHandler={addCardHandler}\r\n            deleteCardHandler = {deleteCardHandler}\r\n\r\n\r\n        />\r\n    )\r\n}\r\n\r\nexport default CardsContainer;","import React from 'react';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\n/*import s from './App.module.css';*/\r\nimport Error404 from './pages/Error404/Error404';\r\nimport {LogIn} from './pages/LogIn/LogIn';\r\nimport SetNewPassword from \"../src/pages/SetNewPassword/SetNewPassword\";\r\nimport RecoveryPassword from \"./pages/RecoveryPassword/RecoveryPassword\";\r\nimport SignUp from './pages/SignUp/SignUp';\r\nimport LoadingLine from './common/LoadingLine/LoadingLine';\r\nimport {ErrorSnackbar} from './common/ErrorSnackbar/ErrorSnackbar';\r\nimport EditProfile from \"./pages/EditProfile/EditProfile\";\r\nimport Header from \"./pages/Header/Header\";\r\nimport ProfileContainer from \"./pages/Profile/ProfileContainer\";\r\nimport StartPage from \"./pages/StartPage/StartPage\";\r\nimport PacksContainer from \"./pages/Packs/PacksContainer\";\r\nimport CardsContainer from \"./pages/Cards/CardsContainer\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <LoadingLine/>\r\n            <Switch>\r\n                <Route exact path={'/'} render={() => <StartPage/>}/>\r\n                <Route path={'/SetNewPassword/:token'} render={() => <SetNewPassword/>}/>\r\n                <Route path={'/Error404'} render={() => <Error404/>}/>\r\n                <Route path={'/login'} render={() => <LogIn/>}/>\r\n                <Route path={'/Profile'} render={() => <ProfileContainer/>}/>\r\n                <Route path={'/RecoveryPassword'} render={() => <RecoveryPassword/>}/>\r\n                <Route path={'/SignUp'} render={() => <SignUp/>}/>\r\n                <Route path={'/EditProfile'} render={() => <EditProfile/>}/>\r\n                <Route path={'/Packs'} render={() => <PacksContainer/>}/>\r\n                <Route path={'/Cards/:cardsPack_id'} render={() => <CardsContainer/>}/>\r\n                <Redirect from={'*'} to={'/error404'}/>\r\n            </Switch>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from \"./appReducer\";\r\nimport {setNewPasswordReducer} from \"./setNewPasswordReducer\";\r\nimport {LogInReducer} from \"./logInReducer\";\r\nimport {ProfileReducer} from \"./profileReducer\";\r\nimport {RecoveryPasswordReducer} from \"./recoveryPasswordReducer\";\r\nimport {SignUpReducer} from \"./signUpReducer\";\r\nimport {packsReducer} from \"./packsReducer\";\r\nimport {cardsReducer} from \"./cardsReducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    setNewPassword: setNewPasswordReducer,\r\n    LogIn: LogInReducer,\r\n    Profile: ProfileReducer,\r\n    RecoveryPassword: RecoveryPasswordReducer,\r\n    SignUp: SignUpReducer,\r\n    Packs: packsReducer,\r\n    Cards: cardsReducer\r\n})\r\n\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter } from 'react-router-dom';\r\nimport {store} from \"./store/store\";\r\nimport { Provider } from 'react-redux';\r\n\r\n// commit connection\r\n\r\n\r\n//coment\r\n\r\n//3\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerBlock\":\"Haeder_headerBlock__2b7JJ\",\"nav\":\"Haeder_nav__xQjmm\",\"item\":\"Haeder_item__3CdaX\",\"activeLink\":\"Haeder_activeLink__17v7Z\",\"isLoginFix\":\"Haeder_isLoginFix__ORcrh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__WgpTr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Profile_background__2NQ7O\",\"blockContainer\":\"Profile_blockContainer__RHrsM\",\"imgContainer\":\"Profile_imgContainer__3JzgA\",\"text\":\"Profile_text__2HzNo\",\"button\":\"Profile_button__28idB\"};"],"sourceRoot":""}